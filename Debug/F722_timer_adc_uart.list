
F722_timer_adc_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033ac  080001e0  080001e0  000101e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  0800358c  0800358c  0001358c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003604  08003604  00013604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800360c  0800360c  0001360c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003610  08003610  00013610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  20000000  08003614  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002220  20000014  08003628  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20002234  08003628  00022234  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .debug_info   00018aad  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002a84  00000000  00000000  00038af1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00009f66  00000000  00000000  0003b575  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000db0  00000000  00000000  000454e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000de8  00000000  00000000  00046290  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000698e  00000000  00000000  00047078  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00004ad9  00000000  00000000  0004da06  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000524df  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002544  00000000  00000000  0005255c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000014 	.word	0x20000014
 80001fc:	00000000 	.word	0x00000000
 8000200:	08003574 	.word	0x08003574

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000018 	.word	0x20000018
 800021c:	08003574 	.word	0x08003574

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b97a 	b.w	800052c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	468c      	mov	ip, r1
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	9e08      	ldr	r6, [sp, #32]
 800025c:	2b00      	cmp	r3, #0
 800025e:	d151      	bne.n	8000304 <__udivmoddi4+0xb4>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d96d      	bls.n	8000342 <__udivmoddi4+0xf2>
 8000266:	fab2 fe82 	clz	lr, r2
 800026a:	f1be 0f00 	cmp.w	lr, #0
 800026e:	d00b      	beq.n	8000288 <__udivmoddi4+0x38>
 8000270:	f1ce 0c20 	rsb	ip, lr, #32
 8000274:	fa01 f50e 	lsl.w	r5, r1, lr
 8000278:	fa20 fc0c 	lsr.w	ip, r0, ip
 800027c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000280:	ea4c 0c05 	orr.w	ip, ip, r5
 8000284:	fa00 f40e 	lsl.w	r4, r0, lr
 8000288:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800028c:	0c25      	lsrs	r5, r4, #16
 800028e:	fbbc f8fa 	udiv	r8, ip, sl
 8000292:	fa1f f987 	uxth.w	r9, r7
 8000296:	fb0a cc18 	mls	ip, sl, r8, ip
 800029a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800029e:	fb08 f309 	mul.w	r3, r8, r9
 80002a2:	42ab      	cmp	r3, r5
 80002a4:	d90a      	bls.n	80002bc <__udivmoddi4+0x6c>
 80002a6:	19ed      	adds	r5, r5, r7
 80002a8:	f108 32ff 	add.w	r2, r8, #4294967295
 80002ac:	f080 8123 	bcs.w	80004f6 <__udivmoddi4+0x2a6>
 80002b0:	42ab      	cmp	r3, r5
 80002b2:	f240 8120 	bls.w	80004f6 <__udivmoddi4+0x2a6>
 80002b6:	f1a8 0802 	sub.w	r8, r8, #2
 80002ba:	443d      	add	r5, r7
 80002bc:	1aed      	subs	r5, r5, r3
 80002be:	b2a4      	uxth	r4, r4
 80002c0:	fbb5 f0fa 	udiv	r0, r5, sl
 80002c4:	fb0a 5510 	mls	r5, sl, r0, r5
 80002c8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002cc:	fb00 f909 	mul.w	r9, r0, r9
 80002d0:	45a1      	cmp	r9, r4
 80002d2:	d909      	bls.n	80002e8 <__udivmoddi4+0x98>
 80002d4:	19e4      	adds	r4, r4, r7
 80002d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002da:	f080 810a 	bcs.w	80004f2 <__udivmoddi4+0x2a2>
 80002de:	45a1      	cmp	r9, r4
 80002e0:	f240 8107 	bls.w	80004f2 <__udivmoddi4+0x2a2>
 80002e4:	3802      	subs	r0, #2
 80002e6:	443c      	add	r4, r7
 80002e8:	eba4 0409 	sub.w	r4, r4, r9
 80002ec:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002f0:	2100      	movs	r1, #0
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d061      	beq.n	80003ba <__udivmoddi4+0x16a>
 80002f6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002fa:	2300      	movs	r3, #0
 80002fc:	6034      	str	r4, [r6, #0]
 80002fe:	6073      	str	r3, [r6, #4]
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	428b      	cmp	r3, r1
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0xc8>
 8000308:	2e00      	cmp	r6, #0
 800030a:	d054      	beq.n	80003b6 <__udivmoddi4+0x166>
 800030c:	2100      	movs	r1, #0
 800030e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000312:	4608      	mov	r0, r1
 8000314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000318:	fab3 f183 	clz	r1, r3
 800031c:	2900      	cmp	r1, #0
 800031e:	f040 808e 	bne.w	800043e <__udivmoddi4+0x1ee>
 8000322:	42ab      	cmp	r3, r5
 8000324:	d302      	bcc.n	800032c <__udivmoddi4+0xdc>
 8000326:	4282      	cmp	r2, r0
 8000328:	f200 80fa 	bhi.w	8000520 <__udivmoddi4+0x2d0>
 800032c:	1a84      	subs	r4, r0, r2
 800032e:	eb65 0503 	sbc.w	r5, r5, r3
 8000332:	2001      	movs	r0, #1
 8000334:	46ac      	mov	ip, r5
 8000336:	2e00      	cmp	r6, #0
 8000338:	d03f      	beq.n	80003ba <__udivmoddi4+0x16a>
 800033a:	e886 1010 	stmia.w	r6, {r4, ip}
 800033e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000342:	b912      	cbnz	r2, 800034a <__udivmoddi4+0xfa>
 8000344:	2701      	movs	r7, #1
 8000346:	fbb7 f7f2 	udiv	r7, r7, r2
 800034a:	fab7 fe87 	clz	lr, r7
 800034e:	f1be 0f00 	cmp.w	lr, #0
 8000352:	d134      	bne.n	80003be <__udivmoddi4+0x16e>
 8000354:	1beb      	subs	r3, r5, r7
 8000356:	0c3a      	lsrs	r2, r7, #16
 8000358:	fa1f fc87 	uxth.w	ip, r7
 800035c:	2101      	movs	r1, #1
 800035e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000362:	0c25      	lsrs	r5, r4, #16
 8000364:	fb02 3318 	mls	r3, r2, r8, r3
 8000368:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800036c:	fb0c f308 	mul.w	r3, ip, r8
 8000370:	42ab      	cmp	r3, r5
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x134>
 8000374:	19ed      	adds	r5, r5, r7
 8000376:	f108 30ff 	add.w	r0, r8, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x132>
 800037c:	42ab      	cmp	r3, r5
 800037e:	f200 80d1 	bhi.w	8000524 <__udivmoddi4+0x2d4>
 8000382:	4680      	mov	r8, r0
 8000384:	1aed      	subs	r5, r5, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb5 f0f2 	udiv	r0, r5, r2
 800038c:	fb02 5510 	mls	r5, r2, r0, r5
 8000390:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000394:	fb0c fc00 	mul.w	ip, ip, r0
 8000398:	45a4      	cmp	ip, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x15c>
 800039c:	19e4      	adds	r4, r4, r7
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x15a>
 80003a4:	45a4      	cmp	ip, r4
 80003a6:	f200 80b8 	bhi.w	800051a <__udivmoddi4+0x2ca>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 040c 	sub.w	r4, r4, ip
 80003b0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003b4:	e79d      	b.n	80002f2 <__udivmoddi4+0xa2>
 80003b6:	4631      	mov	r1, r6
 80003b8:	4630      	mov	r0, r6
 80003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003be:	f1ce 0420 	rsb	r4, lr, #32
 80003c2:	fa05 f30e 	lsl.w	r3, r5, lr
 80003c6:	fa07 f70e 	lsl.w	r7, r7, lr
 80003ca:	fa20 f804 	lsr.w	r8, r0, r4
 80003ce:	0c3a      	lsrs	r2, r7, #16
 80003d0:	fa25 f404 	lsr.w	r4, r5, r4
 80003d4:	ea48 0803 	orr.w	r8, r8, r3
 80003d8:	fbb4 f1f2 	udiv	r1, r4, r2
 80003dc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003e0:	fb02 4411 	mls	r4, r2, r1, r4
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003ec:	fb01 f30c 	mul.w	r3, r1, ip
 80003f0:	42ab      	cmp	r3, r5
 80003f2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003f6:	d909      	bls.n	800040c <__udivmoddi4+0x1bc>
 80003f8:	19ed      	adds	r5, r5, r7
 80003fa:	f101 30ff 	add.w	r0, r1, #4294967295
 80003fe:	f080 808a 	bcs.w	8000516 <__udivmoddi4+0x2c6>
 8000402:	42ab      	cmp	r3, r5
 8000404:	f240 8087 	bls.w	8000516 <__udivmoddi4+0x2c6>
 8000408:	3902      	subs	r1, #2
 800040a:	443d      	add	r5, r7
 800040c:	1aeb      	subs	r3, r5, r3
 800040e:	fa1f f588 	uxth.w	r5, r8
 8000412:	fbb3 f0f2 	udiv	r0, r3, r2
 8000416:	fb02 3310 	mls	r3, r2, r0, r3
 800041a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800041e:	fb00 f30c 	mul.w	r3, r0, ip
 8000422:	42ab      	cmp	r3, r5
 8000424:	d907      	bls.n	8000436 <__udivmoddi4+0x1e6>
 8000426:	19ed      	adds	r5, r5, r7
 8000428:	f100 38ff 	add.w	r8, r0, #4294967295
 800042c:	d26f      	bcs.n	800050e <__udivmoddi4+0x2be>
 800042e:	42ab      	cmp	r3, r5
 8000430:	d96d      	bls.n	800050e <__udivmoddi4+0x2be>
 8000432:	3802      	subs	r0, #2
 8000434:	443d      	add	r5, r7
 8000436:	1aeb      	subs	r3, r5, r3
 8000438:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800043c:	e78f      	b.n	800035e <__udivmoddi4+0x10e>
 800043e:	f1c1 0720 	rsb	r7, r1, #32
 8000442:	fa22 f807 	lsr.w	r8, r2, r7
 8000446:	408b      	lsls	r3, r1
 8000448:	fa05 f401 	lsl.w	r4, r5, r1
 800044c:	ea48 0303 	orr.w	r3, r8, r3
 8000450:	fa20 fe07 	lsr.w	lr, r0, r7
 8000454:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000458:	40fd      	lsrs	r5, r7
 800045a:	ea4e 0e04 	orr.w	lr, lr, r4
 800045e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000462:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000466:	fb0c 5519 	mls	r5, ip, r9, r5
 800046a:	fa1f f883 	uxth.w	r8, r3
 800046e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000472:	fb09 f408 	mul.w	r4, r9, r8
 8000476:	42ac      	cmp	r4, r5
 8000478:	fa02 f201 	lsl.w	r2, r2, r1
 800047c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x244>
 8000482:	18ed      	adds	r5, r5, r3
 8000484:	f109 30ff 	add.w	r0, r9, #4294967295
 8000488:	d243      	bcs.n	8000512 <__udivmoddi4+0x2c2>
 800048a:	42ac      	cmp	r4, r5
 800048c:	d941      	bls.n	8000512 <__udivmoddi4+0x2c2>
 800048e:	f1a9 0902 	sub.w	r9, r9, #2
 8000492:	441d      	add	r5, r3
 8000494:	1b2d      	subs	r5, r5, r4
 8000496:	fa1f fe8e 	uxth.w	lr, lr
 800049a:	fbb5 f0fc 	udiv	r0, r5, ip
 800049e:	fb0c 5510 	mls	r5, ip, r0, r5
 80004a2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004a6:	fb00 f808 	mul.w	r8, r0, r8
 80004aa:	45a0      	cmp	r8, r4
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x26e>
 80004ae:	18e4      	adds	r4, r4, r3
 80004b0:	f100 35ff 	add.w	r5, r0, #4294967295
 80004b4:	d229      	bcs.n	800050a <__udivmoddi4+0x2ba>
 80004b6:	45a0      	cmp	r8, r4
 80004b8:	d927      	bls.n	800050a <__udivmoddi4+0x2ba>
 80004ba:	3802      	subs	r0, #2
 80004bc:	441c      	add	r4, r3
 80004be:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004c2:	eba4 0408 	sub.w	r4, r4, r8
 80004c6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ca:	454c      	cmp	r4, r9
 80004cc:	46c6      	mov	lr, r8
 80004ce:	464d      	mov	r5, r9
 80004d0:	d315      	bcc.n	80004fe <__udivmoddi4+0x2ae>
 80004d2:	d012      	beq.n	80004fa <__udivmoddi4+0x2aa>
 80004d4:	b156      	cbz	r6, 80004ec <__udivmoddi4+0x29c>
 80004d6:	ebba 030e 	subs.w	r3, sl, lr
 80004da:	eb64 0405 	sbc.w	r4, r4, r5
 80004de:	fa04 f707 	lsl.w	r7, r4, r7
 80004e2:	40cb      	lsrs	r3, r1
 80004e4:	431f      	orrs	r7, r3
 80004e6:	40cc      	lsrs	r4, r1
 80004e8:	6037      	str	r7, [r6, #0]
 80004ea:	6074      	str	r4, [r6, #4]
 80004ec:	2100      	movs	r1, #0
 80004ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f2:	4618      	mov	r0, r3
 80004f4:	e6f8      	b.n	80002e8 <__udivmoddi4+0x98>
 80004f6:	4690      	mov	r8, r2
 80004f8:	e6e0      	b.n	80002bc <__udivmoddi4+0x6c>
 80004fa:	45c2      	cmp	sl, r8
 80004fc:	d2ea      	bcs.n	80004d4 <__udivmoddi4+0x284>
 80004fe:	ebb8 0e02 	subs.w	lr, r8, r2
 8000502:	eb69 0503 	sbc.w	r5, r9, r3
 8000506:	3801      	subs	r0, #1
 8000508:	e7e4      	b.n	80004d4 <__udivmoddi4+0x284>
 800050a:	4628      	mov	r0, r5
 800050c:	e7d7      	b.n	80004be <__udivmoddi4+0x26e>
 800050e:	4640      	mov	r0, r8
 8000510:	e791      	b.n	8000436 <__udivmoddi4+0x1e6>
 8000512:	4681      	mov	r9, r0
 8000514:	e7be      	b.n	8000494 <__udivmoddi4+0x244>
 8000516:	4601      	mov	r1, r0
 8000518:	e778      	b.n	800040c <__udivmoddi4+0x1bc>
 800051a:	3802      	subs	r0, #2
 800051c:	443c      	add	r4, r7
 800051e:	e745      	b.n	80003ac <__udivmoddi4+0x15c>
 8000520:	4608      	mov	r0, r1
 8000522:	e708      	b.n	8000336 <__udivmoddi4+0xe6>
 8000524:	f1a8 0802 	sub.w	r8, r8, #2
 8000528:	443d      	add	r5, r7
 800052a:	e72b      	b.n	8000384 <__udivmoddi4+0x134>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000530:	b510      	push	{r4, lr}
 8000532:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000534:	4b0e      	ldr	r3, [pc, #56]	; (8000570 <HAL_InitTick+0x40>)
 8000536:	7818      	ldrb	r0, [r3, #0]
 8000538:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800053c:	fbb3 f3f0 	udiv	r3, r3, r0
 8000540:	4a0c      	ldr	r2, [pc, #48]	; (8000574 <HAL_InitTick+0x44>)
 8000542:	6810      	ldr	r0, [r2, #0]
 8000544:	fbb0 f0f3 	udiv	r0, r0, r3
 8000548:	f000 faea 	bl	8000b20 <HAL_SYSTICK_Config>
 800054c:	b968      	cbnz	r0, 800056a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800054e:	2c0f      	cmp	r4, #15
 8000550:	d901      	bls.n	8000556 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000552:	2001      	movs	r0, #1
  }

  /* Return function status */
  return HAL_OK;
}
 8000554:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000556:	2200      	movs	r2, #0
 8000558:	4621      	mov	r1, r4
 800055a:	f04f 30ff 	mov.w	r0, #4294967295
 800055e:	f000 faa3 	bl	8000aa8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000562:	4b05      	ldr	r3, [pc, #20]	; (8000578 <HAL_InitTick+0x48>)
 8000564:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 8000566:	2000      	movs	r0, #0
 8000568:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800056a:	2001      	movs	r0, #1
 800056c:	bd10      	pop	{r4, pc}
 800056e:	bf00      	nop
 8000570:	20000000 	.word	0x20000000
 8000574:	20000008 	.word	0x20000008
 8000578:	20000004 	.word	0x20000004

0800057c <HAL_Init>:
{
 800057c:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800057e:	2003      	movs	r0, #3
 8000580:	f000 fa80 	bl	8000a84 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000584:	2000      	movs	r0, #0
 8000586:	f7ff ffd3 	bl	8000530 <HAL_InitTick>
  HAL_MspInit();
 800058a:	f002 fd89 	bl	80030a0 <HAL_MspInit>
}
 800058e:	2000      	movs	r0, #0
 8000590:	bd08      	pop	{r3, pc}
	...

08000594 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000594:	4a03      	ldr	r2, [pc, #12]	; (80005a4 <HAL_IncTick+0x10>)
 8000596:	6811      	ldr	r1, [r2, #0]
 8000598:	4b03      	ldr	r3, [pc, #12]	; (80005a8 <HAL_IncTick+0x14>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	440b      	add	r3, r1
 800059e:	6013      	str	r3, [r2, #0]
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	20000044 	.word	0x20000044
 80005a8:	20000000 	.word	0x20000000

080005ac <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005ac:	4b01      	ldr	r3, [pc, #4]	; (80005b4 <HAL_GetTick+0x8>)
 80005ae:	6818      	ldr	r0, [r3, #0]
}
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	20000044 	.word	0x20000044

080005b8 <ADC_Init>:
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80005b8:	4b49      	ldr	r3, [pc, #292]	; (80006e0 <ADC_Init+0x128>)
 80005ba:	685a      	ldr	r2, [r3, #4]
 80005bc:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80005c0:	605a      	str	r2, [r3, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80005c2:	685a      	ldr	r2, [r3, #4]
 80005c4:	6841      	ldr	r1, [r0, #4]
 80005c6:	430a      	orrs	r2, r1
 80005c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80005ca:	6802      	ldr	r2, [r0, #0]
 80005cc:	6853      	ldr	r3, [r2, #4]
 80005ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80005d2:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80005d4:	6802      	ldr	r2, [r0, #0]
 80005d6:	6853      	ldr	r3, [r2, #4]
 80005d8:	6901      	ldr	r1, [r0, #16]
 80005da:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80005de:	6053      	str	r3, [r2, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80005e0:	6802      	ldr	r2, [r0, #0]
 80005e2:	6853      	ldr	r3, [r2, #4]
 80005e4:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80005e8:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80005ea:	6802      	ldr	r2, [r0, #0]
 80005ec:	6853      	ldr	r3, [r2, #4]
 80005ee:	6881      	ldr	r1, [r0, #8]
 80005f0:	430b      	orrs	r3, r1
 80005f2:	6053      	str	r3, [r2, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80005f4:	6802      	ldr	r2, [r0, #0]
 80005f6:	6893      	ldr	r3, [r2, #8]
 80005f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80005fc:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80005fe:	6802      	ldr	r2, [r0, #0]
 8000600:	6893      	ldr	r3, [r2, #8]
 8000602:	68c1      	ldr	r1, [r0, #12]
 8000604:	430b      	orrs	r3, r1
 8000606:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000608:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800060a:	4b36      	ldr	r3, [pc, #216]	; (80006e4 <ADC_Init+0x12c>)
 800060c:	429a      	cmp	r2, r3
 800060e:	d049      	beq.n	80006a4 <ADC_Init+0xec>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000610:	6802      	ldr	r2, [r0, #0]
 8000612:	6893      	ldr	r3, [r2, #8]
 8000614:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000618:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800061a:	6802      	ldr	r2, [r0, #0]
 800061c:	6893      	ldr	r3, [r2, #8]
 800061e:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8000620:	430b      	orrs	r3, r1
 8000622:	6093      	str	r3, [r2, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000624:	6802      	ldr	r2, [r0, #0]
 8000626:	6893      	ldr	r3, [r2, #8]
 8000628:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800062c:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800062e:	6802      	ldr	r2, [r0, #0]
 8000630:	6893      	ldr	r3, [r2, #8]
 8000632:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8000634:	430b      	orrs	r3, r1
 8000636:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000638:	6802      	ldr	r2, [r0, #0]
 800063a:	6893      	ldr	r3, [r2, #8]
 800063c:	f023 0302 	bic.w	r3, r3, #2
 8000640:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000642:	6802      	ldr	r2, [r0, #0]
 8000644:	6893      	ldr	r3, [r2, #8]
 8000646:	6981      	ldr	r1, [r0, #24]
 8000648:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800064c:	6093      	str	r3, [r2, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800064e:	6a03      	ldr	r3, [r0, #32]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d132      	bne.n	80006ba <ADC_Init+0x102>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000654:	6802      	ldr	r2, [r0, #0]
 8000656:	6853      	ldr	r3, [r2, #4]
 8000658:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800065c:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800065e:	6802      	ldr	r2, [r0, #0]
 8000660:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8000662:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000666:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000668:	6801      	ldr	r1, [r0, #0]
 800066a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800066c:	69c2      	ldr	r2, [r0, #28]
 800066e:	3a01      	subs	r2, #1
 8000670:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8000674:	62cb      	str	r3, [r1, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000676:	6802      	ldr	r2, [r0, #0]
 8000678:	6893      	ldr	r3, [r2, #8]
 800067a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800067e:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000680:	6802      	ldr	r2, [r0, #0]
 8000682:	6893      	ldr	r3, [r2, #8]
 8000684:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8000686:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 800068a:	6093      	str	r3, [r2, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800068c:	6802      	ldr	r2, [r0, #0]
 800068e:	6893      	ldr	r3, [r2, #8]
 8000690:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000694:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000696:	6802      	ldr	r2, [r0, #0]
 8000698:	6893      	ldr	r3, [r2, #8]
 800069a:	6941      	ldr	r1, [r0, #20]
 800069c:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 80006a0:	6093      	str	r3, [r2, #8]
 80006a2:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80006a4:	6802      	ldr	r2, [r0, #0]
 80006a6:	6893      	ldr	r3, [r2, #8]
 80006a8:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80006ac:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80006ae:	6802      	ldr	r2, [r0, #0]
 80006b0:	6893      	ldr	r3, [r2, #8]
 80006b2:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80006b6:	6093      	str	r3, [r2, #8]
 80006b8:	e7be      	b.n	8000638 <ADC_Init+0x80>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80006ba:	6802      	ldr	r2, [r0, #0]
 80006bc:	6853      	ldr	r3, [r2, #4]
 80006be:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80006c2:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80006c4:	6802      	ldr	r2, [r0, #0]
 80006c6:	6853      	ldr	r3, [r2, #4]
 80006c8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80006cc:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80006ce:	6801      	ldr	r1, [r0, #0]
 80006d0:	684b      	ldr	r3, [r1, #4]
 80006d2:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80006d4:	3a01      	subs	r2, #1
 80006d6:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 80006da:	604b      	str	r3, [r1, #4]
 80006dc:	e7bf      	b.n	800065e <ADC_Init+0xa6>
 80006de:	bf00      	nop
 80006e0:	40012300 	.word	0x40012300
 80006e4:	0f000001 	.word	0x0f000001

080006e8 <HAL_ADC_Init>:
  if(hadc == NULL)
 80006e8:	b320      	cbz	r0, 8000734 <HAL_ADC_Init+0x4c>
{
 80006ea:	b510      	push	{r4, lr}
 80006ec:	4604      	mov	r4, r0
  if(hadc->State == HAL_ADC_STATE_RESET)
 80006ee:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80006f0:	b143      	cbz	r3, 8000704 <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80006f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80006f4:	f013 0f10 	tst.w	r3, #16
 80006f8:	d00a      	beq.n	8000710 <HAL_ADC_Init+0x28>
    tmp_hal_status = HAL_ERROR;
 80006fa:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80006fc:	2300      	movs	r3, #0
 80006fe:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 8000702:	bd10      	pop	{r4, pc}
    ADC_CLEAR_ERRORCODE(hadc);
 8000704:	6443      	str	r3, [r0, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 8000706:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_ADC_MspInit(hadc);
 800070a:	f002 fca5 	bl	8003058 <HAL_ADC_MspInit>
 800070e:	e7f0      	b.n	80006f2 <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 8000710:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000712:	4b09      	ldr	r3, [pc, #36]	; (8000738 <HAL_ADC_Init+0x50>)
 8000714:	4013      	ands	r3, r2
 8000716:	f043 0302 	orr.w	r3, r3, #2
 800071a:	6423      	str	r3, [r4, #64]	; 0x40
    ADC_Init(hadc);
 800071c:	4620      	mov	r0, r4
 800071e:	f7ff ff4b 	bl	80005b8 <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 8000722:	2000      	movs	r0, #0
 8000724:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8000726:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000728:	f023 0303 	bic.w	r3, r3, #3
 800072c:	f043 0301 	orr.w	r3, r3, #1
 8000730:	6423      	str	r3, [r4, #64]	; 0x40
 8000732:	e7e3      	b.n	80006fc <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 8000734:	2001      	movs	r0, #1
 8000736:	4770      	bx	lr
 8000738:	ffffeefd 	.word	0xffffeefd

0800073c <HAL_ADC_Stop_IT>:
  __HAL_LOCK(hadc);
 800073c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000740:	2b01      	cmp	r3, #1
 8000742:	d01b      	beq.n	800077c <HAL_ADC_Stop_IT+0x40>
 8000744:	2301      	movs	r3, #1
 8000746:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_ADC_DISABLE(hadc);
 800074a:	6802      	ldr	r2, [r0, #0]
 800074c:	6893      	ldr	r3, [r2, #8]
 800074e:	f023 0301 	bic.w	r3, r3, #1
 8000752:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8000754:	6803      	ldr	r3, [r0, #0]
 8000756:	689a      	ldr	r2, [r3, #8]
 8000758:	f012 0f01 	tst.w	r2, #1
 800075c:	d109      	bne.n	8000772 <HAL_ADC_Stop_IT+0x36>
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 800075e:	6859      	ldr	r1, [r3, #4]
 8000760:	4a07      	ldr	r2, [pc, #28]	; (8000780 <HAL_ADC_Stop_IT+0x44>)
 8000762:	400a      	ands	r2, r1
 8000764:	605a      	str	r2, [r3, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8000766:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000768:	4b06      	ldr	r3, [pc, #24]	; (8000784 <HAL_ADC_Stop_IT+0x48>)
 800076a:	4013      	ands	r3, r2
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	6403      	str	r3, [r0, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8000772:	2300      	movs	r3, #0
 8000774:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8000778:	4618      	mov	r0, r3
 800077a:	4770      	bx	lr
  __HAL_LOCK(hadc);
 800077c:	2002      	movs	r0, #2
}
 800077e:	4770      	bx	lr
 8000780:	fbffffdf 	.word	0xfbffffdf
 8000784:	ffffeefe 	.word	0xffffeefe

08000788 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8000788:	6803      	ldr	r3, [r0, #0]
 800078a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 800078c:	4770      	bx	lr

0800078e <HAL_ADC_LevelOutOfWindowCallback>:
{
 800078e:	4770      	bx	lr

08000790 <HAL_ADC_ErrorCallback>:
{
 8000790:	4770      	bx	lr

08000792 <HAL_ADC_IRQHandler>:
{
 8000792:	b538      	push	{r3, r4, r5, lr}
 8000794:	4604      	mov	r4, r0
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8000796:	6802      	ldr	r2, [r0, #0]
 8000798:	6811      	ldr	r1, [r2, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800079a:	6853      	ldr	r3, [r2, #4]
 800079c:	f3c3 1340 	ubfx	r3, r3, #5, #1
  if(tmp1 && tmp2)
 80007a0:	ea13 0351 	ands.w	r3, r3, r1, lsr #1
 80007a4:	d02c      	beq.n	8000800 <HAL_ADC_IRQHandler+0x6e>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80007a6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80007a8:	f013 0f10 	tst.w	r3, #16
 80007ac:	d103      	bne.n	80007b6 <HAL_ADC_IRQHandler+0x24>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80007ae:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80007b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007b4:	6403      	str	r3, [r0, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80007b6:	6893      	ldr	r3, [r2, #8]
 80007b8:	f013 5f40 	tst.w	r3, #805306368	; 0x30000000
 80007bc:	d119      	bne.n	80007f2 <HAL_ADC_IRQHandler+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80007be:	69a3      	ldr	r3, [r4, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80007c0:	b9bb      	cbnz	r3, 80007f2 <HAL_ADC_IRQHandler+0x60>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80007c2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80007c4:	f413 0f70 	tst.w	r3, #15728640	; 0xf00000
 80007c8:	d003      	beq.n	80007d2 <HAL_ADC_IRQHandler+0x40>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80007ca:	6893      	ldr	r3, [r2, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80007cc:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80007d0:	d10f      	bne.n	80007f2 <HAL_ADC_IRQHandler+0x60>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80007d2:	6853      	ldr	r3, [r2, #4]
 80007d4:	f023 0320 	bic.w	r3, r3, #32
 80007d8:	6053      	str	r3, [r2, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80007da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80007dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80007e0:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80007e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80007e4:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80007e8:	d103      	bne.n	80007f2 <HAL_ADC_IRQHandler+0x60>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80007ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 80007f2:	4620      	mov	r0, r4
 80007f4:	f002 fac4 	bl	8002d80 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80007f8:	6823      	ldr	r3, [r4, #0]
 80007fa:	f06f 0212 	mvn.w	r2, #18
 80007fe:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8000800:	6823      	ldr	r3, [r4, #0]
 8000802:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8000804:	685a      	ldr	r2, [r3, #4]
 8000806:	f3c2 12c0 	ubfx	r2, r2, #7, #1
  if(tmp1 && tmp2)
 800080a:	ea12 0291 	ands.w	r2, r2, r1, lsr #2
 800080e:	d034      	beq.n	800087a <HAL_ADC_IRQHandler+0xe8>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000810:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000812:	f012 0f10 	tst.w	r2, #16
 8000816:	d103      	bne.n	8000820 <HAL_ADC_IRQHandler+0x8e>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000818:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800081a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800081e:	6422      	str	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000820:	689a      	ldr	r2, [r3, #8]
 8000822:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8000826:	d121      	bne.n	800086c <HAL_ADC_IRQHandler+0xda>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8000828:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800082a:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 800082e:	d003      	beq.n	8000838 <HAL_ADC_IRQHandler+0xa6>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8000830:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8000832:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8000836:	d119      	bne.n	800086c <HAL_ADC_IRQHandler+0xda>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000838:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800083a:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800083e:	d115      	bne.n	800086c <HAL_ADC_IRQHandler+0xda>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8000840:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000842:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8000846:	d111      	bne.n	800086c <HAL_ADC_IRQHandler+0xda>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8000848:	69a2      	ldr	r2, [r4, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 800084a:	b97a      	cbnz	r2, 800086c <HAL_ADC_IRQHandler+0xda>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800084c:	685a      	ldr	r2, [r3, #4]
 800084e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000852:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000854:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000856:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800085a:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800085c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800085e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000862:	d103      	bne.n	800086c <HAL_ADC_IRQHandler+0xda>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000864:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000866:	f043 0301 	orr.w	r3, r3, #1
 800086a:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800086c:	4620      	mov	r0, r4
 800086e:	f000 f907 	bl	8000a80 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000872:	6823      	ldr	r3, [r4, #0]
 8000874:	f06f 020c 	mvn.w	r2, #12
 8000878:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800087a:	6822      	ldr	r2, [r4, #0]
 800087c:	6811      	ldr	r1, [r2, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800087e:	6853      	ldr	r3, [r2, #4]
 8000880:	f3c3 1380 	ubfx	r3, r3, #6, #1
  if(tmp1 && tmp2)
 8000884:	4219      	tst	r1, r3
 8000886:	d003      	beq.n	8000890 <HAL_ADC_IRQHandler+0xfe>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000888:	6813      	ldr	r3, [r2, #0]
 800088a:	f013 0f01 	tst.w	r3, #1
 800088e:	d108      	bne.n	80008a2 <HAL_ADC_IRQHandler+0x110>
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8000890:	6822      	ldr	r2, [r4, #0]
 8000892:	6811      	ldr	r1, [r2, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8000894:	6853      	ldr	r3, [r2, #4]
 8000896:	f3c3 6380 	ubfx	r3, r3, #26, #1
  if(tmp1 && tmp2)
 800089a:	ea13 1351 	ands.w	r3, r3, r1, lsr #5
 800089e:	d10c      	bne.n	80008ba <HAL_ADC_IRQHandler+0x128>
 80008a0:	bd38      	pop	{r3, r4, r5, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80008a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80008a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008a8:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80008aa:	4620      	mov	r0, r4
 80008ac:	f7ff ff6f 	bl	800078e <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80008b0:	6823      	ldr	r3, [r4, #0]
 80008b2:	f06f 0201 	mvn.w	r2, #1
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	e7ea      	b.n	8000890 <HAL_ADC_IRQHandler+0xfe>
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80008ba:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80008bc:	f043 0302 	orr.w	r3, r3, #2
 80008c0:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80008c2:	f06f 0520 	mvn.w	r5, #32
 80008c6:	6015      	str	r5, [r2, #0]
    HAL_ADC_ErrorCallback(hadc);
 80008c8:	4620      	mov	r0, r4
 80008ca:	f7ff ff61 	bl	8000790 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80008ce:	6823      	ldr	r3, [r4, #0]
 80008d0:	601d      	str	r5, [r3, #0]
}
 80008d2:	e7e5      	b.n	80008a0 <HAL_ADC_IRQHandler+0x10e>

080008d4 <HAL_ADC_ConfigChannel>:
{
 80008d4:	b430      	push	{r4, r5}
 80008d6:	b082      	sub	sp, #8
  __IO uint32_t counter = 0;
 80008d8:	2300      	movs	r3, #0
 80008da:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80008dc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	f000 80c0 	beq.w	8000a66 <HAL_ADC_ConfigChannel+0x192>
 80008e6:	2301      	movs	r3, #1
 80008e8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
	if (sConfig->Channel > ADC_CHANNEL_9)
 80008ec:	680b      	ldr	r3, [r1, #0]
 80008ee:	2b09      	cmp	r3, #9
 80008f0:	d922      	bls.n	8000938 <HAL_ADC_ConfigChannel+0x64>
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80008f2:	6805      	ldr	r5, [r0, #0]
 80008f4:	68ea      	ldr	r2, [r5, #12]
 80008f6:	b29b      	uxth	r3, r3
 80008f8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80008fc:	3b1e      	subs	r3, #30
 80008fe:	2407      	movs	r4, #7
 8000900:	fa04 f303 	lsl.w	r3, r4, r3
 8000904:	ea22 0303 	bic.w	r3, r2, r3
 8000908:	60eb      	str	r3, [r5, #12]
		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800090a:	680b      	ldr	r3, [r1, #0]
 800090c:	4a57      	ldr	r2, [pc, #348]	; (8000a6c <HAL_ADC_ConfigChannel+0x198>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d00b      	beq.n	800092a <HAL_ADC_ConfigChannel+0x56>
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000912:	6805      	ldr	r5, [r0, #0]
 8000914:	68ea      	ldr	r2, [r5, #12]
 8000916:	688c      	ldr	r4, [r1, #8]
 8000918:	b29b      	uxth	r3, r3
 800091a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800091e:	3b1e      	subs	r3, #30
 8000920:	fa04 f303 	lsl.w	r3, r4, r3
 8000924:	4313      	orrs	r3, r2
 8000926:	60eb      	str	r3, [r5, #12]
 8000928:	e01b      	b.n	8000962 <HAL_ADC_ConfigChannel+0x8e>
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800092a:	6802      	ldr	r2, [r0, #0]
 800092c:	68d3      	ldr	r3, [r2, #12]
 800092e:	688c      	ldr	r4, [r1, #8]
 8000930:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 8000934:	60d3      	str	r3, [r2, #12]
 8000936:	e014      	b.n	8000962 <HAL_ADC_ConfigChannel+0x8e>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000938:	6805      	ldr	r5, [r0, #0]
 800093a:	692a      	ldr	r2, [r5, #16]
 800093c:	b29b      	uxth	r3, r3
 800093e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000942:	2407      	movs	r4, #7
 8000944:	fa04 f303 	lsl.w	r3, r4, r3
 8000948:	ea22 0303 	bic.w	r3, r2, r3
 800094c:	612b      	str	r3, [r5, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800094e:	6805      	ldr	r5, [r0, #0]
 8000950:	692a      	ldr	r2, [r5, #16]
 8000952:	688c      	ldr	r4, [r1, #8]
 8000954:	880b      	ldrh	r3, [r1, #0]
 8000956:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800095a:	fa04 f303 	lsl.w	r3, r4, r3
 800095e:	4313      	orrs	r3, r2
 8000960:	612b      	str	r3, [r5, #16]
  if (sConfig->Rank < 7)
 8000962:	684b      	ldr	r3, [r1, #4]
 8000964:	2b06      	cmp	r3, #6
 8000966:	d824      	bhi.n	80009b2 <HAL_ADC_ConfigChannel+0xde>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000968:	6805      	ldr	r5, [r0, #0]
 800096a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800096c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000970:	3b05      	subs	r3, #5
 8000972:	241f      	movs	r4, #31
 8000974:	fa04 f303 	lsl.w	r3, r4, r3
 8000978:	ea22 0303 	bic.w	r3, r2, r3
 800097c:	636b      	str	r3, [r5, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800097e:	6805      	ldr	r5, [r0, #0]
 8000980:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000982:	684b      	ldr	r3, [r1, #4]
 8000984:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000988:	3b05      	subs	r3, #5
 800098a:	880c      	ldrh	r4, [r1, #0]
 800098c:	fa04 f303 	lsl.w	r3, r4, r3
 8000990:	4313      	orrs	r3, r2
 8000992:	636b      	str	r3, [r5, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000994:	6802      	ldr	r2, [r0, #0]
 8000996:	4b36      	ldr	r3, [pc, #216]	; (8000a70 <HAL_ADC_ConfigChannel+0x19c>)
 8000998:	429a      	cmp	r2, r3
 800099a:	d03a      	beq.n	8000a12 <HAL_ADC_ConfigChannel+0x13e>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800099c:	6802      	ldr	r2, [r0, #0]
 800099e:	4b34      	ldr	r3, [pc, #208]	; (8000a70 <HAL_ADC_ConfigChannel+0x19c>)
 80009a0:	429a      	cmp	r2, r3
 80009a2:	d03f      	beq.n	8000a24 <HAL_ADC_ConfigChannel+0x150>
  __HAL_UNLOCK(hadc);
 80009a4:	2300      	movs	r3, #0
 80009a6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80009aa:	4618      	mov	r0, r3
}
 80009ac:	b002      	add	sp, #8
 80009ae:	bc30      	pop	{r4, r5}
 80009b0:	4770      	bx	lr
  else if (sConfig->Rank < 13)
 80009b2:	2b0c      	cmp	r3, #12
 80009b4:	d816      	bhi.n	80009e4 <HAL_ADC_ConfigChannel+0x110>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80009b6:	6805      	ldr	r5, [r0, #0]
 80009b8:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80009ba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80009be:	3b23      	subs	r3, #35	; 0x23
 80009c0:	241f      	movs	r4, #31
 80009c2:	fa04 f303 	lsl.w	r3, r4, r3
 80009c6:	ea22 0303 	bic.w	r3, r2, r3
 80009ca:	632b      	str	r3, [r5, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80009cc:	6805      	ldr	r5, [r0, #0]
 80009ce:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80009d0:	684b      	ldr	r3, [r1, #4]
 80009d2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80009d6:	3b23      	subs	r3, #35	; 0x23
 80009d8:	880c      	ldrh	r4, [r1, #0]
 80009da:	fa04 f303 	lsl.w	r3, r4, r3
 80009de:	4313      	orrs	r3, r2
 80009e0:	632b      	str	r3, [r5, #48]	; 0x30
 80009e2:	e7d7      	b.n	8000994 <HAL_ADC_ConfigChannel+0xc0>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80009e4:	6805      	ldr	r5, [r0, #0]
 80009e6:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80009e8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80009ec:	3b41      	subs	r3, #65	; 0x41
 80009ee:	241f      	movs	r4, #31
 80009f0:	fa04 f303 	lsl.w	r3, r4, r3
 80009f4:	ea22 0303 	bic.w	r3, r2, r3
 80009f8:	62eb      	str	r3, [r5, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80009fa:	6805      	ldr	r5, [r0, #0]
 80009fc:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80009fe:	684b      	ldr	r3, [r1, #4]
 8000a00:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000a04:	3b41      	subs	r3, #65	; 0x41
 8000a06:	880c      	ldrh	r4, [r1, #0]
 8000a08:	fa04 f303 	lsl.w	r3, r4, r3
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	62eb      	str	r3, [r5, #44]	; 0x2c
 8000a10:	e7c0      	b.n	8000994 <HAL_ADC_ConfigChannel+0xc0>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000a12:	680b      	ldr	r3, [r1, #0]
 8000a14:	2b12      	cmp	r3, #18
 8000a16:	d1c1      	bne.n	800099c <HAL_ADC_ConfigChannel+0xc8>
    ADC->CCR |= ADC_CCR_VBATE;
 8000a18:	4a16      	ldr	r2, [pc, #88]	; (8000a74 <HAL_ADC_ConfigChannel+0x1a0>)
 8000a1a:	6853      	ldr	r3, [r2, #4]
 8000a1c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a20:	6053      	str	r3, [r2, #4]
 8000a22:	e7bb      	b.n	800099c <HAL_ADC_ConfigChannel+0xc8>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000a24:	680b      	ldr	r3, [r1, #0]
 8000a26:	4a11      	ldr	r2, [pc, #68]	; (8000a6c <HAL_ADC_ConfigChannel+0x198>)
 8000a28:	2b11      	cmp	r3, #17
 8000a2a:	bf18      	it	ne
 8000a2c:	4293      	cmpne	r3, r2
 8000a2e:	d1b9      	bne.n	80009a4 <HAL_ADC_ConfigChannel+0xd0>
    ADC->CCR |= ADC_CCR_TSVREFE;
 8000a30:	4a10      	ldr	r2, [pc, #64]	; (8000a74 <HAL_ADC_ConfigChannel+0x1a0>)
 8000a32:	6853      	ldr	r3, [r2, #4]
 8000a34:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000a38:	6053      	str	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000a3a:	680a      	ldr	r2, [r1, #0]
 8000a3c:	4b0b      	ldr	r3, [pc, #44]	; (8000a6c <HAL_ADC_ConfigChannel+0x198>)
 8000a3e:	429a      	cmp	r2, r3
 8000a40:	d1b0      	bne.n	80009a4 <HAL_ADC_ConfigChannel+0xd0>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8000a42:	4b0d      	ldr	r3, [pc, #52]	; (8000a78 <HAL_ADC_ConfigChannel+0x1a4>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4a0d      	ldr	r2, [pc, #52]	; (8000a7c <HAL_ADC_ConfigChannel+0x1a8>)
 8000a48:	fba2 2303 	umull	r2, r3, r2, r3
 8000a4c:	0c9b      	lsrs	r3, r3, #18
 8000a4e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000a52:	005a      	lsls	r2, r3, #1
 8000a54:	9201      	str	r2, [sp, #4]
      while(counter != 0)
 8000a56:	e002      	b.n	8000a5e <HAL_ADC_ConfigChannel+0x18a>
        counter--;
 8000a58:	9b01      	ldr	r3, [sp, #4]
 8000a5a:	3b01      	subs	r3, #1
 8000a5c:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8000a5e:	9b01      	ldr	r3, [sp, #4]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d1f9      	bne.n	8000a58 <HAL_ADC_ConfigChannel+0x184>
 8000a64:	e79e      	b.n	80009a4 <HAL_ADC_ConfigChannel+0xd0>
  __HAL_LOCK(hadc);
 8000a66:	2002      	movs	r0, #2
 8000a68:	e7a0      	b.n	80009ac <HAL_ADC_ConfigChannel+0xd8>
 8000a6a:	bf00      	nop
 8000a6c:	10000012 	.word	0x10000012
 8000a70:	40012000 	.word	0x40012000
 8000a74:	40012300 	.word	0x40012300
 8000a78:	20000008 	.word	0x20000008
 8000a7c:	431bde83 	.word	0x431bde83

08000a80 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000a80:	4770      	bx	lr
	...

08000a84 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a84:	4906      	ldr	r1, [pc, #24]	; (8000aa0 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8000a86:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a88:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000a8c:	041b      	lsls	r3, r3, #16
 8000a8e:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000a90:	0200      	lsls	r0, r0, #8
 8000a92:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a96:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000a98:	4a02      	ldr	r2, [pc, #8]	; (8000aa4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000a9a:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8000a9c:	60ca      	str	r2, [r1, #12]
 8000a9e:	4770      	bx	lr
 8000aa0:	e000ed00 	.word	0xe000ed00
 8000aa4:	05fa0000 	.word	0x05fa0000

08000aa8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000aa8:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aaa:	4b14      	ldr	r3, [pc, #80]	; (8000afc <HAL_NVIC_SetPriority+0x54>)
 8000aac:	68db      	ldr	r3, [r3, #12]
 8000aae:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ab2:	f1c3 0407 	rsb	r4, r3, #7
 8000ab6:	2c04      	cmp	r4, #4
 8000ab8:	bf28      	it	cs
 8000aba:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000abc:	1d1d      	adds	r5, r3, #4
 8000abe:	2d06      	cmp	r5, #6
 8000ac0:	d913      	bls.n	8000aea <HAL_NVIC_SetPriority+0x42>
 8000ac2:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac4:	2501      	movs	r5, #1
 8000ac6:	fa05 f404 	lsl.w	r4, r5, r4
 8000aca:	3c01      	subs	r4, #1
 8000acc:	4021      	ands	r1, r4
 8000ace:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ad0:	fa05 f303 	lsl.w	r3, r5, r3
 8000ad4:	3b01      	subs	r3, #1
 8000ad6:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad8:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 8000ada:	2800      	cmp	r0, #0
 8000adc:	db07      	blt.n	8000aee <HAL_NVIC_SetPriority+0x46>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ade:	0109      	lsls	r1, r1, #4
 8000ae0:	b2c9      	uxtb	r1, r1
 8000ae2:	4b07      	ldr	r3, [pc, #28]	; (8000b00 <HAL_NVIC_SetPriority+0x58>)
 8000ae4:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000ae6:	bc30      	pop	{r4, r5}
 8000ae8:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aea:	2300      	movs	r3, #0
 8000aec:	e7ea      	b.n	8000ac4 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aee:	f000 000f 	and.w	r0, r0, #15
 8000af2:	0109      	lsls	r1, r1, #4
 8000af4:	b2c9      	uxtb	r1, r1
 8000af6:	4b03      	ldr	r3, [pc, #12]	; (8000b04 <HAL_NVIC_SetPriority+0x5c>)
 8000af8:	5419      	strb	r1, [r3, r0]
 8000afa:	e7f4      	b.n	8000ae6 <HAL_NVIC_SetPriority+0x3e>
 8000afc:	e000ed00 	.word	0xe000ed00
 8000b00:	e000e400 	.word	0xe000e400
 8000b04:	e000ed14 	.word	0xe000ed14

08000b08 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000b08:	0942      	lsrs	r2, r0, #5
 8000b0a:	f000 001f 	and.w	r0, r0, #31
 8000b0e:	2301      	movs	r3, #1
 8000b10:	fa03 f000 	lsl.w	r0, r3, r0
 8000b14:	4b01      	ldr	r3, [pc, #4]	; (8000b1c <HAL_NVIC_EnableIRQ+0x14>)
 8000b16:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000b1a:	4770      	bx	lr
 8000b1c:	e000e100 	.word	0xe000e100

08000b20 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b20:	3801      	subs	r0, #1
 8000b22:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b26:	d20a      	bcs.n	8000b3e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b28:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <HAL_SYSTICK_Config+0x24>)
 8000b2a:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b2c:	21f0      	movs	r1, #240	; 0xf0
 8000b2e:	4a06      	ldr	r2, [pc, #24]	; (8000b48 <HAL_SYSTICK_Config+0x28>)
 8000b30:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b34:	2000      	movs	r0, #0
 8000b36:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b38:	2207      	movs	r2, #7
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000b3e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	e000e010 	.word	0xe000e010
 8000b48:	e000ed00 	.word	0xe000ed00

08000b4c <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000b4c:	2804      	cmp	r0, #4
 8000b4e:	d005      	beq.n	8000b5c <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000b50:	4a05      	ldr	r2, [pc, #20]	; (8000b68 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8000b52:	6813      	ldr	r3, [r2, #0]
 8000b54:	f023 0304 	bic.w	r3, r3, #4
 8000b58:	6013      	str	r3, [r2, #0]
 8000b5a:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000b5c:	4a02      	ldr	r2, [pc, #8]	; (8000b68 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8000b5e:	6813      	ldr	r3, [r2, #0]
 8000b60:	f043 0304 	orr.w	r3, r3, #4
 8000b64:	6013      	str	r3, [r2, #0]
 8000b66:	4770      	bx	lr
 8000b68:	e000e010 	.word	0xe000e010

08000b6c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000b6c:	4770      	bx	lr

08000b6e <HAL_SYSTICK_IRQHandler>:
{
 8000b6e:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000b70:	f7ff fffc 	bl	8000b6c <HAL_SYSTICK_Callback>
 8000b74:	bd08      	pop	{r3, pc}

08000b76 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000b76:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000b78:	6805      	ldr	r5, [r0, #0]
 8000b7a:	682c      	ldr	r4, [r5, #0]
 8000b7c:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8000b80:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000b82:	6804      	ldr	r4, [r0, #0]
 8000b84:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000b86:	6883      	ldr	r3, [r0, #8]
 8000b88:	2b40      	cmp	r3, #64	; 0x40
 8000b8a:	d005      	beq.n	8000b98 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8000b8c:	6803      	ldr	r3, [r0, #0]
 8000b8e:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8000b90:	6803      	ldr	r3, [r0, #0]
 8000b92:	60da      	str	r2, [r3, #12]
  }
}
 8000b94:	bc30      	pop	{r4, r5}
 8000b96:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8000b98:	6803      	ldr	r3, [r0, #0]
 8000b9a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8000b9c:	6803      	ldr	r3, [r0, #0]
 8000b9e:	60d9      	str	r1, [r3, #12]
 8000ba0:	e7f8      	b.n	8000b94 <DMA_SetConfig+0x1e>
	...

08000ba4 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000ba4:	6802      	ldr	r2, [r0, #0]
 8000ba6:	b2d3      	uxtb	r3, r2
 8000ba8:	3b10      	subs	r3, #16
 8000baa:	4909      	ldr	r1, [pc, #36]	; (8000bd0 <DMA_CalcBaseAndBitshift+0x2c>)
 8000bac:	fba1 1303 	umull	r1, r3, r1, r3
 8000bb0:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000bb2:	4908      	ldr	r1, [pc, #32]	; (8000bd4 <DMA_CalcBaseAndBitshift+0x30>)
 8000bb4:	5cc9      	ldrb	r1, [r1, r3]
 8000bb6:	65c1      	str	r1, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000bb8:	2b03      	cmp	r3, #3
 8000bba:	d804      	bhi.n	8000bc6 <DMA_CalcBaseAndBitshift+0x22>
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000bbc:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <DMA_CalcBaseAndBitshift+0x34>)
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	6583      	str	r3, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 8000bc2:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8000bc4:	4770      	bx	lr
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000bc6:	4b04      	ldr	r3, [pc, #16]	; (8000bd8 <DMA_CalcBaseAndBitshift+0x34>)
 8000bc8:	4013      	ands	r3, r2
 8000bca:	3304      	adds	r3, #4
 8000bcc:	6583      	str	r3, [r0, #88]	; 0x58
 8000bce:	e7f8      	b.n	8000bc2 <DMA_CalcBaseAndBitshift+0x1e>
 8000bd0:	aaaaaaab 	.word	0xaaaaaaab
 8000bd4:	0800358c 	.word	0x0800358c
 8000bd8:	fffffc00 	.word	0xfffffc00

08000bdc <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000bdc:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000bde:	6982      	ldr	r2, [r0, #24]
 8000be0:	b992      	cbnz	r2, 8000c08 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	d00a      	beq.n	8000bfc <DMA_CheckFifoParam+0x20>
 8000be6:	b11b      	cbz	r3, 8000bf0 <DMA_CheckFifoParam+0x14>
 8000be8:	2b02      	cmp	r3, #2
 8000bea:	d001      	beq.n	8000bf0 <DMA_CheckFifoParam+0x14>
  HAL_StatusTypeDef status = HAL_OK;
 8000bec:	2000      	movs	r0, #0
 8000bee:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000bf0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000bf2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8000bf6:	d12c      	bne.n	8000c52 <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 8000bf8:	2000      	movs	r0, #0
 8000bfa:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000bfc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000bfe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000c02:	d028      	beq.n	8000c56 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8000c04:	2000      	movs	r0, #0
 8000c06:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000c08:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000c0c:	d005      	beq.n	8000c1a <DMA_CheckFifoParam+0x3e>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000c0e:	2b02      	cmp	r3, #2
 8000c10:	d929      	bls.n	8000c66 <DMA_CheckFifoParam+0x8a>
 8000c12:	2b03      	cmp	r3, #3
 8000c14:	d015      	beq.n	8000c42 <DMA_CheckFifoParam+0x66>
  HAL_StatusTypeDef status = HAL_OK;
 8000c16:	2000      	movs	r0, #0
 8000c18:	4770      	bx	lr
    switch (tmp)
 8000c1a:	2b03      	cmp	r3, #3
 8000c1c:	d803      	bhi.n	8000c26 <DMA_CheckFifoParam+0x4a>
 8000c1e:	e8df f003 	tbb	[pc, r3]
 8000c22:	041c      	.short	0x041c
 8000c24:	0a1c      	.short	0x0a1c
  HAL_StatusTypeDef status = HAL_OK;
 8000c26:	2000      	movs	r0, #0
 8000c28:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000c2a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000c2c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8000c30:	d115      	bne.n	8000c5e <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 8000c32:	2000      	movs	r0, #0
 8000c34:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000c36:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000c38:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000c3c:	d011      	beq.n	8000c62 <DMA_CheckFifoParam+0x86>
  HAL_StatusTypeDef status = HAL_OK;
 8000c3e:	2000      	movs	r0, #0
 8000c40:	4770      	bx	lr
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000c42:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000c44:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8000c48:	d001      	beq.n	8000c4e <DMA_CheckFifoParam+0x72>
      {
        status = HAL_ERROR;
 8000c4a:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8000c4c:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 8000c4e:	2000      	movs	r0, #0
 8000c50:	4770      	bx	lr
        status = HAL_ERROR;
 8000c52:	2001      	movs	r0, #1
 8000c54:	4770      	bx	lr
        status = HAL_ERROR;
 8000c56:	2001      	movs	r0, #1
 8000c58:	4770      	bx	lr
      status = HAL_ERROR;
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	4770      	bx	lr
        status = HAL_ERROR;
 8000c5e:	2001      	movs	r0, #1
 8000c60:	4770      	bx	lr
        status = HAL_ERROR;
 8000c62:	2001      	movs	r0, #1
 8000c64:	4770      	bx	lr
      status = HAL_ERROR;
 8000c66:	2001      	movs	r0, #1
 8000c68:	4770      	bx	lr
	...

08000c6c <HAL_DMA_Init>:
{
 8000c6c:	b570      	push	{r4, r5, r6, lr}
 8000c6e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000c70:	f7ff fc9c 	bl	80005ac <HAL_GetTick>
  if(hdma == NULL)
 8000c74:	2c00      	cmp	r4, #0
 8000c76:	d05d      	beq.n	8000d34 <HAL_DMA_Init+0xc8>
 8000c78:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8000c80:	2302      	movs	r3, #2
 8000c82:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8000c86:	6822      	ldr	r2, [r4, #0]
 8000c88:	6813      	ldr	r3, [r2, #0]
 8000c8a:	f023 0301 	bic.w	r3, r3, #1
 8000c8e:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000c90:	6823      	ldr	r3, [r4, #0]
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	f012 0f01 	tst.w	r2, #1
 8000c98:	d00a      	beq.n	8000cb0 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000c9a:	f7ff fc87 	bl	80005ac <HAL_GetTick>
 8000c9e:	1b40      	subs	r0, r0, r5
 8000ca0:	2805      	cmp	r0, #5
 8000ca2:	d9f5      	bls.n	8000c90 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000ca4:	2320      	movs	r3, #32
 8000ca6:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000ca8:	2003      	movs	r0, #3
 8000caa:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
      return HAL_TIMEOUT;
 8000cae:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8000cb0:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000cb2:	4921      	ldr	r1, [pc, #132]	; (8000d38 <HAL_DMA_Init+0xcc>)
 8000cb4:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000cb6:	6862      	ldr	r2, [r4, #4]
 8000cb8:	68a0      	ldr	r0, [r4, #8]
 8000cba:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cbc:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000cbe:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cc0:	6920      	ldr	r0, [r4, #16]
 8000cc2:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cc4:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cc6:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cc8:	69a0      	ldr	r0, [r4, #24]
 8000cca:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ccc:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cce:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8000cd0:	6a20      	ldr	r0, [r4, #32]
 8000cd2:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000cd4:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000cd6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000cd8:	2904      	cmp	r1, #4
 8000cda:	d016      	beq.n	8000d0a <HAL_DMA_Init+0x9e>
  hdma->Instance->CR = tmp;  
 8000cdc:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8000cde:	6826      	ldr	r6, [r4, #0]
 8000ce0:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000ce2:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8000ce6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000ce8:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000cea:	2b04      	cmp	r3, #4
 8000cec:	d012      	beq.n	8000d14 <HAL_DMA_Init+0xa8>
  hdma->Instance->FCR = tmp;
 8000cee:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000cf0:	4620      	mov	r0, r4
 8000cf2:	f7ff ff57 	bl	8000ba4 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000cf6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000cf8:	233f      	movs	r3, #63	; 0x3f
 8000cfa:	4093      	lsls	r3, r2
 8000cfc:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000cfe:	2000      	movs	r0, #0
 8000d00:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8000d02:	2301      	movs	r3, #1
 8000d04:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8000d08:	bd70      	pop	{r4, r5, r6, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000d0a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000d0c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8000d0e:	4301      	orrs	r1, r0
 8000d10:	430a      	orrs	r2, r1
 8000d12:	e7e3      	b.n	8000cdc <HAL_DMA_Init+0x70>
    tmp |= hdma->Init.FIFOThreshold;
 8000d14:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000d16:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000d18:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d0e7      	beq.n	8000cee <HAL_DMA_Init+0x82>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000d1e:	4620      	mov	r0, r4
 8000d20:	f7ff ff5c 	bl	8000bdc <DMA_CheckFifoParam>
 8000d24:	2800      	cmp	r0, #0
 8000d26:	d0e2      	beq.n	8000cee <HAL_DMA_Init+0x82>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000d28:	2340      	movs	r3, #64	; 0x40
 8000d2a:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8000d2c:	2001      	movs	r0, #1
 8000d2e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8000d32:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8000d34:	2001      	movs	r0, #1
}
 8000d36:	bd70      	pop	{r4, r5, r6, pc}
 8000d38:	e010803f 	.word	0xe010803f

08000d3c <HAL_DMA_Start_IT>:
{
 8000d3c:	b538      	push	{r3, r4, r5, lr}
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000d3e:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8000d40:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8000d44:	2c01      	cmp	r4, #1
 8000d46:	d031      	beq.n	8000dac <HAL_DMA_Start_IT+0x70>
 8000d48:	2401      	movs	r4, #1
 8000d4a:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8000d4e:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8000d52:	b2e4      	uxtb	r4, r4
 8000d54:	2c01      	cmp	r4, #1
 8000d56:	d004      	beq.n	8000d62 <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);	  
 8000d58:	2300      	movs	r3, #0
 8000d5a:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    status = HAL_BUSY;
 8000d5e:	2002      	movs	r0, #2
 8000d60:	bd38      	pop	{r3, r4, r5, pc}
 8000d62:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 8000d64:	2002      	movs	r0, #2
 8000d66:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d6a:	2000      	movs	r0, #0
 8000d6c:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000d6e:	4620      	mov	r0, r4
 8000d70:	f7ff ff01 	bl	8000b76 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000d74:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000d76:	233f      	movs	r3, #63	; 0x3f
 8000d78:	4093      	lsls	r3, r2
 8000d7a:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000d7c:	6822      	ldr	r2, [r4, #0]
 8000d7e:	6813      	ldr	r3, [r2, #0]
 8000d80:	f043 0316 	orr.w	r3, r3, #22
 8000d84:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8000d86:	6822      	ldr	r2, [r4, #0]
 8000d88:	6953      	ldr	r3, [r2, #20]
 8000d8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d8e:	6153      	str	r3, [r2, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8000d90:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000d92:	b123      	cbz	r3, 8000d9e <HAL_DMA_Start_IT+0x62>
      hdma->Instance->CR  |= DMA_IT_HT;
 8000d94:	6822      	ldr	r2, [r4, #0]
 8000d96:	6813      	ldr	r3, [r2, #0]
 8000d98:	f043 0308 	orr.w	r3, r3, #8
 8000d9c:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8000d9e:	6822      	ldr	r2, [r4, #0]
 8000da0:	6813      	ldr	r3, [r2, #0]
 8000da2:	f043 0301 	orr.w	r3, r3, #1
 8000da6:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000da8:	2000      	movs	r0, #0
 8000daa:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hdma);
 8000dac:	2002      	movs	r0, #2
}
 8000dae:	bd38      	pop	{r3, r4, r5, pc}

08000db0 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000db0:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	2b02      	cmp	r3, #2
 8000db8:	d003      	beq.n	8000dc2 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dba:	2380      	movs	r3, #128	; 0x80
 8000dbc:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8000dc2:	2305      	movs	r3, #5
 8000dc4:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8000dc8:	6802      	ldr	r2, [r0, #0]
 8000dca:	6813      	ldr	r3, [r2, #0]
 8000dcc:	f023 0301 	bic.w	r3, r3, #1
 8000dd0:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8000dd2:	2000      	movs	r0, #0
}
 8000dd4:	4770      	bx	lr
	...

08000dd8 <HAL_DMA_IRQHandler>:
{
 8000dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	4604      	mov	r4, r0
  __IO uint32_t count = 0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600;
 8000de2:	4b72      	ldr	r3, [pc, #456]	; (8000fac <HAL_DMA_IRQHandler+0x1d4>)
 8000de4:	681d      	ldr	r5, [r3, #0]
 8000de6:	4b72      	ldr	r3, [pc, #456]	; (8000fb0 <HAL_DMA_IRQHandler+0x1d8>)
 8000de8:	fba3 3505 	umull	r3, r5, r3, r5
 8000dec:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000dee:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8000df0:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000df2:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8000df4:	2308      	movs	r3, #8
 8000df6:	4093      	lsls	r3, r2
 8000df8:	421e      	tst	r6, r3
 8000dfa:	d010      	beq.n	8000e1e <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000dfc:	6803      	ldr	r3, [r0, #0]
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	f012 0f04 	tst.w	r2, #4
 8000e04:	d00b      	beq.n	8000e1e <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	f022 0204 	bic.w	r2, r2, #4
 8000e0c:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000e0e:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8000e10:	2308      	movs	r3, #8
 8000e12:	4093      	lsls	r3, r2
 8000e14:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000e16:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8000e18:	f043 0301 	orr.w	r3, r3, #1
 8000e1c:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000e1e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000e20:	2301      	movs	r3, #1
 8000e22:	4093      	lsls	r3, r2
 8000e24:	421e      	tst	r6, r3
 8000e26:	d009      	beq.n	8000e3c <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000e28:	6822      	ldr	r2, [r4, #0]
 8000e2a:	6952      	ldr	r2, [r2, #20]
 8000e2c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8000e30:	d004      	beq.n	8000e3c <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000e32:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000e34:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000e36:	f043 0302 	orr.w	r3, r3, #2
 8000e3a:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000e3c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000e3e:	2304      	movs	r3, #4
 8000e40:	4093      	lsls	r3, r2
 8000e42:	421e      	tst	r6, r3
 8000e44:	d009      	beq.n	8000e5a <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000e46:	6822      	ldr	r2, [r4, #0]
 8000e48:	6812      	ldr	r2, [r2, #0]
 8000e4a:	f012 0f02 	tst.w	r2, #2
 8000e4e:	d004      	beq.n	8000e5a <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000e50:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000e52:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000e54:	f043 0304 	orr.w	r3, r3, #4
 8000e58:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000e5a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000e5c:	2310      	movs	r3, #16
 8000e5e:	4093      	lsls	r3, r2
 8000e60:	421e      	tst	r6, r3
 8000e62:	d024      	beq.n	8000eae <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000e64:	6822      	ldr	r2, [r4, #0]
 8000e66:	6812      	ldr	r2, [r2, #0]
 8000e68:	f012 0f08 	tst.w	r2, #8
 8000e6c:	d01f      	beq.n	8000eae <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000e6e:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000e70:	6823      	ldr	r3, [r4, #0]
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8000e78:	d00d      	beq.n	8000e96 <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8000e80:	d104      	bne.n	8000e8c <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8000e82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000e84:	b19b      	cbz	r3, 8000eae <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8000e86:	4620      	mov	r0, r4
 8000e88:	4798      	blx	r3
 8000e8a:	e010      	b.n	8000eae <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000e8c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000e8e:	b173      	cbz	r3, 8000eae <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8000e90:	4620      	mov	r0, r4
 8000e92:	4798      	blx	r3
 8000e94:	e00b      	b.n	8000eae <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	f412 7f80 	tst.w	r2, #256	; 0x100
 8000e9c:	d103      	bne.n	8000ea6 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	f022 0208 	bic.w	r2, r2, #8
 8000ea4:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8000ea6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000ea8:	b10b      	cbz	r3, 8000eae <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8000eaa:	4620      	mov	r0, r4
 8000eac:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000eae:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000eb0:	2320      	movs	r3, #32
 8000eb2:	4093      	lsls	r3, r2
 8000eb4:	421e      	tst	r6, r3
 8000eb6:	d055      	beq.n	8000f64 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000eb8:	6822      	ldr	r2, [r4, #0]
 8000eba:	6812      	ldr	r2, [r2, #0]
 8000ebc:	f012 0f10 	tst.w	r2, #16
 8000ec0:	d050      	beq.n	8000f64 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000ec2:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000ec4:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	2b05      	cmp	r3, #5
 8000ecc:	d00e      	beq.n	8000eec <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000ece:	6823      	ldr	r3, [r4, #0]
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8000ed6:	d033      	beq.n	8000f40 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8000ede:	d12a      	bne.n	8000f36 <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8000ee0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d03e      	beq.n	8000f64 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 8000ee6:	4620      	mov	r0, r4
 8000ee8:	4798      	blx	r3
 8000eea:	e03b      	b.n	8000f64 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000eec:	6822      	ldr	r2, [r4, #0]
 8000eee:	6813      	ldr	r3, [r2, #0]
 8000ef0:	f023 0316 	bic.w	r3, r3, #22
 8000ef4:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000ef6:	6822      	ldr	r2, [r4, #0]
 8000ef8:	6953      	ldr	r3, [r2, #20]
 8000efa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000efe:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f00:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f02:	b1a3      	cbz	r3, 8000f2e <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f04:	6822      	ldr	r2, [r4, #0]
 8000f06:	6813      	ldr	r3, [r2, #0]
 8000f08:	f023 0308 	bic.w	r3, r3, #8
 8000f0c:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f0e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000f10:	233f      	movs	r3, #63	; 0x3f
 8000f12:	4093      	lsls	r3, r2
 8000f14:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 8000f16:	2300      	movs	r3, #0
 8000f18:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8000f22:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d03f      	beq.n	8000fa8 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8000f28:	4620      	mov	r0, r4
 8000f2a:	4798      	blx	r3
 8000f2c:	e03c      	b.n	8000fa8 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f2e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d1e7      	bne.n	8000f04 <HAL_DMA_IRQHandler+0x12c>
 8000f34:	e7eb      	b.n	8000f0e <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8000f36:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000f38:	b1a3      	cbz	r3, 8000f64 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 8000f3a:	4620      	mov	r0, r4
 8000f3c:	4798      	blx	r3
 8000f3e:	e011      	b.n	8000f64 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	f412 7f80 	tst.w	r2, #256	; 0x100
 8000f46:	d109      	bne.n	8000f5c <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	f022 0210 	bic.w	r2, r2, #16
 8000f4e:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 8000f50:	2300      	movs	r3, #0
 8000f52:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8000f56:	2301      	movs	r3, #1
 8000f58:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8000f5c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000f5e:	b10b      	cbz	r3, 8000f64 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8000f60:	4620      	mov	r0, r4
 8000f62:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000f64:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000f66:	b1fb      	cbz	r3, 8000fa8 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000f68:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000f6a:	f013 0f01 	tst.w	r3, #1
 8000f6e:	d017      	beq.n	8000fa0 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8000f70:	2305      	movs	r3, #5
 8000f72:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8000f76:	6822      	ldr	r2, [r4, #0]
 8000f78:	6813      	ldr	r3, [r2, #0]
 8000f7a:	f023 0301 	bic.w	r3, r3, #1
 8000f7e:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8000f80:	9b01      	ldr	r3, [sp, #4]
 8000f82:	3301      	adds	r3, #1
 8000f84:	9301      	str	r3, [sp, #4]
 8000f86:	429d      	cmp	r5, r3
 8000f88:	d304      	bcc.n	8000f94 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000f8a:	6823      	ldr	r3, [r4, #0]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f013 0f01 	tst.w	r3, #1
 8000f92:	d1f5      	bne.n	8000f80 <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 8000f94:	2300      	movs	r3, #0
 8000f96:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8000fa0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000fa2:	b10b      	cbz	r3, 8000fa8 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8000fa4:	4620      	mov	r0, r4
 8000fa6:	4798      	blx	r3
}
 8000fa8:	b003      	add	sp, #12
 8000faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fac:	20000008 	.word	0x20000008
 8000fb0:	1b4e81b5 	.word	0x1b4e81b5

08000fb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fb6:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000fb8:	2400      	movs	r4, #0
 8000fba:	e037      	b.n	800102c <HAL_GPIO_Init+0x78>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000fbc:	2607      	movs	r6, #7
 8000fbe:	e000      	b.n	8000fc2 <HAL_GPIO_Init+0xe>
 8000fc0:	2600      	movs	r6, #0
 8000fc2:	fa06 f60e 	lsl.w	r6, r6, lr
 8000fc6:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 8000fc8:	3302      	adds	r3, #2
 8000fca:	4e66      	ldr	r6, [pc, #408]	; (8001164 <HAL_GPIO_Init+0x1b0>)
 8000fcc:	f846 2023 	str.w	r2, [r6, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fd0:	4b65      	ldr	r3, [pc, #404]	; (8001168 <HAL_GPIO_Init+0x1b4>)
 8000fd2:	681a      	ldr	r2, [r3, #0]
        temp &= ~((uint32_t)iocurrent);
 8000fd4:	43eb      	mvns	r3, r5
 8000fd6:	ea02 0603 	and.w	r6, r2, r3
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fda:	684f      	ldr	r7, [r1, #4]
 8000fdc:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8000fe0:	d001      	beq.n	8000fe6 <HAL_GPIO_Init+0x32>
        {
          temp |= iocurrent;
 8000fe2:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->IMR = temp;
 8000fe6:	4a60      	ldr	r2, [pc, #384]	; (8001168 <HAL_GPIO_Init+0x1b4>)
 8000fe8:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8000fea:	6852      	ldr	r2, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8000fec:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ff0:	684f      	ldr	r7, [r1, #4]
 8000ff2:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8000ff6:	d001      	beq.n	8000ffc <HAL_GPIO_Init+0x48>
        {
          temp |= iocurrent;
 8000ff8:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->EMR = temp;
 8000ffc:	4a5a      	ldr	r2, [pc, #360]	; (8001168 <HAL_GPIO_Init+0x1b4>)
 8000ffe:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001000:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001002:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001006:	684f      	ldr	r7, [r1, #4]
 8001008:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 800100c:	d001      	beq.n	8001012 <HAL_GPIO_Init+0x5e>
        {
          temp |= iocurrent;
 800100e:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->RTSR = temp;
 8001012:	4a55      	ldr	r2, [pc, #340]	; (8001168 <HAL_GPIO_Init+0x1b4>)
 8001014:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8001016:	68d2      	ldr	r2, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8001018:	4013      	ands	r3, r2
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800101a:	684e      	ldr	r6, [r1, #4]
 800101c:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8001020:	d001      	beq.n	8001026 <HAL_GPIO_Init+0x72>
        {
          temp |= iocurrent;
 8001022:	ea45 0302 	orr.w	r3, r5, r2
        }
        EXTI->FTSR = temp;
 8001026:	4a50      	ldr	r2, [pc, #320]	; (8001168 <HAL_GPIO_Init+0x1b4>)
 8001028:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800102a:	3401      	adds	r4, #1
 800102c:	2c0f      	cmp	r4, #15
 800102e:	f200 8097 	bhi.w	8001160 <HAL_GPIO_Init+0x1ac>
    ioposition = ((uint32_t)0x01) << position;
 8001032:	2301      	movs	r3, #1
 8001034:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001036:	680a      	ldr	r2, [r1, #0]
 8001038:	ea03 0502 	and.w	r5, r3, r2
    if(iocurrent == ioposition)
 800103c:	42ab      	cmp	r3, r5
 800103e:	d1f4      	bne.n	800102a <HAL_GPIO_Init+0x76>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001040:	684a      	ldr	r2, [r1, #4]
 8001042:	2a12      	cmp	r2, #18
 8001044:	bf18      	it	ne
 8001046:	2a02      	cmpne	r2, #2
 8001048:	d112      	bne.n	8001070 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3];
 800104a:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
 800104e:	f10e 0e08 	add.w	lr, lr, #8
 8001052:	f850 202e 	ldr.w	r2, [r0, lr, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001056:	f004 0607 	and.w	r6, r4, #7
 800105a:	00b6      	lsls	r6, r6, #2
 800105c:	270f      	movs	r7, #15
 800105e:	40b7      	lsls	r7, r6
 8001060:	ea22 0207 	bic.w	r2, r2, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001064:	690f      	ldr	r7, [r1, #16]
 8001066:	fa07 f606 	lsl.w	r6, r7, r6
 800106a:	4332      	orrs	r2, r6
        GPIOx->AFR[position >> 3] = temp;
 800106c:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
      temp = GPIOx->MODER;
 8001070:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001072:	ea4f 0e44 	mov.w	lr, r4, lsl #1
 8001076:	2203      	movs	r2, #3
 8001078:	fa02 f20e 	lsl.w	r2, r2, lr
 800107c:	43d2      	mvns	r2, r2
 800107e:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001080:	684f      	ldr	r7, [r1, #4]
 8001082:	f007 0703 	and.w	r7, r7, #3
 8001086:	fa07 f70e 	lsl.w	r7, r7, lr
 800108a:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 800108c:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800108e:	684e      	ldr	r6, [r1, #4]
 8001090:	1e77      	subs	r7, r6, #1
 8001092:	2e11      	cmp	r6, #17
 8001094:	bf18      	it	ne
 8001096:	2f01      	cmpne	r7, #1
 8001098:	d901      	bls.n	800109e <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800109a:	2e12      	cmp	r6, #18
 800109c:	d10f      	bne.n	80010be <HAL_GPIO_Init+0x10a>
        temp = GPIOx->OSPEEDR; 
 800109e:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80010a0:	4016      	ands	r6, r2
        temp |= (GPIO_Init->Speed << (position * 2));
 80010a2:	68cf      	ldr	r7, [r1, #12]
 80010a4:	fa07 f70e 	lsl.w	r7, r7, lr
 80010a8:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 80010aa:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80010ac:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010ae:	ea26 0303 	bic.w	r3, r6, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80010b2:	684e      	ldr	r6, [r1, #4]
 80010b4:	f3c6 1600 	ubfx	r6, r6, #4, #1
 80010b8:	40a6      	lsls	r6, r4
 80010ba:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 80010bc:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 80010be:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80010c0:	401a      	ands	r2, r3
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80010c2:	688b      	ldr	r3, [r1, #8]
 80010c4:	fa03 f30e 	lsl.w	r3, r3, lr
 80010c8:	431a      	orrs	r2, r3
      GPIOx->PUPDR = temp;
 80010ca:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010cc:	684b      	ldr	r3, [r1, #4]
 80010ce:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80010d2:	d0aa      	beq.n	800102a <HAL_GPIO_Init+0x76>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d4:	4b25      	ldr	r3, [pc, #148]	; (800116c <HAL_GPIO_Init+0x1b8>)
 80010d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80010d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80010dc:	645a      	str	r2, [r3, #68]	; 0x44
 80010de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010e4:	9301      	str	r3, [sp, #4]
 80010e6:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 80010e8:	08a3      	lsrs	r3, r4, #2
 80010ea:	1c9e      	adds	r6, r3, #2
 80010ec:	4a1d      	ldr	r2, [pc, #116]	; (8001164 <HAL_GPIO_Init+0x1b0>)
 80010ee:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80010f2:	f004 0603 	and.w	r6, r4, #3
 80010f6:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 80010fa:	260f      	movs	r6, #15
 80010fc:	fa06 f60e 	lsl.w	r6, r6, lr
 8001100:	ea22 0206 	bic.w	r2, r2, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001104:	4f1a      	ldr	r7, [pc, #104]	; (8001170 <HAL_GPIO_Init+0x1bc>)
 8001106:	42b8      	cmp	r0, r7
 8001108:	f43f af5a 	beq.w	8000fc0 <HAL_GPIO_Init+0xc>
 800110c:	4e19      	ldr	r6, [pc, #100]	; (8001174 <HAL_GPIO_Init+0x1c0>)
 800110e:	42b0      	cmp	r0, r6
 8001110:	d01a      	beq.n	8001148 <HAL_GPIO_Init+0x194>
 8001112:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001116:	42b0      	cmp	r0, r6
 8001118:	d018      	beq.n	800114c <HAL_GPIO_Init+0x198>
 800111a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800111e:	42b0      	cmp	r0, r6
 8001120:	d016      	beq.n	8001150 <HAL_GPIO_Init+0x19c>
 8001122:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001126:	42b0      	cmp	r0, r6
 8001128:	d014      	beq.n	8001154 <HAL_GPIO_Init+0x1a0>
 800112a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800112e:	42b0      	cmp	r0, r6
 8001130:	d012      	beq.n	8001158 <HAL_GPIO_Init+0x1a4>
 8001132:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001136:	42b0      	cmp	r0, r6
 8001138:	d010      	beq.n	800115c <HAL_GPIO_Init+0x1a8>
 800113a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800113e:	42b0      	cmp	r0, r6
 8001140:	f43f af3c 	beq.w	8000fbc <HAL_GPIO_Init+0x8>
 8001144:	2608      	movs	r6, #8
 8001146:	e73c      	b.n	8000fc2 <HAL_GPIO_Init+0xe>
 8001148:	2601      	movs	r6, #1
 800114a:	e73a      	b.n	8000fc2 <HAL_GPIO_Init+0xe>
 800114c:	2602      	movs	r6, #2
 800114e:	e738      	b.n	8000fc2 <HAL_GPIO_Init+0xe>
 8001150:	2603      	movs	r6, #3
 8001152:	e736      	b.n	8000fc2 <HAL_GPIO_Init+0xe>
 8001154:	2604      	movs	r6, #4
 8001156:	e734      	b.n	8000fc2 <HAL_GPIO_Init+0xe>
 8001158:	2605      	movs	r6, #5
 800115a:	e732      	b.n	8000fc2 <HAL_GPIO_Init+0xe>
 800115c:	2606      	movs	r6, #6
 800115e:	e730      	b.n	8000fc2 <HAL_GPIO_Init+0xe>
      }
    }
  }
}
 8001160:	b003      	add	sp, #12
 8001162:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001164:	40013800 	.word	0x40013800
 8001168:	40013c00 	.word	0x40013c00
 800116c:	40023800 	.word	0x40023800
 8001170:	40020000 	.word	0x40020000
 8001174:	40020400 	.word	0x40020400

08001178 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001178:	2800      	cmp	r0, #0
 800117a:	f000 81db 	beq.w	8001534 <HAL_RCC_OscConfig+0x3bc>
{
 800117e:	b570      	push	{r4, r5, r6, lr}
 8001180:	b082      	sub	sp, #8
 8001182:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001184:	6803      	ldr	r3, [r0, #0]
 8001186:	f013 0f01 	tst.w	r3, #1
 800118a:	d03a      	beq.n	8001202 <HAL_RCC_OscConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800118c:	4ba2      	ldr	r3, [pc, #648]	; (8001418 <HAL_RCC_OscConfig+0x2a0>)
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	f003 030c 	and.w	r3, r3, #12
 8001194:	2b04      	cmp	r3, #4
 8001196:	d02b      	beq.n	80011f0 <HAL_RCC_OscConfig+0x78>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001198:	4b9f      	ldr	r3, [pc, #636]	; (8001418 <HAL_RCC_OscConfig+0x2a0>)
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	f003 030c 	and.w	r3, r3, #12
 80011a0:	2b08      	cmp	r3, #8
 80011a2:	d020      	beq.n	80011e6 <HAL_RCC_OscConfig+0x6e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011a4:	6863      	ldr	r3, [r4, #4]
 80011a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011aa:	d050      	beq.n	800124e <HAL_RCC_OscConfig+0xd6>
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d154      	bne.n	800125a <HAL_RCC_OscConfig+0xe2>
 80011b0:	4b99      	ldr	r3, [pc, #612]	; (8001418 <HAL_RCC_OscConfig+0x2a0>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80011c0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011c2:	6863      	ldr	r3, [r4, #4]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d05f      	beq.n	8001288 <HAL_RCC_OscConfig+0x110>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011c8:	f7ff f9f0 	bl	80005ac <HAL_GetTick>
 80011cc:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ce:	4b92      	ldr	r3, [pc, #584]	; (8001418 <HAL_RCC_OscConfig+0x2a0>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80011d6:	d114      	bne.n	8001202 <HAL_RCC_OscConfig+0x8a>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011d8:	f7ff f9e8 	bl	80005ac <HAL_GetTick>
 80011dc:	1b40      	subs	r0, r0, r5
 80011de:	2864      	cmp	r0, #100	; 0x64
 80011e0:	d9f5      	bls.n	80011ce <HAL_RCC_OscConfig+0x56>
          {
            return HAL_TIMEOUT;
 80011e2:	2003      	movs	r0, #3
 80011e4:	e1ab      	b.n	800153e <HAL_RCC_OscConfig+0x3c6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011e6:	4b8c      	ldr	r3, [pc, #560]	; (8001418 <HAL_RCC_OscConfig+0x2a0>)
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80011ee:	d0d9      	beq.n	80011a4 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011f0:	4b89      	ldr	r3, [pc, #548]	; (8001418 <HAL_RCC_OscConfig+0x2a0>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80011f8:	d003      	beq.n	8001202 <HAL_RCC_OscConfig+0x8a>
 80011fa:	6863      	ldr	r3, [r4, #4]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	f000 819b 	beq.w	8001538 <HAL_RCC_OscConfig+0x3c0>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001202:	6823      	ldr	r3, [r4, #0]
 8001204:	f013 0f02 	tst.w	r3, #2
 8001208:	d064      	beq.n	80012d4 <HAL_RCC_OscConfig+0x15c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800120a:	4b83      	ldr	r3, [pc, #524]	; (8001418 <HAL_RCC_OscConfig+0x2a0>)
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	f013 0f0c 	tst.w	r3, #12
 8001212:	d04d      	beq.n	80012b0 <HAL_RCC_OscConfig+0x138>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001214:	4b80      	ldr	r3, [pc, #512]	; (8001418 <HAL_RCC_OscConfig+0x2a0>)
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	f003 030c 	and.w	r3, r3, #12
 800121c:	2b08      	cmp	r3, #8
 800121e:	d042      	beq.n	80012a6 <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001220:	68e3      	ldr	r3, [r4, #12]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d079      	beq.n	800131a <HAL_RCC_OscConfig+0x1a2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001226:	4a7c      	ldr	r2, [pc, #496]	; (8001418 <HAL_RCC_OscConfig+0x2a0>)
 8001228:	6813      	ldr	r3, [r2, #0]
 800122a:	f043 0301 	orr.w	r3, r3, #1
 800122e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001230:	f7ff f9bc 	bl	80005ac <HAL_GetTick>
 8001234:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001236:	4b78      	ldr	r3, [pc, #480]	; (8001418 <HAL_RCC_OscConfig+0x2a0>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f013 0f02 	tst.w	r3, #2
 800123e:	d163      	bne.n	8001308 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001240:	f7ff f9b4 	bl	80005ac <HAL_GetTick>
 8001244:	1b40      	subs	r0, r0, r5
 8001246:	2802      	cmp	r0, #2
 8001248:	d9f5      	bls.n	8001236 <HAL_RCC_OscConfig+0xbe>
          {
            return HAL_TIMEOUT;
 800124a:	2003      	movs	r0, #3
 800124c:	e177      	b.n	800153e <HAL_RCC_OscConfig+0x3c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800124e:	4a72      	ldr	r2, [pc, #456]	; (8001418 <HAL_RCC_OscConfig+0x2a0>)
 8001250:	6813      	ldr	r3, [r2, #0]
 8001252:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001256:	6013      	str	r3, [r2, #0]
 8001258:	e7b3      	b.n	80011c2 <HAL_RCC_OscConfig+0x4a>
 800125a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800125e:	d009      	beq.n	8001274 <HAL_RCC_OscConfig+0xfc>
 8001260:	4b6d      	ldr	r3, [pc, #436]	; (8001418 <HAL_RCC_OscConfig+0x2a0>)
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	e7a6      	b.n	80011c2 <HAL_RCC_OscConfig+0x4a>
 8001274:	4b68      	ldr	r3, [pc, #416]	; (8001418 <HAL_RCC_OscConfig+0x2a0>)
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	e79c      	b.n	80011c2 <HAL_RCC_OscConfig+0x4a>
        tickstart = HAL_GetTick();
 8001288:	f7ff f990 	bl	80005ac <HAL_GetTick>
 800128c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800128e:	4b62      	ldr	r3, [pc, #392]	; (8001418 <HAL_RCC_OscConfig+0x2a0>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001296:	d0b4      	beq.n	8001202 <HAL_RCC_OscConfig+0x8a>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001298:	f7ff f988 	bl	80005ac <HAL_GetTick>
 800129c:	1b40      	subs	r0, r0, r5
 800129e:	2864      	cmp	r0, #100	; 0x64
 80012a0:	d9f5      	bls.n	800128e <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 80012a2:	2003      	movs	r0, #3
 80012a4:	e14b      	b.n	800153e <HAL_RCC_OscConfig+0x3c6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012a6:	4b5c      	ldr	r3, [pc, #368]	; (8001418 <HAL_RCC_OscConfig+0x2a0>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80012ae:	d1b7      	bne.n	8001220 <HAL_RCC_OscConfig+0xa8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012b0:	4b59      	ldr	r3, [pc, #356]	; (8001418 <HAL_RCC_OscConfig+0x2a0>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f013 0f02 	tst.w	r3, #2
 80012b8:	d004      	beq.n	80012c4 <HAL_RCC_OscConfig+0x14c>
 80012ba:	68e3      	ldr	r3, [r4, #12]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d001      	beq.n	80012c4 <HAL_RCC_OscConfig+0x14c>
        return HAL_ERROR;
 80012c0:	2001      	movs	r0, #1
 80012c2:	e13c      	b.n	800153e <HAL_RCC_OscConfig+0x3c6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012c4:	4a54      	ldr	r2, [pc, #336]	; (8001418 <HAL_RCC_OscConfig+0x2a0>)
 80012c6:	6813      	ldr	r3, [r2, #0]
 80012c8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80012cc:	6921      	ldr	r1, [r4, #16]
 80012ce:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80012d2:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012d4:	6823      	ldr	r3, [r4, #0]
 80012d6:	f013 0f08 	tst.w	r3, #8
 80012da:	d046      	beq.n	800136a <HAL_RCC_OscConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012dc:	6963      	ldr	r3, [r4, #20]
 80012de:	b383      	cbz	r3, 8001342 <HAL_RCC_OscConfig+0x1ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012e0:	4a4d      	ldr	r2, [pc, #308]	; (8001418 <HAL_RCC_OscConfig+0x2a0>)
 80012e2:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012ea:	f7ff f95f 	bl	80005ac <HAL_GetTick>
 80012ee:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012f0:	4b49      	ldr	r3, [pc, #292]	; (8001418 <HAL_RCC_OscConfig+0x2a0>)
 80012f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012f4:	f013 0f02 	tst.w	r3, #2
 80012f8:	d137      	bne.n	800136a <HAL_RCC_OscConfig+0x1f2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012fa:	f7ff f957 	bl	80005ac <HAL_GetTick>
 80012fe:	1b40      	subs	r0, r0, r5
 8001300:	2802      	cmp	r0, #2
 8001302:	d9f5      	bls.n	80012f0 <HAL_RCC_OscConfig+0x178>
        {
          return HAL_TIMEOUT;
 8001304:	2003      	movs	r0, #3
 8001306:	e11a      	b.n	800153e <HAL_RCC_OscConfig+0x3c6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001308:	4a43      	ldr	r2, [pc, #268]	; (8001418 <HAL_RCC_OscConfig+0x2a0>)
 800130a:	6813      	ldr	r3, [r2, #0]
 800130c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001310:	6921      	ldr	r1, [r4, #16]
 8001312:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001316:	6013      	str	r3, [r2, #0]
 8001318:	e7dc      	b.n	80012d4 <HAL_RCC_OscConfig+0x15c>
        __HAL_RCC_HSI_DISABLE();
 800131a:	4a3f      	ldr	r2, [pc, #252]	; (8001418 <HAL_RCC_OscConfig+0x2a0>)
 800131c:	6813      	ldr	r3, [r2, #0]
 800131e:	f023 0301 	bic.w	r3, r3, #1
 8001322:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001324:	f7ff f942 	bl	80005ac <HAL_GetTick>
 8001328:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800132a:	4b3b      	ldr	r3, [pc, #236]	; (8001418 <HAL_RCC_OscConfig+0x2a0>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f013 0f02 	tst.w	r3, #2
 8001332:	d0cf      	beq.n	80012d4 <HAL_RCC_OscConfig+0x15c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001334:	f7ff f93a 	bl	80005ac <HAL_GetTick>
 8001338:	1b40      	subs	r0, r0, r5
 800133a:	2802      	cmp	r0, #2
 800133c:	d9f5      	bls.n	800132a <HAL_RCC_OscConfig+0x1b2>
            return HAL_TIMEOUT;
 800133e:	2003      	movs	r0, #3
 8001340:	e0fd      	b.n	800153e <HAL_RCC_OscConfig+0x3c6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001342:	4a35      	ldr	r2, [pc, #212]	; (8001418 <HAL_RCC_OscConfig+0x2a0>)
 8001344:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8001346:	f023 0301 	bic.w	r3, r3, #1
 800134a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800134c:	f7ff f92e 	bl	80005ac <HAL_GetTick>
 8001350:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001352:	4b31      	ldr	r3, [pc, #196]	; (8001418 <HAL_RCC_OscConfig+0x2a0>)
 8001354:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001356:	f013 0f02 	tst.w	r3, #2
 800135a:	d006      	beq.n	800136a <HAL_RCC_OscConfig+0x1f2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800135c:	f7ff f926 	bl	80005ac <HAL_GetTick>
 8001360:	1b40      	subs	r0, r0, r5
 8001362:	2802      	cmp	r0, #2
 8001364:	d9f5      	bls.n	8001352 <HAL_RCC_OscConfig+0x1da>
        {
          return HAL_TIMEOUT;
 8001366:	2003      	movs	r0, #3
 8001368:	e0e9      	b.n	800153e <HAL_RCC_OscConfig+0x3c6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800136a:	6823      	ldr	r3, [r4, #0]
 800136c:	f013 0f04 	tst.w	r3, #4
 8001370:	d07e      	beq.n	8001470 <HAL_RCC_OscConfig+0x2f8>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001372:	4b29      	ldr	r3, [pc, #164]	; (8001418 <HAL_RCC_OscConfig+0x2a0>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800137a:	d131      	bne.n	80013e0 <HAL_RCC_OscConfig+0x268>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800137c:	4b26      	ldr	r3, [pc, #152]	; (8001418 <HAL_RCC_OscConfig+0x2a0>)
 800137e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001380:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001384:	641a      	str	r2, [r3, #64]	; 0x40
 8001386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001388:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800138c:	9301      	str	r3, [sp, #4]
 800138e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001390:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001392:	4b22      	ldr	r3, [pc, #136]	; (800141c <HAL_RCC_OscConfig+0x2a4>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f413 7f80 	tst.w	r3, #256	; 0x100
 800139a:	d023      	beq.n	80013e4 <HAL_RCC_OscConfig+0x26c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800139c:	68a3      	ldr	r3, [r4, #8]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d034      	beq.n	800140c <HAL_RCC_OscConfig+0x294>
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d13c      	bne.n	8001420 <HAL_RCC_OscConfig+0x2a8>
 80013a6:	4b1c      	ldr	r3, [pc, #112]	; (8001418 <HAL_RCC_OscConfig+0x2a0>)
 80013a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80013aa:	f022 0201 	bic.w	r2, r2, #1
 80013ae:	671a      	str	r2, [r3, #112]	; 0x70
 80013b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80013b2:	f022 0204 	bic.w	r2, r2, #4
 80013b6:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013b8:	68a3      	ldr	r3, [r4, #8]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d046      	beq.n	800144c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013be:	f7ff f8f5 	bl	80005ac <HAL_GetTick>
 80013c2:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013c4:	4b14      	ldr	r3, [pc, #80]	; (8001418 <HAL_RCC_OscConfig+0x2a0>)
 80013c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013c8:	f013 0f02 	tst.w	r3, #2
 80013cc:	d14f      	bne.n	800146e <HAL_RCC_OscConfig+0x2f6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013ce:	f7ff f8ed 	bl	80005ac <HAL_GetTick>
 80013d2:	1b80      	subs	r0, r0, r6
 80013d4:	f241 3388 	movw	r3, #5000	; 0x1388
 80013d8:	4298      	cmp	r0, r3
 80013da:	d9f3      	bls.n	80013c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80013dc:	2003      	movs	r0, #3
 80013de:	e0ae      	b.n	800153e <HAL_RCC_OscConfig+0x3c6>
  FlagStatus pwrclkchanged = RESET;
 80013e0:	2500      	movs	r5, #0
 80013e2:	e7d6      	b.n	8001392 <HAL_RCC_OscConfig+0x21a>
      PWR->CR1 |= PWR_CR1_DBP;
 80013e4:	4a0d      	ldr	r2, [pc, #52]	; (800141c <HAL_RCC_OscConfig+0x2a4>)
 80013e6:	6813      	ldr	r3, [r2, #0]
 80013e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ec:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80013ee:	f7ff f8dd 	bl	80005ac <HAL_GetTick>
 80013f2:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013f4:	4b09      	ldr	r3, [pc, #36]	; (800141c <HAL_RCC_OscConfig+0x2a4>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80013fc:	d1ce      	bne.n	800139c <HAL_RCC_OscConfig+0x224>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80013fe:	f7ff f8d5 	bl	80005ac <HAL_GetTick>
 8001402:	1b80      	subs	r0, r0, r6
 8001404:	2864      	cmp	r0, #100	; 0x64
 8001406:	d9f5      	bls.n	80013f4 <HAL_RCC_OscConfig+0x27c>
          return HAL_TIMEOUT;
 8001408:	2003      	movs	r0, #3
 800140a:	e098      	b.n	800153e <HAL_RCC_OscConfig+0x3c6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800140c:	4a02      	ldr	r2, [pc, #8]	; (8001418 <HAL_RCC_OscConfig+0x2a0>)
 800140e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001410:	f043 0301 	orr.w	r3, r3, #1
 8001414:	6713      	str	r3, [r2, #112]	; 0x70
 8001416:	e7cf      	b.n	80013b8 <HAL_RCC_OscConfig+0x240>
 8001418:	40023800 	.word	0x40023800
 800141c:	40007000 	.word	0x40007000
 8001420:	2b05      	cmp	r3, #5
 8001422:	d009      	beq.n	8001438 <HAL_RCC_OscConfig+0x2c0>
 8001424:	4b48      	ldr	r3, [pc, #288]	; (8001548 <HAL_RCC_OscConfig+0x3d0>)
 8001426:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001428:	f022 0201 	bic.w	r2, r2, #1
 800142c:	671a      	str	r2, [r3, #112]	; 0x70
 800142e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001430:	f022 0204 	bic.w	r2, r2, #4
 8001434:	671a      	str	r2, [r3, #112]	; 0x70
 8001436:	e7bf      	b.n	80013b8 <HAL_RCC_OscConfig+0x240>
 8001438:	4b43      	ldr	r3, [pc, #268]	; (8001548 <HAL_RCC_OscConfig+0x3d0>)
 800143a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800143c:	f042 0204 	orr.w	r2, r2, #4
 8001440:	671a      	str	r2, [r3, #112]	; 0x70
 8001442:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001444:	f042 0201 	orr.w	r2, r2, #1
 8001448:	671a      	str	r2, [r3, #112]	; 0x70
 800144a:	e7b5      	b.n	80013b8 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800144c:	f7ff f8ae 	bl	80005ac <HAL_GetTick>
 8001450:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001452:	4b3d      	ldr	r3, [pc, #244]	; (8001548 <HAL_RCC_OscConfig+0x3d0>)
 8001454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001456:	f013 0f02 	tst.w	r3, #2
 800145a:	d008      	beq.n	800146e <HAL_RCC_OscConfig+0x2f6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800145c:	f7ff f8a6 	bl	80005ac <HAL_GetTick>
 8001460:	1b80      	subs	r0, r0, r6
 8001462:	f241 3388 	movw	r3, #5000	; 0x1388
 8001466:	4298      	cmp	r0, r3
 8001468:	d9f3      	bls.n	8001452 <HAL_RCC_OscConfig+0x2da>
        {
          return HAL_TIMEOUT;
 800146a:	2003      	movs	r0, #3
 800146c:	e067      	b.n	800153e <HAL_RCC_OscConfig+0x3c6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800146e:	b9f5      	cbnz	r5, 80014ae <HAL_RCC_OscConfig+0x336>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001470:	69a3      	ldr	r3, [r4, #24]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d062      	beq.n	800153c <HAL_RCC_OscConfig+0x3c4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001476:	4a34      	ldr	r2, [pc, #208]	; (8001548 <HAL_RCC_OscConfig+0x3d0>)
 8001478:	6892      	ldr	r2, [r2, #8]
 800147a:	f002 020c 	and.w	r2, r2, #12
 800147e:	2a08      	cmp	r2, #8
 8001480:	d05f      	beq.n	8001542 <HAL_RCC_OscConfig+0x3ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001482:	2b02      	cmp	r3, #2
 8001484:	d019      	beq.n	80014ba <HAL_RCC_OscConfig+0x342>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001486:	4a30      	ldr	r2, [pc, #192]	; (8001548 <HAL_RCC_OscConfig+0x3d0>)
 8001488:	6813      	ldr	r3, [r2, #0]
 800148a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800148e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001490:	f7ff f88c 	bl	80005ac <HAL_GetTick>
 8001494:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001496:	4b2c      	ldr	r3, [pc, #176]	; (8001548 <HAL_RCC_OscConfig+0x3d0>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800149e:	d047      	beq.n	8001530 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014a0:	f7ff f884 	bl	80005ac <HAL_GetTick>
 80014a4:	1b00      	subs	r0, r0, r4
 80014a6:	2802      	cmp	r0, #2
 80014a8:	d9f5      	bls.n	8001496 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 80014aa:	2003      	movs	r0, #3
 80014ac:	e047      	b.n	800153e <HAL_RCC_OscConfig+0x3c6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80014ae:	4a26      	ldr	r2, [pc, #152]	; (8001548 <HAL_RCC_OscConfig+0x3d0>)
 80014b0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80014b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014b6:	6413      	str	r3, [r2, #64]	; 0x40
 80014b8:	e7da      	b.n	8001470 <HAL_RCC_OscConfig+0x2f8>
        __HAL_RCC_PLL_DISABLE();
 80014ba:	4a23      	ldr	r2, [pc, #140]	; (8001548 <HAL_RCC_OscConfig+0x3d0>)
 80014bc:	6813      	ldr	r3, [r2, #0]
 80014be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014c2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80014c4:	f7ff f872 	bl	80005ac <HAL_GetTick>
 80014c8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ca:	4b1f      	ldr	r3, [pc, #124]	; (8001548 <HAL_RCC_OscConfig+0x3d0>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80014d2:	d006      	beq.n	80014e2 <HAL_RCC_OscConfig+0x36a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014d4:	f7ff f86a 	bl	80005ac <HAL_GetTick>
 80014d8:	1b40      	subs	r0, r0, r5
 80014da:	2802      	cmp	r0, #2
 80014dc:	d9f5      	bls.n	80014ca <HAL_RCC_OscConfig+0x352>
            return HAL_TIMEOUT;
 80014de:	2003      	movs	r0, #3
 80014e0:	e02d      	b.n	800153e <HAL_RCC_OscConfig+0x3c6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014e2:	69e3      	ldr	r3, [r4, #28]
 80014e4:	6a22      	ldr	r2, [r4, #32]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80014ea:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80014ee:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80014f0:	0852      	lsrs	r2, r2, #1
 80014f2:	3a01      	subs	r2, #1
 80014f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80014f8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80014fa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80014fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001502:	4a11      	ldr	r2, [pc, #68]	; (8001548 <HAL_RCC_OscConfig+0x3d0>)
 8001504:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001506:	6813      	ldr	r3, [r2, #0]
 8001508:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800150c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800150e:	f7ff f84d 	bl	80005ac <HAL_GetTick>
 8001512:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001514:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <HAL_RCC_OscConfig+0x3d0>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800151c:	d106      	bne.n	800152c <HAL_RCC_OscConfig+0x3b4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800151e:	f7ff f845 	bl	80005ac <HAL_GetTick>
 8001522:	1b00      	subs	r0, r0, r4
 8001524:	2802      	cmp	r0, #2
 8001526:	d9f5      	bls.n	8001514 <HAL_RCC_OscConfig+0x39c>
            return HAL_TIMEOUT;
 8001528:	2003      	movs	r0, #3
 800152a:	e008      	b.n	800153e <HAL_RCC_OscConfig+0x3c6>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 800152c:	2000      	movs	r0, #0
 800152e:	e006      	b.n	800153e <HAL_RCC_OscConfig+0x3c6>
 8001530:	2000      	movs	r0, #0
 8001532:	e004      	b.n	800153e <HAL_RCC_OscConfig+0x3c6>
    return HAL_ERROR;
 8001534:	2001      	movs	r0, #1
 8001536:	4770      	bx	lr
        return HAL_ERROR;
 8001538:	2001      	movs	r0, #1
 800153a:	e000      	b.n	800153e <HAL_RCC_OscConfig+0x3c6>
  return HAL_OK;
 800153c:	2000      	movs	r0, #0
}
 800153e:	b002      	add	sp, #8
 8001540:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001542:	2001      	movs	r0, #1
 8001544:	e7fb      	b.n	800153e <HAL_RCC_OscConfig+0x3c6>
 8001546:	bf00      	nop
 8001548:	40023800 	.word	0x40023800

0800154c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800154c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800154e:	4b25      	ldr	r3, [pc, #148]	; (80015e4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	f003 030c 	and.w	r3, r3, #12
 8001556:	2b04      	cmp	r3, #4
 8001558:	d041      	beq.n	80015de <HAL_RCC_GetSysClockFreq+0x92>
 800155a:	2b08      	cmp	r3, #8
 800155c:	d001      	beq.n	8001562 <HAL_RCC_GetSysClockFreq+0x16>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800155e:	4822      	ldr	r0, [pc, #136]	; (80015e8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001562:	4b20      	ldr	r3, [pc, #128]	; (80015e4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001564:	685a      	ldr	r2, [r3, #4]
 8001566:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001570:	d012      	beq.n	8001598 <HAL_RCC_GetSysClockFreq+0x4c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001572:	4b1c      	ldr	r3, [pc, #112]	; (80015e4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001574:	6859      	ldr	r1, [r3, #4]
 8001576:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800157a:	2300      	movs	r3, #0
 800157c:	481b      	ldr	r0, [pc, #108]	; (80015ec <HAL_RCC_GetSysClockFreq+0xa0>)
 800157e:	fba1 0100 	umull	r0, r1, r1, r0
 8001582:	f7fe fe4d 	bl	8000220 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8001586:	4b17      	ldr	r3, [pc, #92]	; (80015e4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800158e:	3301      	adds	r3, #1
 8001590:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001592:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001598:	4b12      	ldr	r3, [pc, #72]	; (80015e4 <HAL_RCC_GetSysClockFreq+0x98>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80015a0:	461e      	mov	r6, r3
 80015a2:	2700      	movs	r7, #0
 80015a4:	015c      	lsls	r4, r3, #5
 80015a6:	2500      	movs	r5, #0
 80015a8:	1ae4      	subs	r4, r4, r3
 80015aa:	eb65 0507 	sbc.w	r5, r5, r7
 80015ae:	01a9      	lsls	r1, r5, #6
 80015b0:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 80015b4:	01a0      	lsls	r0, r4, #6
 80015b6:	1b00      	subs	r0, r0, r4
 80015b8:	eb61 0105 	sbc.w	r1, r1, r5
 80015bc:	00cb      	lsls	r3, r1, #3
 80015be:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80015c2:	00c4      	lsls	r4, r0, #3
 80015c4:	19a0      	adds	r0, r4, r6
 80015c6:	eb43 0107 	adc.w	r1, r3, r7
 80015ca:	028b      	lsls	r3, r1, #10
 80015cc:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 80015d0:	0284      	lsls	r4, r0, #10
 80015d2:	4620      	mov	r0, r4
 80015d4:	4619      	mov	r1, r3
 80015d6:	2300      	movs	r3, #0
 80015d8:	f7fe fe22 	bl	8000220 <__aeabi_uldivmod>
 80015dc:	e7d3      	b.n	8001586 <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = HSE_VALUE;
 80015de:	4803      	ldr	r0, [pc, #12]	; (80015ec <HAL_RCC_GetSysClockFreq+0xa0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80015e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40023800 	.word	0x40023800
 80015e8:	00f42400 	.word	0x00f42400
 80015ec:	017d7840 	.word	0x017d7840

080015f0 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80015f0:	2800      	cmp	r0, #0
 80015f2:	f000 80a2 	beq.w	800173a <HAL_RCC_ClockConfig+0x14a>
{
 80015f6:	b570      	push	{r4, r5, r6, lr}
 80015f8:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015fa:	4b52      	ldr	r3, [pc, #328]	; (8001744 <HAL_RCC_ClockConfig+0x154>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 030f 	and.w	r3, r3, #15
 8001602:	428b      	cmp	r3, r1
 8001604:	d20c      	bcs.n	8001620 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001606:	4a4f      	ldr	r2, [pc, #316]	; (8001744 <HAL_RCC_ClockConfig+0x154>)
 8001608:	6813      	ldr	r3, [r2, #0]
 800160a:	f023 030f 	bic.w	r3, r3, #15
 800160e:	430b      	orrs	r3, r1
 8001610:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001612:	6813      	ldr	r3, [r2, #0]
 8001614:	f003 030f 	and.w	r3, r3, #15
 8001618:	4299      	cmp	r1, r3
 800161a:	d001      	beq.n	8001620 <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 800161c:	2001      	movs	r0, #1
 800161e:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001620:	6823      	ldr	r3, [r4, #0]
 8001622:	f013 0f02 	tst.w	r3, #2
 8001626:	d017      	beq.n	8001658 <HAL_RCC_ClockConfig+0x68>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001628:	f013 0f04 	tst.w	r3, #4
 800162c:	d004      	beq.n	8001638 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800162e:	4a46      	ldr	r2, [pc, #280]	; (8001748 <HAL_RCC_ClockConfig+0x158>)
 8001630:	6893      	ldr	r3, [r2, #8]
 8001632:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001636:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001638:	6823      	ldr	r3, [r4, #0]
 800163a:	f013 0f08 	tst.w	r3, #8
 800163e:	d004      	beq.n	800164a <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001640:	4a41      	ldr	r2, [pc, #260]	; (8001748 <HAL_RCC_ClockConfig+0x158>)
 8001642:	6893      	ldr	r3, [r2, #8]
 8001644:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001648:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800164a:	4a3f      	ldr	r2, [pc, #252]	; (8001748 <HAL_RCC_ClockConfig+0x158>)
 800164c:	6893      	ldr	r3, [r2, #8]
 800164e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001652:	68a0      	ldr	r0, [r4, #8]
 8001654:	4303      	orrs	r3, r0
 8001656:	6093      	str	r3, [r2, #8]
 8001658:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800165a:	6823      	ldr	r3, [r4, #0]
 800165c:	f013 0f01 	tst.w	r3, #1
 8001660:	d031      	beq.n	80016c6 <HAL_RCC_ClockConfig+0xd6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001662:	6863      	ldr	r3, [r4, #4]
 8001664:	2b01      	cmp	r3, #1
 8001666:	d020      	beq.n	80016aa <HAL_RCC_ClockConfig+0xba>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001668:	2b02      	cmp	r3, #2
 800166a:	d025      	beq.n	80016b8 <HAL_RCC_ClockConfig+0xc8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800166c:	4a36      	ldr	r2, [pc, #216]	; (8001748 <HAL_RCC_ClockConfig+0x158>)
 800166e:	6812      	ldr	r2, [r2, #0]
 8001670:	f012 0f02 	tst.w	r2, #2
 8001674:	d063      	beq.n	800173e <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001676:	4934      	ldr	r1, [pc, #208]	; (8001748 <HAL_RCC_ClockConfig+0x158>)
 8001678:	688a      	ldr	r2, [r1, #8]
 800167a:	f022 0203 	bic.w	r2, r2, #3
 800167e:	4313      	orrs	r3, r2
 8001680:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001682:	f7fe ff93 	bl	80005ac <HAL_GetTick>
 8001686:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001688:	4b2f      	ldr	r3, [pc, #188]	; (8001748 <HAL_RCC_ClockConfig+0x158>)
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	f003 030c 	and.w	r3, r3, #12
 8001690:	6862      	ldr	r2, [r4, #4]
 8001692:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001696:	d016      	beq.n	80016c6 <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001698:	f7fe ff88 	bl	80005ac <HAL_GetTick>
 800169c:	1b80      	subs	r0, r0, r6
 800169e:	f241 3388 	movw	r3, #5000	; 0x1388
 80016a2:	4298      	cmp	r0, r3
 80016a4:	d9f0      	bls.n	8001688 <HAL_RCC_ClockConfig+0x98>
        return HAL_TIMEOUT;
 80016a6:	2003      	movs	r0, #3
 80016a8:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016aa:	4a27      	ldr	r2, [pc, #156]	; (8001748 <HAL_RCC_ClockConfig+0x158>)
 80016ac:	6812      	ldr	r2, [r2, #0]
 80016ae:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80016b2:	d1e0      	bne.n	8001676 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 80016b4:	2001      	movs	r0, #1
 80016b6:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016b8:	4a23      	ldr	r2, [pc, #140]	; (8001748 <HAL_RCC_ClockConfig+0x158>)
 80016ba:	6812      	ldr	r2, [r2, #0]
 80016bc:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80016c0:	d1d9      	bne.n	8001676 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 80016c2:	2001      	movs	r0, #1
 80016c4:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016c6:	4b1f      	ldr	r3, [pc, #124]	; (8001744 <HAL_RCC_ClockConfig+0x154>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 030f 	and.w	r3, r3, #15
 80016ce:	429d      	cmp	r5, r3
 80016d0:	d20c      	bcs.n	80016ec <HAL_RCC_ClockConfig+0xfc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016d2:	4a1c      	ldr	r2, [pc, #112]	; (8001744 <HAL_RCC_ClockConfig+0x154>)
 80016d4:	6813      	ldr	r3, [r2, #0]
 80016d6:	f023 030f 	bic.w	r3, r3, #15
 80016da:	432b      	orrs	r3, r5
 80016dc:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016de:	6813      	ldr	r3, [r2, #0]
 80016e0:	f003 030f 	and.w	r3, r3, #15
 80016e4:	429d      	cmp	r5, r3
 80016e6:	d001      	beq.n	80016ec <HAL_RCC_ClockConfig+0xfc>
      return HAL_ERROR;
 80016e8:	2001      	movs	r0, #1
}
 80016ea:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016ec:	6823      	ldr	r3, [r4, #0]
 80016ee:	f013 0f04 	tst.w	r3, #4
 80016f2:	d006      	beq.n	8001702 <HAL_RCC_ClockConfig+0x112>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016f4:	4a14      	ldr	r2, [pc, #80]	; (8001748 <HAL_RCC_ClockConfig+0x158>)
 80016f6:	6893      	ldr	r3, [r2, #8]
 80016f8:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80016fc:	68e1      	ldr	r1, [r4, #12]
 80016fe:	430b      	orrs	r3, r1
 8001700:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001702:	6823      	ldr	r3, [r4, #0]
 8001704:	f013 0f08 	tst.w	r3, #8
 8001708:	d007      	beq.n	800171a <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800170a:	4a0f      	ldr	r2, [pc, #60]	; (8001748 <HAL_RCC_ClockConfig+0x158>)
 800170c:	6893      	ldr	r3, [r2, #8]
 800170e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001712:	6921      	ldr	r1, [r4, #16]
 8001714:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001718:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800171a:	f7ff ff17 	bl	800154c <HAL_RCC_GetSysClockFreq>
 800171e:	4b0a      	ldr	r3, [pc, #40]	; (8001748 <HAL_RCC_ClockConfig+0x158>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001726:	4a09      	ldr	r2, [pc, #36]	; (800174c <HAL_RCC_ClockConfig+0x15c>)
 8001728:	5cd3      	ldrb	r3, [r2, r3]
 800172a:	40d8      	lsrs	r0, r3
 800172c:	4b08      	ldr	r3, [pc, #32]	; (8001750 <HAL_RCC_ClockConfig+0x160>)
 800172e:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001730:	2000      	movs	r0, #0
 8001732:	f7fe fefd 	bl	8000530 <HAL_InitTick>
  return HAL_OK;
 8001736:	2000      	movs	r0, #0
 8001738:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800173a:	2001      	movs	r0, #1
 800173c:	4770      	bx	lr
        return HAL_ERROR;
 800173e:	2001      	movs	r0, #1
 8001740:	bd70      	pop	{r4, r5, r6, pc}
 8001742:	bf00      	nop
 8001744:	40023c00 	.word	0x40023c00
 8001748:	40023800 	.word	0x40023800
 800174c:	080035ec 	.word	0x080035ec
 8001750:	20000008 	.word	0x20000008

08001754 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001754:	4b01      	ldr	r3, [pc, #4]	; (800175c <HAL_RCC_GetHCLKFreq+0x8>)
 8001756:	6818      	ldr	r0, [r3, #0]
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	20000008 	.word	0x20000008

08001760 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001760:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001762:	f7ff fff7 	bl	8001754 <HAL_RCC_GetHCLKFreq>
 8001766:	4b04      	ldr	r3, [pc, #16]	; (8001778 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800176e:	4a03      	ldr	r2, [pc, #12]	; (800177c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001770:	5cd3      	ldrb	r3, [r2, r3]
}
 8001772:	40d8      	lsrs	r0, r3
 8001774:	bd08      	pop	{r3, pc}
 8001776:	bf00      	nop
 8001778:	40023800 	.word	0x40023800
 800177c:	080035fc 	.word	0x080035fc

08001780 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001780:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001782:	f7ff ffe7 	bl	8001754 <HAL_RCC_GetHCLKFreq>
 8001786:	4b04      	ldr	r3, [pc, #16]	; (8001798 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800178e:	4a03      	ldr	r2, [pc, #12]	; (800179c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001790:	5cd3      	ldrb	r3, [r2, r3]
}
 8001792:	40d8      	lsrs	r0, r3
 8001794:	bd08      	pop	{r3, pc}
 8001796:	bf00      	nop
 8001798:	40023800 	.word	0x40023800
 800179c:	080035fc 	.word	0x080035fc

080017a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80017a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017a2:	b083      	sub	sp, #12
 80017a4:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80017a6:	6803      	ldr	r3, [r0, #0]
 80017a8:	f013 0f01 	tst.w	r3, #1
 80017ac:	d00c      	beq.n	80017c8 <HAL_RCCEx_PeriphCLKConfig+0x28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80017ae:	4ba4      	ldr	r3, [pc, #656]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80017b0:	689a      	ldr	r2, [r3, #8]
 80017b2:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	689a      	ldr	r2, [r3, #8]
 80017ba:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80017bc:	430a      	orrs	r2, r1
 80017be:	609a      	str	r2, [r3, #8]
    
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80017c0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80017c2:	b1c3      	cbz	r3, 80017f6 <HAL_RCCEx_PeriphCLKConfig+0x56>
  uint32_t plli2sused = 0;
 80017c4:	2700      	movs	r7, #0
 80017c6:	e000      	b.n	80017ca <HAL_RCCEx_PeriphCLKConfig+0x2a>
 80017c8:	2700      	movs	r7, #0
      plli2sused = 1; 
    }
  }
  
  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80017ca:	6823      	ldr	r3, [r4, #0]
 80017cc:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80017d0:	d015      	beq.n	80017fe <HAL_RCCEx_PeriphCLKConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80017d2:	4a9b      	ldr	r2, [pc, #620]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80017d4:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80017d8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80017dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80017de:	430b      	orrs	r3, r1
 80017e0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80017e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80017e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80017ea:	d006      	beq.n	80017fa <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1; 
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	f000 8105 	beq.w	80019fc <HAL_RCCEx_PeriphCLKConfig+0x25c>
  uint32_t pllsaiused = 0;
 80017f2:	2500      	movs	r5, #0
 80017f4:	e004      	b.n	8001800 <HAL_RCCEx_PeriphCLKConfig+0x60>
      plli2sused = 1; 
 80017f6:	2701      	movs	r7, #1
 80017f8:	e7e7      	b.n	80017ca <HAL_RCCEx_PeriphCLKConfig+0x2a>
      plli2sused = 1; 
 80017fa:	2701      	movs	r7, #1
 80017fc:	e7f6      	b.n	80017ec <HAL_RCCEx_PeriphCLKConfig+0x4c>
  uint32_t pllsaiused = 0;
 80017fe:	2500      	movs	r5, #0
      pllsaiused = 1; 
    }
  }
  
  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001800:	6823      	ldr	r3, [r4, #0]
 8001802:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8001806:	d00f      	beq.n	8001828 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001808:	4a8d      	ldr	r2, [pc, #564]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800180a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800180e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001812:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001814:	430b      	orrs	r3, r1
 8001816:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800181a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800181c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001820:	f000 80ee 	beq.w	8001a00 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      plli2sused = 1; 
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001824:	b903      	cbnz	r3, 8001828 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      pllsaiused = 1; 
 8001826:	2501      	movs	r5, #1
    }
  }
  
  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001828:	6823      	ldr	r3, [r4, #0]
 800182a:	f013 0f20 	tst.w	r3, #32
 800182e:	f040 80e9 	bne.w	8001a04 <HAL_RCCEx_PeriphCLKConfig+0x264>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001832:	6823      	ldr	r3, [r4, #0]
 8001834:	f013 0f10 	tst.w	r3, #16
 8001838:	d00c      	beq.n	8001854 <HAL_RCCEx_PeriphCLKConfig+0xb4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
    
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800183a:	4b81      	ldr	r3, [pc, #516]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800183c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001840:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001844:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8001848:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800184c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800184e:	430a      	orrs	r2, r1
 8001850:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
  
  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001854:	6823      	ldr	r3, [r4, #0]
 8001856:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800185a:	d008      	beq.n	800186e <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800185c:	4a78      	ldr	r2, [pc, #480]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800185e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001862:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001866:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8001868:	430b      	orrs	r3, r1
 800186a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800186e:	6823      	ldr	r3, [r4, #0]
 8001870:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8001874:	d008      	beq.n	8001888 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001876:	4a72      	ldr	r2, [pc, #456]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001878:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800187c:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8001880:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8001882:	430b      	orrs	r3, r1
 8001884:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001888:	6823      	ldr	r3, [r4, #0]
 800188a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800188e:	d008      	beq.n	80018a2 <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001890:	4a6b      	ldr	r2, [pc, #428]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001892:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001896:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800189a:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800189c:	430b      	orrs	r3, r1
 800189e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80018a2:	6823      	ldr	r3, [r4, #0]
 80018a4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80018a8:	d008      	beq.n	80018bc <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80018aa:	4a65      	ldr	r2, [pc, #404]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80018ac:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80018b0:	f023 0303 	bic.w	r3, r3, #3
 80018b4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80018b6:	430b      	orrs	r3, r1
 80018b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80018bc:	6823      	ldr	r3, [r4, #0]
 80018be:	f013 0f80 	tst.w	r3, #128	; 0x80
 80018c2:	d008      	beq.n	80018d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80018c4:	4a5e      	ldr	r2, [pc, #376]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80018c6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80018ca:	f023 030c 	bic.w	r3, r3, #12
 80018ce:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80018d0:	430b      	orrs	r3, r1
 80018d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80018d6:	6823      	ldr	r3, [r4, #0]
 80018d8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80018dc:	d008      	beq.n	80018f0 <HAL_RCCEx_PeriphCLKConfig+0x150>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80018de:	4a58      	ldr	r2, [pc, #352]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80018e0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80018e4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80018e8:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80018ea:	430b      	orrs	r3, r1
 80018ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80018f0:	6823      	ldr	r3, [r4, #0]
 80018f2:	f413 7f00 	tst.w	r3, #512	; 0x200
 80018f6:	d008      	beq.n	800190a <HAL_RCCEx_PeriphCLKConfig+0x16a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80018f8:	4a51      	ldr	r2, [pc, #324]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80018fa:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80018fe:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001902:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8001904:	430b      	orrs	r3, r1
 8001906:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800190a:	6823      	ldr	r3, [r4, #0]
 800190c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001910:	d008      	beq.n	8001924 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001912:	4a4b      	ldr	r2, [pc, #300]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001914:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001918:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800191c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800191e:	430b      	orrs	r3, r1
 8001920:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001924:	6823      	ldr	r3, [r4, #0]
 8001926:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800192a:	d008      	beq.n	800193e <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
    
    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800192c:	4a44      	ldr	r2, [pc, #272]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800192e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001932:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001936:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8001938:	430b      	orrs	r3, r1
 800193a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800193e:	6823      	ldr	r3, [r4, #0]
 8001940:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8001944:	d008      	beq.n	8001958 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
    
    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001946:	4a3e      	ldr	r2, [pc, #248]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001948:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800194c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001950:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8001952:	430b      	orrs	r3, r1
 8001954:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001958:	6823      	ldr	r3, [r4, #0]
 800195a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800195e:	d008      	beq.n	8001972 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
    
    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001960:	4a37      	ldr	r2, [pc, #220]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001962:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001966:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800196a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800196c:	430b      	orrs	r3, r1
 800196e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
  
  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001972:	6823      	ldr	r3, [r4, #0]
 8001974:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8001978:	d00d      	beq.n	8001996 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800197a:	4a31      	ldr	r2, [pc, #196]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800197c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001980:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8001984:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8001986:	430b      	orrs	r3, r1
 8001988:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800198c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800198e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001992:	f000 80a1 	beq.w	8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x338>
      pllsaiused = 1; 
    }
  }
  
  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001996:	6823      	ldr	r3, [r4, #0]
 8001998:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800199c:	d008      	beq.n	80019b0 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    
    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800199e:	4a28      	ldr	r2, [pc, #160]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80019a0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80019a4:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80019a8:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80019aa:	430b      	orrs	r3, r1
 80019ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   }
  
  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80019b0:	6823      	ldr	r3, [r4, #0]
 80019b2:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80019b6:	d008      	beq.n	80019ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    
    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80019b8:	4a21      	ldr	r2, [pc, #132]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80019ba:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80019be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019c2:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80019c4:	430b      	orrs	r3, r1
 80019c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
   
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80019ca:	6823      	ldr	r3, [r4, #0]
 80019cc:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 80019d0:	d008      	beq.n	80019e4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
    
    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80019d2:	4a1b      	ldr	r2, [pc, #108]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80019d4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80019d8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80019dc:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80019de:	430b      	orrs	r3, r1
 80019e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
  
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80019e4:	2f00      	cmp	r7, #0
 80019e6:	d179      	bne.n	8001adc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80019e8:	6823      	ldr	r3, [r4, #0]
 80019ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80019ee:	d075      	beq.n	8001adc <HAL_RCCEx_PeriphCLKConfig+0x33c>
    }
  } 
  
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80019f0:	2d00      	cmp	r5, #0
 80019f2:	f040 80e4 	bne.w	8001bbe <HAL_RCCEx_PeriphCLKConfig+0x41e>
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80019f6:	2000      	movs	r0, #0
}
 80019f8:	b003      	add	sp, #12
 80019fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pllsaiused = 1; 
 80019fc:	2501      	movs	r5, #1
 80019fe:	e6ff      	b.n	8001800 <HAL_RCCEx_PeriphCLKConfig+0x60>
      plli2sused = 1; 
 8001a00:	2701      	movs	r7, #1
 8001a02:	e70f      	b.n	8001824 <HAL_RCCEx_PeriphCLKConfig+0x84>
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a04:	4b0e      	ldr	r3, [pc, #56]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001a06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a08:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001a0c:	641a      	str	r2, [r3, #64]	; 0x40
 8001a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a14:	9301      	str	r3, [sp, #4]
 8001a16:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8001a18:	4a0a      	ldr	r2, [pc, #40]	; (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8001a1a:	6813      	ldr	r3, [r2, #0]
 8001a1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a20:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001a22:	f7fe fdc3 	bl	80005ac <HAL_GetTick>
 8001a26:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001a28:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001a30:	d10a      	bne.n	8001a48 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a32:	f7fe fdbb 	bl	80005ac <HAL_GetTick>
 8001a36:	1b80      	subs	r0, r0, r6
 8001a38:	2864      	cmp	r0, #100	; 0x64
 8001a3a:	d9f5      	bls.n	8001a28 <HAL_RCCEx_PeriphCLKConfig+0x288>
        return HAL_TIMEOUT;
 8001a3c:	2003      	movs	r0, #3
 8001a3e:	e7db      	b.n	80019f8 <HAL_RCCEx_PeriphCLKConfig+0x258>
 8001a40:	40023800 	.word	0x40023800
 8001a44:	40007000 	.word	0x40007000
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001a48:	4b8e      	ldr	r3, [pc, #568]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001a4c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001a50:	d015      	beq.n	8001a7e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8001a52:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001a54:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d010      	beq.n	8001a7e <HAL_RCCEx_PeriphCLKConfig+0x2de>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001a5c:	4b89      	ldr	r3, [pc, #548]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001a5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001a60:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8001a64:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8001a66:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8001a6a:	6719      	str	r1, [r3, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001a6c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8001a6e:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8001a72:	6719      	str	r1, [r3, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8001a74:	671a      	str	r2, [r3, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a78:	f013 0f01 	tst.w	r3, #1
 8001a7c:	d112      	bne.n	8001aa4 <HAL_RCCEx_PeriphCLKConfig+0x304>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001a7e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001a80:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001a84:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001a88:	d01d      	beq.n	8001ac6 <HAL_RCCEx_PeriphCLKConfig+0x326>
 8001a8a:	4a7e      	ldr	r2, [pc, #504]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001a8c:	6893      	ldr	r3, [r2, #8]
 8001a8e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001a92:	6093      	str	r3, [r2, #8]
 8001a94:	497b      	ldr	r1, [pc, #492]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001a96:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8001a98:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001a9a:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	670b      	str	r3, [r1, #112]	; 0x70
 8001aa2:	e6c6      	b.n	8001832 <HAL_RCCEx_PeriphCLKConfig+0x92>
        tickstart = HAL_GetTick();
 8001aa4:	f7fe fd82 	bl	80005ac <HAL_GetTick>
 8001aa8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aaa:	4b76      	ldr	r3, [pc, #472]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aae:	f013 0f02 	tst.w	r3, #2
 8001ab2:	d1e4      	bne.n	8001a7e <HAL_RCCEx_PeriphCLKConfig+0x2de>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ab4:	f7fe fd7a 	bl	80005ac <HAL_GetTick>
 8001ab8:	1b80      	subs	r0, r0, r6
 8001aba:	f241 3388 	movw	r3, #5000	; 0x1388
 8001abe:	4298      	cmp	r0, r3
 8001ac0:	d9f3      	bls.n	8001aaa <HAL_RCCEx_PeriphCLKConfig+0x30a>
            return HAL_TIMEOUT;
 8001ac2:	2003      	movs	r0, #3
 8001ac4:	e798      	b.n	80019f8 <HAL_RCCEx_PeriphCLKConfig+0x258>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ac6:	486f      	ldr	r0, [pc, #444]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ac8:	6882      	ldr	r2, [r0, #8]
 8001aca:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8001ace:	496e      	ldr	r1, [pc, #440]	; (8001c88 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 8001ad0:	4019      	ands	r1, r3
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	6082      	str	r2, [r0, #8]
 8001ad6:	e7dd      	b.n	8001a94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      pllsaiused = 1; 
 8001ad8:	2501      	movs	r5, #1
 8001ada:	e75c      	b.n	8001996 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    __HAL_RCC_PLLI2S_DISABLE();  
 8001adc:	4a69      	ldr	r2, [pc, #420]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ade:	6813      	ldr	r3, [r2, #0]
 8001ae0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001ae4:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001ae6:	f7fe fd61 	bl	80005ac <HAL_GetTick>
 8001aea:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001aec:	4b65      	ldr	r3, [pc, #404]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8001af4:	d006      	beq.n	8001b04 <HAL_RCCEx_PeriphCLKConfig+0x364>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001af6:	f7fe fd59 	bl	80005ac <HAL_GetTick>
 8001afa:	1b80      	subs	r0, r0, r6
 8001afc:	2864      	cmp	r0, #100	; 0x64
 8001afe:	d9f5      	bls.n	8001aec <HAL_RCCEx_PeriphCLKConfig+0x34c>
        return HAL_TIMEOUT;
 8001b00:	2003      	movs	r0, #3
 8001b02:	e779      	b.n	80019f8 <HAL_RCCEx_PeriphCLKConfig+0x258>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001b04:	6823      	ldr	r3, [r4, #0]
 8001b06:	f013 0f01 	tst.w	r3, #1
 8001b0a:	d00e      	beq.n	8001b2a <HAL_RCCEx_PeriphCLKConfig+0x38a>
 8001b0c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001b0e:	b963      	cbnz	r3, 8001b2a <HAL_RCCEx_PeriphCLKConfig+0x38a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001b10:	4a5c      	ldr	r2, [pc, #368]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b12:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8001b16:	6861      	ldr	r1, [r4, #4]
 8001b18:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001b1c:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8001b20:	68a1      	ldr	r1, [r4, #8]
 8001b22:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8001b26:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001b2a:	6823      	ldr	r3, [r4, #0]
 8001b2c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001b30:	d003      	beq.n	8001b3a <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8001b32:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001b34:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8001b38:	d02a      	beq.n	8001b90 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 8001b3a:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8001b3e:	d003      	beq.n	8001b48 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 8001b40:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001b42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b46:	d023      	beq.n	8001b90 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001b48:	6823      	ldr	r3, [r4, #0]
 8001b4a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001b4e:	d00a      	beq.n	8001b66 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001b50:	6862      	ldr	r2, [r4, #4]
 8001b52:	68e3      	ldr	r3, [r4, #12]
 8001b54:	061b      	lsls	r3, r3, #24
 8001b56:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001b5a:	68a2      	ldr	r2, [r4, #8]
 8001b5c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001b60:	4a48      	ldr	r2, [pc, #288]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b62:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8001b66:	4a47      	ldr	r2, [pc, #284]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b68:	6813      	ldr	r3, [r2, #0]
 8001b6a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001b6e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001b70:	f7fe fd1c 	bl	80005ac <HAL_GetTick>
 8001b74:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001b76:	4b43      	ldr	r3, [pc, #268]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8001b7e:	f47f af37 	bne.w	80019f0 <HAL_RCCEx_PeriphCLKConfig+0x250>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001b82:	f7fe fd13 	bl	80005ac <HAL_GetTick>
 8001b86:	1b80      	subs	r0, r0, r6
 8001b88:	2864      	cmp	r0, #100	; 0x64
 8001b8a:	d9f4      	bls.n	8001b76 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
        return HAL_TIMEOUT;
 8001b8c:	2003      	movs	r0, #3
 8001b8e:	e733      	b.n	80019f8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001b90:	4a3c      	ldr	r2, [pc, #240]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b92:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8001b96:	6860      	ldr	r0, [r4, #4]
 8001b98:	68e3      	ldr	r3, [r4, #12]
 8001b9a:	061b      	lsls	r3, r3, #24
 8001b9c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001ba0:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8001ba4:	430b      	orrs	r3, r1
 8001ba6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
 8001baa:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001bae:	f023 031f 	bic.w	r3, r3, #31
 8001bb2:	69e1      	ldr	r1, [r4, #28]
 8001bb4:	3901      	subs	r1, #1
 8001bb6:	430b      	orrs	r3, r1
 8001bb8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001bbc:	e7c4      	b.n	8001b48 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    __HAL_RCC_PLLSAI_DISABLE(); 
 8001bbe:	4a31      	ldr	r2, [pc, #196]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001bc0:	6813      	ldr	r3, [r2, #0]
 8001bc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bc6:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001bc8:	f7fe fcf0 	bl	80005ac <HAL_GetTick>
 8001bcc:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001bce:	4b2d      	ldr	r3, [pc, #180]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8001bd6:	d006      	beq.n	8001be6 <HAL_RCCEx_PeriphCLKConfig+0x446>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001bd8:	f7fe fce8 	bl	80005ac <HAL_GetTick>
 8001bdc:	1b40      	subs	r0, r0, r5
 8001bde:	2864      	cmp	r0, #100	; 0x64
 8001be0:	d9f5      	bls.n	8001bce <HAL_RCCEx_PeriphCLKConfig+0x42e>
        return HAL_TIMEOUT;
 8001be2:	2003      	movs	r0, #3
 8001be4:	e708      	b.n	80019f8 <HAL_RCCEx_PeriphCLKConfig+0x258>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001be6:	6823      	ldr	r3, [r4, #0]
 8001be8:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001bec:	d001      	beq.n	8001bf2 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8001bee:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001bf0:	b122      	cbz	r2, 8001bfc <HAL_RCCEx_PeriphCLKConfig+0x45c>
 8001bf2:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8001bf6:	d018      	beq.n	8001c2a <HAL_RCCEx_PeriphCLKConfig+0x48a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001bf8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001bfa:	b9b3      	cbnz	r3, 8001c2a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001bfc:	4a21      	ldr	r2, [pc, #132]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001bfe:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8001c02:	6921      	ldr	r1, [r4, #16]
 8001c04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c08:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8001c0c:	6961      	ldr	r1, [r4, #20]
 8001c0e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001c12:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001c16:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001c1a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8001c1e:	6a21      	ldr	r1, [r4, #32]
 8001c20:	3901      	subs	r1, #1
 8001c22:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001c26:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8001c2a:	6823      	ldr	r3, [r4, #0]
 8001c2c:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8001c30:	d003      	beq.n	8001c3a <HAL_RCCEx_PeriphCLKConfig+0x49a>
 8001c32:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8001c34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001c38:	d013      	beq.n	8001c62 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    __HAL_RCC_PLLSAI_ENABLE();
 8001c3a:	4a12      	ldr	r2, [pc, #72]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c3c:	6813      	ldr	r3, [r2, #0]
 8001c3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c42:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001c44:	f7fe fcb2 	bl	80005ac <HAL_GetTick>
 8001c48:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001c4a:	4b0e      	ldr	r3, [pc, #56]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8001c52:	d114      	bne.n	8001c7e <HAL_RCCEx_PeriphCLKConfig+0x4de>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001c54:	f7fe fcaa 	bl	80005ac <HAL_GetTick>
 8001c58:	1b00      	subs	r0, r0, r4
 8001c5a:	2864      	cmp	r0, #100	; 0x64
 8001c5c:	d9f5      	bls.n	8001c4a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
        return HAL_TIMEOUT;
 8001c5e:	2003      	movs	r0, #3
 8001c60:	e6ca      	b.n	80019f8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001c62:	4908      	ldr	r1, [pc, #32]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c64:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8001c68:	6920      	ldr	r0, [r4, #16]
 8001c6a:	69a3      	ldr	r3, [r4, #24]
 8001c6c:	041b      	lsls	r3, r3, #16
 8001c6e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001c72:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8001c76:	4313      	orrs	r3, r2
 8001c78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001c7c:	e7dd      	b.n	8001c3a <HAL_RCCEx_PeriphCLKConfig+0x49a>
  return HAL_OK;
 8001c7e:	2000      	movs	r0, #0
 8001c80:	e6ba      	b.n	80019f8 <HAL_RCCEx_PeriphCLKConfig+0x258>
 8001c82:	bf00      	nop
 8001c84:	40023800 	.word	0x40023800
 8001c88:	0ffffcff 	.word	0x0ffffcff

08001c8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001c8c:	b410      	push	{r4}
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001c8e:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c90:	6a04      	ldr	r4, [r0, #32]
 8001c92:	f024 0401 	bic.w	r4, r4, #1
 8001c96:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001c98:	6984      	ldr	r4, [r0, #24]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001c9a:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
 8001c9e:	ea44 1202 	orr.w	r2, r4, r2, lsl #4
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001ca2:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8001ca6:	430b      	orrs	r3, r1
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001ca8:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001caa:	6203      	str	r3, [r0, #32]
}
 8001cac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001cb2:	b410      	push	{r4}
uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001cb4:	6a03      	ldr	r3, [r0, #32]
 8001cb6:	f023 0310 	bic.w	r3, r3, #16
 8001cba:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001cbc:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8001cbe:	6a03      	ldr	r3, [r0, #32]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001cc0:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12);
 8001cc4:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001cc8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4);
 8001ccc:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001cd0:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001cd2:	6203      	str	r3, [r0, #32]
}
 8001cd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001cd8:	4770      	bx	lr

08001cda <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001cda:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001cdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001ce0:	f041 0107 	orr.w	r1, r1, #7
 8001ce4:	430b      	orrs	r3, r1
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8001ce6:	6083      	str	r3, [r0, #8]
 8001ce8:	4770      	bx	lr

08001cea <HAL_TIM_PWM_MspInit>:
{
 8001cea:	4770      	bx	lr

08001cec <TIM_Base_SetConfig>:
{
 8001cec:	b470      	push	{r4, r5, r6}
  tmpcr1 = TIMx->CR1;
 8001cee:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001cf0:	4a47      	ldr	r2, [pc, #284]	; (8001e10 <TIM_Base_SetConfig+0x124>)
 8001cf2:	4290      	cmp	r0, r2
 8001cf4:	bf14      	ite	ne
 8001cf6:	2200      	movne	r2, #0
 8001cf8:	2201      	moveq	r2, #1
 8001cfa:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001cfe:	bf14      	ite	ne
 8001d00:	4614      	movne	r4, r2
 8001d02:	f042 0401 	orreq.w	r4, r2, #1
 8001d06:	b9d4      	cbnz	r4, 8001d3e <TIM_Base_SetConfig+0x52>
 8001d08:	4d42      	ldr	r5, [pc, #264]	; (8001e14 <TIM_Base_SetConfig+0x128>)
 8001d0a:	42a8      	cmp	r0, r5
 8001d0c:	bf14      	ite	ne
 8001d0e:	2500      	movne	r5, #0
 8001d10:	2501      	moveq	r5, #1
 8001d12:	4e41      	ldr	r6, [pc, #260]	; (8001e18 <TIM_Base_SetConfig+0x12c>)
 8001d14:	42b0      	cmp	r0, r6
 8001d16:	d054      	beq.n	8001dc2 <TIM_Base_SetConfig+0xd6>
 8001d18:	2d00      	cmp	r5, #0
 8001d1a:	d152      	bne.n	8001dc2 <TIM_Base_SetConfig+0xd6>
 8001d1c:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8001d20:	f505 3582 	add.w	r5, r5, #66560	; 0x10400
 8001d24:	42a8      	cmp	r0, r5
 8001d26:	bf14      	ite	ne
 8001d28:	2500      	movne	r5, #0
 8001d2a:	2501      	moveq	r5, #1
 8001d2c:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8001d30:	42b0      	cmp	r0, r6
 8001d32:	d002      	beq.n	8001d3a <TIM_Base_SetConfig+0x4e>
 8001d34:	b90d      	cbnz	r5, 8001d3a <TIM_Base_SetConfig+0x4e>
 8001d36:	2500      	movs	r5, #0
 8001d38:	e002      	b.n	8001d40 <TIM_Base_SetConfig+0x54>
 8001d3a:	2501      	movs	r5, #1
 8001d3c:	e000      	b.n	8001d40 <TIM_Base_SetConfig+0x54>
 8001d3e:	2501      	movs	r5, #1
 8001d40:	b11d      	cbz	r5, 8001d4a <TIM_Base_SetConfig+0x5e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001d46:	684d      	ldr	r5, [r1, #4]
 8001d48:	432b      	orrs	r3, r5
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001d4a:	2c00      	cmp	r4, #0
 8001d4c:	d13d      	bne.n	8001dca <TIM_Base_SetConfig+0xde>
 8001d4e:	4c31      	ldr	r4, [pc, #196]	; (8001e14 <TIM_Base_SetConfig+0x128>)
 8001d50:	42a0      	cmp	r0, r4
 8001d52:	bf14      	ite	ne
 8001d54:	2400      	movne	r4, #0
 8001d56:	2401      	moveq	r4, #1
 8001d58:	4d2f      	ldr	r5, [pc, #188]	; (8001e18 <TIM_Base_SetConfig+0x12c>)
 8001d5a:	42a8      	cmp	r0, r5
 8001d5c:	d050      	beq.n	8001e00 <TIM_Base_SetConfig+0x114>
 8001d5e:	2c00      	cmp	r4, #0
 8001d60:	d14e      	bne.n	8001e00 <TIM_Base_SetConfig+0x114>
 8001d62:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8001d66:	f504 3482 	add.w	r4, r4, #66560	; 0x10400
 8001d6a:	42a0      	cmp	r0, r4
 8001d6c:	bf14      	ite	ne
 8001d6e:	2400      	movne	r4, #0
 8001d70:	2401      	moveq	r4, #1
 8001d72:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001d76:	42a8      	cmp	r0, r5
 8001d78:	d044      	beq.n	8001e04 <TIM_Base_SetConfig+0x118>
 8001d7a:	2c00      	cmp	r4, #0
 8001d7c:	d142      	bne.n	8001e04 <TIM_Base_SetConfig+0x118>
 8001d7e:	4c27      	ldr	r4, [pc, #156]	; (8001e1c <TIM_Base_SetConfig+0x130>)
 8001d80:	42a0      	cmp	r0, r4
 8001d82:	bf14      	ite	ne
 8001d84:	2400      	movne	r4, #0
 8001d86:	2401      	moveq	r4, #1
 8001d88:	f505 359a 	add.w	r5, r5, #78848	; 0x13400
 8001d8c:	42a8      	cmp	r0, r5
 8001d8e:	d03b      	beq.n	8001e08 <TIM_Base_SetConfig+0x11c>
 8001d90:	2c00      	cmp	r4, #0
 8001d92:	d139      	bne.n	8001e08 <TIM_Base_SetConfig+0x11c>
 8001d94:	4c22      	ldr	r4, [pc, #136]	; (8001e20 <TIM_Base_SetConfig+0x134>)
 8001d96:	42a0      	cmp	r0, r4
 8001d98:	bf14      	ite	ne
 8001d9a:	2400      	movne	r4, #0
 8001d9c:	2401      	moveq	r4, #1
 8001d9e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001da2:	42a8      	cmp	r0, r5
 8001da4:	d032      	beq.n	8001e0c <TIM_Base_SetConfig+0x120>
 8001da6:	2c00      	cmp	r4, #0
 8001da8:	d130      	bne.n	8001e0c <TIM_Base_SetConfig+0x120>
 8001daa:	4c1e      	ldr	r4, [pc, #120]	; (8001e24 <TIM_Base_SetConfig+0x138>)
 8001dac:	42a0      	cmp	r0, r4
 8001dae:	bf14      	ite	ne
 8001db0:	2400      	movne	r4, #0
 8001db2:	2401      	moveq	r4, #1
 8001db4:	f5a5 3596 	sub.w	r5, r5, #76800	; 0x12c00
 8001db8:	42a8      	cmp	r0, r5
 8001dba:	d004      	beq.n	8001dc6 <TIM_Base_SetConfig+0xda>
 8001dbc:	b91c      	cbnz	r4, 8001dc6 <TIM_Base_SetConfig+0xda>
 8001dbe:	2400      	movs	r4, #0
 8001dc0:	e004      	b.n	8001dcc <TIM_Base_SetConfig+0xe0>
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001dc2:	2501      	movs	r5, #1
 8001dc4:	e7bc      	b.n	8001d40 <TIM_Base_SetConfig+0x54>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001dc6:	2401      	movs	r4, #1
 8001dc8:	e000      	b.n	8001dcc <TIM_Base_SetConfig+0xe0>
 8001dca:	2401      	movs	r4, #1
 8001dcc:	b11c      	cbz	r4, 8001dd6 <TIM_Base_SetConfig+0xea>
    tmpcr1 &= ~TIM_CR1_CKD;
 8001dce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001dd2:	68cc      	ldr	r4, [r1, #12]
 8001dd4:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001dd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001dda:	694c      	ldr	r4, [r1, #20]
 8001ddc:	4323      	orrs	r3, r4
  TIMx->CR1 = tmpcr1;
 8001dde:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001de0:	688b      	ldr	r3, [r1, #8]
 8001de2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001de4:	680b      	ldr	r3, [r1, #0]
 8001de6:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8001de8:	4b0f      	ldr	r3, [pc, #60]	; (8001e28 <TIM_Base_SetConfig+0x13c>)
 8001dea:	4298      	cmp	r0, r3
 8001dec:	bf08      	it	eq
 8001dee:	f042 0201 	orreq.w	r2, r2, #1
 8001df2:	b10a      	cbz	r2, 8001df8 <TIM_Base_SetConfig+0x10c>
    TIMx->RCR = Structure->RepetitionCounter;
 8001df4:	690b      	ldr	r3, [r1, #16]
 8001df6:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	6143      	str	r3, [r0, #20]
}
 8001dfc:	bc70      	pop	{r4, r5, r6}
 8001dfe:	4770      	bx	lr
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001e00:	2401      	movs	r4, #1
 8001e02:	e7e3      	b.n	8001dcc <TIM_Base_SetConfig+0xe0>
 8001e04:	2401      	movs	r4, #1
 8001e06:	e7e1      	b.n	8001dcc <TIM_Base_SetConfig+0xe0>
 8001e08:	2401      	movs	r4, #1
 8001e0a:	e7df      	b.n	8001dcc <TIM_Base_SetConfig+0xe0>
 8001e0c:	2401      	movs	r4, #1
 8001e0e:	e7dd      	b.n	8001dcc <TIM_Base_SetConfig+0xe0>
 8001e10:	40010000 	.word	0x40010000
 8001e14:	40000800 	.word	0x40000800
 8001e18:	40000400 	.word	0x40000400
 8001e1c:	40014400 	.word	0x40014400
 8001e20:	40001800 	.word	0x40001800
 8001e24:	40002000 	.word	0x40002000
 8001e28:	40010400 	.word	0x40010400

08001e2c <HAL_TIM_Base_Init>:
  if(htim == NULL)
 8001e2c:	b1a8      	cbz	r0, 8001e5a <HAL_TIM_Base_Init+0x2e>
{ 
 8001e2e:	b510      	push	{r4, lr}
 8001e30:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 8001e32:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001e36:	b15b      	cbz	r3, 8001e50 <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 8001e38:	2302      	movs	r3, #2
 8001e3a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001e3e:	1d21      	adds	r1, r4, #4
 8001e40:	6820      	ldr	r0, [r4, #0]
 8001e42:	f7ff ff53 	bl	8001cec <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001e46:	2301      	movs	r3, #1
 8001e48:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001e4c:	2000      	movs	r0, #0
 8001e4e:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8001e50:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001e54:	f001 f8ea 	bl	800302c <HAL_TIM_Base_MspInit>
 8001e58:	e7ee      	b.n	8001e38 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8001e5a:	2001      	movs	r0, #1
 8001e5c:	4770      	bx	lr

08001e5e <HAL_TIM_PWM_Init>:
  if(htim == NULL)
 8001e5e:	b1a8      	cbz	r0, 8001e8c <HAL_TIM_PWM_Init+0x2e>
{
 8001e60:	b510      	push	{r4, lr}
 8001e62:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 8001e64:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001e68:	b15b      	cbz	r3, 8001e82 <HAL_TIM_PWM_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;  
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001e70:	1d21      	adds	r1, r4, #4
 8001e72:	6820      	ldr	r0, [r4, #0]
 8001e74:	f7ff ff3a 	bl	8001cec <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001e7e:	2000      	movs	r0, #0
 8001e80:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8001e82:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8001e86:	f7ff ff30 	bl	8001cea <HAL_TIM_PWM_MspInit>
 8001e8a:	e7ee      	b.n	8001e6a <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8001e8c:	2001      	movs	r0, #1
 8001e8e:	4770      	bx	lr

08001e90 <TIM_OC1_SetConfig>:
{
 8001e90:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e92:	6a03      	ldr	r3, [r0, #32]
 8001e94:	f023 0301 	bic.w	r3, r3, #1
 8001e98:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001e9a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8001e9c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001e9e:	6985      	ldr	r5, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001ea0:	4a10      	ldr	r2, [pc, #64]	; (8001ee4 <TIM_OC1_SetConfig+0x54>)
 8001ea2:	402a      	ands	r2, r5
  tmpccmrx |= OC_Config->OCMode;
 8001ea4:	680d      	ldr	r5, [r1, #0]
 8001ea6:	432a      	orrs	r2, r5
  tmpccer &= ~TIM_CCER_CC1P;
 8001ea8:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8001eac:	688d      	ldr	r5, [r1, #8]
 8001eae:	432b      	orrs	r3, r5
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001eb0:	4d0d      	ldr	r5, [pc, #52]	; (8001ee8 <TIM_OC1_SetConfig+0x58>)
 8001eb2:	4e0e      	ldr	r6, [pc, #56]	; (8001eec <TIM_OC1_SetConfig+0x5c>)
 8001eb4:	42a8      	cmp	r0, r5
 8001eb6:	bf18      	it	ne
 8001eb8:	42b0      	cmpne	r0, r6
 8001eba:	d10b      	bne.n	8001ed4 <TIM_OC1_SetConfig+0x44>
    tmpccer &= ~TIM_CCER_CC1NP;
 8001ebc:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001ec0:	68cd      	ldr	r5, [r1, #12]
 8001ec2:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8001ec4:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001ec8:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 8001ecc:	694d      	ldr	r5, [r1, #20]
 8001ece:	432c      	orrs	r4, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8001ed0:	698d      	ldr	r5, [r1, #24]
 8001ed2:	432c      	orrs	r4, r5
  TIMx->CR2 = tmpcr2;
 8001ed4:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001ed6:	6182      	str	r2, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8001ed8:	684a      	ldr	r2, [r1, #4]
 8001eda:	6342      	str	r2, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;  
 8001edc:	6203      	str	r3, [r0, #32]
} 
 8001ede:	bc70      	pop	{r4, r5, r6}
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	fffeff8c 	.word	0xfffeff8c
 8001ee8:	40010400 	.word	0x40010400
 8001eec:	40010000 	.word	0x40010000

08001ef0 <TIM_OC2_SetConfig>:
{
 8001ef0:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001ef2:	6a03      	ldr	r3, [r0, #32]
 8001ef4:	f023 0310 	bic.w	r3, r3, #16
 8001ef8:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001efa:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8001efc:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001efe:	6985      	ldr	r5, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001f00:	4a12      	ldr	r2, [pc, #72]	; (8001f4c <TIM_OC2_SetConfig+0x5c>)
 8001f02:	402a      	ands	r2, r5
  tmpccmrx |= (OC_Config->OCMode << 8);
 8001f04:	680d      	ldr	r5, [r1, #0]
 8001f06:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8001f0a:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4);
 8001f0e:	688d      	ldr	r5, [r1, #8]
 8001f10:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001f14:	4d0e      	ldr	r5, [pc, #56]	; (8001f50 <TIM_OC2_SetConfig+0x60>)
 8001f16:	4e0f      	ldr	r6, [pc, #60]	; (8001f54 <TIM_OC2_SetConfig+0x64>)
 8001f18:	42a8      	cmp	r0, r5
 8001f1a:	bf18      	it	ne
 8001f1c:	42b0      	cmpne	r0, r6
 8001f1e:	d10e      	bne.n	8001f3e <TIM_OC2_SetConfig+0x4e>
    tmpccer &= ~TIM_CCER_CC2NP;
 8001f20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8001f24:	68cd      	ldr	r5, [r1, #12]
 8001f26:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8001f2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001f2e:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8001f32:	694d      	ldr	r5, [r1, #20]
 8001f34:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8001f38:	698d      	ldr	r5, [r1, #24]
 8001f3a:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8001f3e:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001f40:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001f42:	684a      	ldr	r2, [r1, #4]
 8001f44:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001f46:	6203      	str	r3, [r0, #32]
}
 8001f48:	bc70      	pop	{r4, r5, r6}
 8001f4a:	4770      	bx	lr
 8001f4c:	feff8cff 	.word	0xfeff8cff
 8001f50:	40010400 	.word	0x40010400
 8001f54:	40010000 	.word	0x40010000

08001f58 <TIM_OC3_SetConfig>:
{
 8001f58:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001f5a:	6a03      	ldr	r3, [r0, #32]
 8001f5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f60:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001f62:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8001f64:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8001f66:	69c5      	ldr	r5, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8001f68:	4a12      	ldr	r2, [pc, #72]	; (8001fb4 <TIM_OC3_SetConfig+0x5c>)
 8001f6a:	402a      	ands	r2, r5
  tmpccmrx |= OC_Config->OCMode;
 8001f6c:	680d      	ldr	r5, [r1, #0]
 8001f6e:	432a      	orrs	r2, r5
  tmpccer &= ~TIM_CCER_CC3P;
 8001f70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8);
 8001f74:	688d      	ldr	r5, [r1, #8]
 8001f76:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001f7a:	4d0f      	ldr	r5, [pc, #60]	; (8001fb8 <TIM_OC3_SetConfig+0x60>)
 8001f7c:	4e0f      	ldr	r6, [pc, #60]	; (8001fbc <TIM_OC3_SetConfig+0x64>)
 8001f7e:	42a8      	cmp	r0, r5
 8001f80:	bf18      	it	ne
 8001f82:	42b0      	cmpne	r0, r6
 8001f84:	d10e      	bne.n	8001fa4 <TIM_OC3_SetConfig+0x4c>
    tmpccer &= ~TIM_CCER_CC3NP;
 8001f86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8001f8a:	68cd      	ldr	r5, [r1, #12]
 8001f8c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8001f90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001f94:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 8001f98:	694d      	ldr	r5, [r1, #20]
 8001f9a:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8001f9e:	698d      	ldr	r5, [r1, #24]
 8001fa0:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  TIMx->CR2 = tmpcr2;
 8001fa4:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001fa6:	61c2      	str	r2, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8001fa8:	684a      	ldr	r2, [r1, #4]
 8001faa:	63c2      	str	r2, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8001fac:	6203      	str	r3, [r0, #32]
}
 8001fae:	bc70      	pop	{r4, r5, r6}
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	fffeff8c 	.word	0xfffeff8c
 8001fb8:	40010400 	.word	0x40010400
 8001fbc:	40010000 	.word	0x40010000

08001fc0 <TIM_OC4_SetConfig>:
{
 8001fc0:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001fc2:	6a03      	ldr	r3, [r0, #32]
 8001fc4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001fc8:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001fca:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8001fcc:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8001fce:	69c5      	ldr	r5, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001fd0:	4a0d      	ldr	r2, [pc, #52]	; (8002008 <TIM_OC4_SetConfig+0x48>)
 8001fd2:	402a      	ands	r2, r5
  tmpccmrx |= (OC_Config->OCMode << 8);
 8001fd4:	680d      	ldr	r5, [r1, #0]
 8001fd6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC4P;
 8001fda:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12);
 8001fde:	688d      	ldr	r5, [r1, #8]
 8001fe0:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001fe4:	4d09      	ldr	r5, [pc, #36]	; (800200c <TIM_OC4_SetConfig+0x4c>)
 8001fe6:	4e0a      	ldr	r6, [pc, #40]	; (8002010 <TIM_OC4_SetConfig+0x50>)
 8001fe8:	42a8      	cmp	r0, r5
 8001fea:	bf18      	it	ne
 8001fec:	42b0      	cmpne	r0, r6
 8001fee:	d104      	bne.n	8001ffa <TIM_OC4_SetConfig+0x3a>
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001ff0:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8001ff4:	694d      	ldr	r5, [r1, #20]
 8001ff6:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  TIMx->CR2 = tmpcr2;
 8001ffa:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001ffc:	61c2      	str	r2, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8001ffe:	684a      	ldr	r2, [r1, #4]
 8002000:	6402      	str	r2, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8002002:	6203      	str	r3, [r0, #32]
}
 8002004:	bc70      	pop	{r4, r5, r6}
 8002006:	4770      	bx	lr
 8002008:	feff8cff 	.word	0xfeff8cff
 800200c:	40010400 	.word	0x40010400
 8002010:	40010000 	.word	0x40010000

08002014 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002014:	b410      	push	{r4}
  uint32_t tmpsmcr = 0;

  tmpsmcr = TIMx->SMCR;
 8002016:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002018:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800201c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8002020:	4319      	orrs	r1, r3
 8002022:	430c      	orrs	r4, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002024:	6084      	str	r4, [r0, #8]
} 
 8002026:	f85d 4b04 	ldr.w	r4, [sp], #4
 800202a:	4770      	bx	lr

0800202c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800202c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002030:	2b01      	cmp	r3, #1
 8002032:	d07d      	beq.n	8002130 <HAL_TIM_ConfigClockSource+0x104>
{
 8002034:	b510      	push	{r4, lr}
 8002036:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002038:	2301      	movs	r3, #1
 800203a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800203e:	2302      	movs	r3, #2
 8002040:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002044:	6802      	ldr	r2, [r0, #0]
 8002046:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002048:	4b3a      	ldr	r3, [pc, #232]	; (8002134 <HAL_TIM_ConfigClockSource+0x108>)
 800204a:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 800204c:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800204e:	680b      	ldr	r3, [r1, #0]
 8002050:	2b40      	cmp	r3, #64	; 0x40
 8002052:	d059      	beq.n	8002108 <HAL_TIM_ConfigClockSource+0xdc>
 8002054:	d910      	bls.n	8002078 <HAL_TIM_ConfigClockSource+0x4c>
 8002056:	2b70      	cmp	r3, #112	; 0x70
 8002058:	d03e      	beq.n	80020d8 <HAL_TIM_ConfigClockSource+0xac>
 800205a:	d81f      	bhi.n	800209c <HAL_TIM_ConfigClockSource+0x70>
 800205c:	2b50      	cmp	r3, #80	; 0x50
 800205e:	d049      	beq.n	80020f4 <HAL_TIM_ConfigClockSource+0xc8>
 8002060:	2b60      	cmp	r3, #96	; 0x60
 8002062:	d132      	bne.n	80020ca <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8002064:	68ca      	ldr	r2, [r1, #12]
 8002066:	6849      	ldr	r1, [r1, #4]
 8002068:	6820      	ldr	r0, [r4, #0]
 800206a:	f7ff fe22 	bl	8001cb2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800206e:	2160      	movs	r1, #96	; 0x60
 8002070:	6820      	ldr	r0, [r4, #0]
 8002072:	f7ff fe32 	bl	8001cda <TIM_ITRx_SetConfig>
    break;
 8002076:	e028      	b.n	80020ca <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8002078:	2b10      	cmp	r3, #16
 800207a:	d04f      	beq.n	800211c <HAL_TIM_ConfigClockSource+0xf0>
 800207c:	d908      	bls.n	8002090 <HAL_TIM_ConfigClockSource+0x64>
 800207e:	2b20      	cmp	r3, #32
 8002080:	d051      	beq.n	8002126 <HAL_TIM_ConfigClockSource+0xfa>
 8002082:	2b30      	cmp	r3, #48	; 0x30
 8002084:	d121      	bne.n	80020ca <HAL_TIM_ConfigClockSource+0x9e>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8002086:	2130      	movs	r1, #48	; 0x30
 8002088:	6820      	ldr	r0, [r4, #0]
 800208a:	f7ff fe26 	bl	8001cda <TIM_ITRx_SetConfig>
    break;
 800208e:	e01c      	b.n	80020ca <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8002090:	b9db      	cbnz	r3, 80020ca <HAL_TIM_ConfigClockSource+0x9e>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8002092:	2100      	movs	r1, #0
 8002094:	6820      	ldr	r0, [r4, #0]
 8002096:	f7ff fe20 	bl	8001cda <TIM_ITRx_SetConfig>
    break;
 800209a:	e016      	b.n	80020ca <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 800209c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020a0:	d00e      	beq.n	80020c0 <HAL_TIM_ConfigClockSource+0x94>
 80020a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020a6:	d110      	bne.n	80020ca <HAL_TIM_ConfigClockSource+0x9e>
      TIM_ETR_SetConfig(htim->Instance, 
 80020a8:	68cb      	ldr	r3, [r1, #12]
 80020aa:	684a      	ldr	r2, [r1, #4]
 80020ac:	6889      	ldr	r1, [r1, #8]
 80020ae:	6820      	ldr	r0, [r4, #0]
 80020b0:	f7ff ffb0 	bl	8002014 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80020b4:	6822      	ldr	r2, [r4, #0]
 80020b6:	6893      	ldr	r3, [r2, #8]
 80020b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020bc:	6093      	str	r3, [r2, #8]
    break;
 80020be:	e004      	b.n	80020ca <HAL_TIM_ConfigClockSource+0x9e>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80020c0:	6822      	ldr	r2, [r4, #0]
 80020c2:	6891      	ldr	r1, [r2, #8]
 80020c4:	4b1c      	ldr	r3, [pc, #112]	; (8002138 <HAL_TIM_ConfigClockSource+0x10c>)
 80020c6:	400b      	ands	r3, r1
 80020c8:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 80020ca:	2301      	movs	r3, #1
 80020cc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80020d0:	2000      	movs	r0, #0
 80020d2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 80020d6:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance, 
 80020d8:	68cb      	ldr	r3, [r1, #12]
 80020da:	684a      	ldr	r2, [r1, #4]
 80020dc:	6889      	ldr	r1, [r1, #8]
 80020de:	6820      	ldr	r0, [r4, #0]
 80020e0:	f7ff ff98 	bl	8002014 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80020e4:	6822      	ldr	r2, [r4, #0]
 80020e6:	6891      	ldr	r1, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80020e8:	4b14      	ldr	r3, [pc, #80]	; (800213c <HAL_TIM_ConfigClockSource+0x110>)
 80020ea:	400b      	ands	r3, r1
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80020ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80020f0:	6093      	str	r3, [r2, #8]
    break;
 80020f2:	e7ea      	b.n	80020ca <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80020f4:	68ca      	ldr	r2, [r1, #12]
 80020f6:	6849      	ldr	r1, [r1, #4]
 80020f8:	6820      	ldr	r0, [r4, #0]
 80020fa:	f7ff fdc7 	bl	8001c8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80020fe:	2150      	movs	r1, #80	; 0x50
 8002100:	6820      	ldr	r0, [r4, #0]
 8002102:	f7ff fdea 	bl	8001cda <TIM_ITRx_SetConfig>
    break;
 8002106:	e7e0      	b.n	80020ca <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8002108:	68ca      	ldr	r2, [r1, #12]
 800210a:	6849      	ldr	r1, [r1, #4]
 800210c:	6820      	ldr	r0, [r4, #0]
 800210e:	f7ff fdbd 	bl	8001c8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002112:	2140      	movs	r1, #64	; 0x40
 8002114:	6820      	ldr	r0, [r4, #0]
 8002116:	f7ff fde0 	bl	8001cda <TIM_ITRx_SetConfig>
    break;
 800211a:	e7d6      	b.n	80020ca <HAL_TIM_ConfigClockSource+0x9e>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 800211c:	2110      	movs	r1, #16
 800211e:	6820      	ldr	r0, [r4, #0]
 8002120:	f7ff fddb 	bl	8001cda <TIM_ITRx_SetConfig>
    break;
 8002124:	e7d1      	b.n	80020ca <HAL_TIM_ConfigClockSource+0x9e>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8002126:	2120      	movs	r1, #32
 8002128:	6820      	ldr	r0, [r4, #0]
 800212a:	f7ff fdd6 	bl	8001cda <TIM_ITRx_SetConfig>
    break;
 800212e:	e7cc      	b.n	80020ca <HAL_TIM_ConfigClockSource+0x9e>
  __HAL_LOCK(htim);
 8002130:	2002      	movs	r0, #2
 8002132:	4770      	bx	lr
 8002134:	fffe0088 	.word	0xfffe0088
 8002138:	fffefff8 	.word	0xfffefff8
 800213c:	fffeff88 	.word	0xfffeff88

08002140 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002140:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8002142:	2301      	movs	r3, #1
 8002144:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002148:	6a03      	ldr	r3, [r0, #32]
 800214a:	ea23 0304 	bic.w	r3, r3, r4
 800214e:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8002150:	6a03      	ldr	r3, [r0, #32]
 8002152:	408a      	lsls	r2, r1
 8002154:	4313      	orrs	r3, r2
 8002156:	6203      	str	r3, [r0, #32]
}
 8002158:	f85d 4b04 	ldr.w	r4, [sp], #4
 800215c:	4770      	bx	lr
	...

08002160 <HAL_TIM_PWM_Start>:
{
 8002160:	b510      	push	{r4, lr}
 8002162:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002164:	2201      	movs	r2, #1
 8002166:	6800      	ldr	r0, [r0, #0]
 8002168:	f7ff ffea 	bl	8002140 <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 800216c:	6823      	ldr	r3, [r4, #0]
 800216e:	4a08      	ldr	r2, [pc, #32]	; (8002190 <HAL_TIM_PWM_Start+0x30>)
 8002170:	4908      	ldr	r1, [pc, #32]	; (8002194 <HAL_TIM_PWM_Start+0x34>)
 8002172:	4293      	cmp	r3, r2
 8002174:	bf18      	it	ne
 8002176:	428b      	cmpne	r3, r1
 8002178:	d103      	bne.n	8002182 <HAL_TIM_PWM_Start+0x22>
    __HAL_TIM_MOE_ENABLE(htim);
 800217a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800217c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002180:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8002182:	6822      	ldr	r2, [r4, #0]
 8002184:	6813      	ldr	r3, [r2, #0]
 8002186:	f043 0301 	orr.w	r3, r3, #1
 800218a:	6013      	str	r3, [r2, #0]
} 
 800218c:	2000      	movs	r0, #0
 800218e:	bd10      	pop	{r4, pc}
 8002190:	40010400 	.word	0x40010400
 8002194:	40010000 	.word	0x40010000

08002198 <TIM_OC5_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002198:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800219a:	6a03      	ldr	r3, [r0, #32]
 800219c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021a0:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021a2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80021a4:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80021a6:	6d45      	ldr	r5, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80021a8:	4a0d      	ldr	r2, [pc, #52]	; (80021e0 <TIM_OC5_SetConfig+0x48>)
 80021aa:	402a      	ands	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80021ac:	680d      	ldr	r5, [r1, #0]
 80021ae:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80021b0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);
 80021b4:	688d      	ldr	r5, [r1, #8]
 80021b6:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80021ba:	4d0a      	ldr	r5, [pc, #40]	; (80021e4 <TIM_OC5_SetConfig+0x4c>)
 80021bc:	4e0a      	ldr	r6, [pc, #40]	; (80021e8 <TIM_OC5_SetConfig+0x50>)
 80021be:	42a8      	cmp	r0, r5
 80021c0:	bf18      	it	ne
 80021c2:	42b0      	cmpne	r0, r6
 80021c4:	d104      	bne.n	80021d0 <TIM_OC5_SetConfig+0x38>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80021c6:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 80021ca:	694d      	ldr	r5, [r1, #20]
 80021cc:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021d0:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80021d2:	6542      	str	r2, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80021d4:	684a      	ldr	r2, [r1, #4]
 80021d6:	6582      	str	r2, [r0, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80021d8:	6203      	str	r3, [r0, #32]
}
 80021da:	bc70      	pop	{r4, r5, r6}
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	fffeff8f 	.word	0xfffeff8f
 80021e4:	40010400 	.word	0x40010400
 80021e8:	40010000 	.word	0x40010000

080021ec <TIM_OC6_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80021ec:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80021ee:	6a03      	ldr	r3, [r0, #32]
 80021f0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80021f4:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021f6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80021f8:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80021fa:	6d45      	ldr	r5, [r0, #84]	; 0x54
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80021fc:	4a0d      	ldr	r2, [pc, #52]	; (8002234 <TIM_OC6_SetConfig+0x48>)
 80021fe:	402a      	ands	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8002200:	680d      	ldr	r5, [r1, #0]
 8002202:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002206:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 800220a:	688d      	ldr	r5, [r1, #8]
 800220c:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002210:	4d09      	ldr	r5, [pc, #36]	; (8002238 <TIM_OC6_SetConfig+0x4c>)
 8002212:	4e0a      	ldr	r6, [pc, #40]	; (800223c <TIM_OC6_SetConfig+0x50>)
 8002214:	42a8      	cmp	r0, r5
 8002216:	bf18      	it	ne
 8002218:	42b0      	cmpne	r0, r6
 800221a:	d104      	bne.n	8002226 <TIM_OC6_SetConfig+0x3a>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800221c:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 8002220:	694d      	ldr	r5, [r1, #20]
 8002222:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002226:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002228:	6542      	str	r2, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800222a:	684a      	ldr	r2, [r1, #4]
 800222c:	65c2      	str	r2, [r0, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800222e:	6203      	str	r3, [r0, #32]
}
 8002230:	bc70      	pop	{r4, r5, r6}
 8002232:	4770      	bx	lr
 8002234:	feff8fff 	.word	0xfeff8fff
 8002238:	40010400 	.word	0x40010400
 800223c:	40010000 	.word	0x40010000

08002240 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 8002240:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002244:	2b01      	cmp	r3, #1
 8002246:	d021      	beq.n	800228c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
{
 8002248:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 800224a:	2301      	movs	r3, #1
 800224c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  tmpcr2 = htim->Instance->CR2;
 8002250:	6804      	ldr	r4, [r0, #0]
 8002252:	6863      	ldr	r3, [r4, #4]
  tmpsmcr = htim->Instance->SMCR;
 8002254:	68a2      	ldr	r2, [r4, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002256:	4d0e      	ldr	r5, [pc, #56]	; (8002290 <HAL_TIMEx_MasterConfigSynchronization+0x50>)
 8002258:	4e0e      	ldr	r6, [pc, #56]	; (8002294 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 800225a:	42ac      	cmp	r4, r5
 800225c:	bf18      	it	ne
 800225e:	42b4      	cmpne	r4, r6
 8002260:	d103      	bne.n	800226a <HAL_TIMEx_MasterConfigSynchronization+0x2a>
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002262:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002266:	684d      	ldr	r5, [r1, #4]
 8002268:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 800226a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800226e:	680d      	ldr	r5, [r1, #0]
 8002270:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002272:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002276:	6889      	ldr	r1, [r1, #8]
 8002278:	430a      	orrs	r2, r1
  htim->Instance->CR2 = tmpcr2;
 800227a:	6063      	str	r3, [r4, #4]
  htim->Instance->SMCR = tmpsmcr;
 800227c:	6803      	ldr	r3, [r0, #0]
 800227e:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(htim);
 8002280:	2300      	movs	r3, #0
 8002282:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8002286:	4618      	mov	r0, r3
} 
 8002288:	bc70      	pop	{r4, r5, r6}
 800228a:	4770      	bx	lr
  __HAL_LOCK(htim);
 800228c:	2002      	movs	r0, #2
 800228e:	4770      	bx	lr
 8002290:	40010400 	.word	0x40010400
 8002294:	40010000 	.word	0x40010000

08002298 <HAL_TIM_PWM_ConfigChannel>:
{
 8002298:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800229a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800229e:	2b01      	cmp	r3, #1
 80022a0:	f000 8092 	beq.w	80023c8 <HAL_TIM_PWM_ConfigChannel+0x130>
 80022a4:	460d      	mov	r5, r1
 80022a6:	4604      	mov	r4, r0
 80022a8:	2301      	movs	r3, #1
 80022aa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80022ae:	2302      	movs	r3, #2
 80022b0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 80022b4:	2a14      	cmp	r2, #20
 80022b6:	d81e      	bhi.n	80022f6 <HAL_TIM_PWM_ConfigChannel+0x5e>
 80022b8:	e8df f002 	tbb	[pc, r2]
 80022bc:	1d1d1d0b 	.word	0x1d1d1d0b
 80022c0:	1d1d1d24 	.word	0x1d1d1d24
 80022c4:	1d1d1d38 	.word	0x1d1d1d38
 80022c8:	1d1d1d4b 	.word	0x1d1d1d4b
 80022cc:	1d1d1d5f 	.word	0x1d1d1d5f
 80022d0:	72          	.byte	0x72
 80022d1:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80022d2:	6800      	ldr	r0, [r0, #0]
 80022d4:	f7ff fddc 	bl	8001e90 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80022d8:	6822      	ldr	r2, [r4, #0]
 80022da:	6993      	ldr	r3, [r2, #24]
 80022dc:	f043 0308 	orr.w	r3, r3, #8
 80022e0:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80022e2:	6822      	ldr	r2, [r4, #0]
 80022e4:	6993      	ldr	r3, [r2, #24]
 80022e6:	f023 0304 	bic.w	r3, r3, #4
 80022ea:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80022ec:	6822      	ldr	r2, [r4, #0]
 80022ee:	6993      	ldr	r3, [r2, #24]
 80022f0:	6929      	ldr	r1, [r5, #16]
 80022f2:	430b      	orrs	r3, r1
 80022f4:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 80022f6:	2301      	movs	r3, #1
 80022f8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80022fc:	2000      	movs	r0, #0
 80022fe:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8002302:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002304:	6800      	ldr	r0, [r0, #0]
 8002306:	f7ff fdf3 	bl	8001ef0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800230a:	6822      	ldr	r2, [r4, #0]
 800230c:	6993      	ldr	r3, [r2, #24]
 800230e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002312:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002314:	6822      	ldr	r2, [r4, #0]
 8002316:	6993      	ldr	r3, [r2, #24]
 8002318:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800231c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 800231e:	6822      	ldr	r2, [r4, #0]
 8002320:	6993      	ldr	r3, [r2, #24]
 8002322:	6929      	ldr	r1, [r5, #16]
 8002324:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002328:	6193      	str	r3, [r2, #24]
    break;
 800232a:	e7e4      	b.n	80022f6 <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800232c:	6800      	ldr	r0, [r0, #0]
 800232e:	f7ff fe13 	bl	8001f58 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002332:	6822      	ldr	r2, [r4, #0]
 8002334:	69d3      	ldr	r3, [r2, #28]
 8002336:	f043 0308 	orr.w	r3, r3, #8
 800233a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800233c:	6822      	ldr	r2, [r4, #0]
 800233e:	69d3      	ldr	r3, [r2, #28]
 8002340:	f023 0304 	bic.w	r3, r3, #4
 8002344:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8002346:	6822      	ldr	r2, [r4, #0]
 8002348:	69d3      	ldr	r3, [r2, #28]
 800234a:	6929      	ldr	r1, [r5, #16]
 800234c:	430b      	orrs	r3, r1
 800234e:	61d3      	str	r3, [r2, #28]
    break;
 8002350:	e7d1      	b.n	80022f6 <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002352:	6800      	ldr	r0, [r0, #0]
 8002354:	f7ff fe34 	bl	8001fc0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002358:	6822      	ldr	r2, [r4, #0]
 800235a:	69d3      	ldr	r3, [r2, #28]
 800235c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002360:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002362:	6822      	ldr	r2, [r4, #0]
 8002364:	69d3      	ldr	r3, [r2, #28]
 8002366:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800236a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 800236c:	6822      	ldr	r2, [r4, #0]
 800236e:	69d3      	ldr	r3, [r2, #28]
 8002370:	6929      	ldr	r1, [r5, #16]
 8002372:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002376:	61d3      	str	r3, [r2, #28]
    break;
 8002378:	e7bd      	b.n	80022f6 <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800237a:	6800      	ldr	r0, [r0, #0]
 800237c:	f7ff ff0c 	bl	8002198 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002380:	6822      	ldr	r2, [r4, #0]
 8002382:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002384:	f043 0308 	orr.w	r3, r3, #8
 8002388:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800238a:	6822      	ldr	r2, [r4, #0]
 800238c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800238e:	f023 0304 	bic.w	r3, r3, #4
 8002392:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8002394:	6822      	ldr	r2, [r4, #0]
 8002396:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002398:	6929      	ldr	r1, [r5, #16]
 800239a:	430b      	orrs	r3, r1
 800239c:	6553      	str	r3, [r2, #84]	; 0x54
    break;
 800239e:	e7aa      	b.n	80022f6 <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80023a0:	6800      	ldr	r0, [r0, #0]
 80023a2:	f7ff ff23 	bl	80021ec <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80023a6:	6822      	ldr	r2, [r4, #0]
 80023a8:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80023aa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80023ae:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80023b0:	6822      	ldr	r2, [r4, #0]
 80023b2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80023b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80023b8:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 80023ba:	6822      	ldr	r2, [r4, #0]
 80023bc:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80023be:	6929      	ldr	r1, [r5, #16]
 80023c0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80023c4:	6553      	str	r3, [r2, #84]	; 0x54
    break;
 80023c6:	e796      	b.n	80022f6 <HAL_TIM_PWM_ConfigChannel+0x5e>
  __HAL_LOCK(htim);
 80023c8:	2002      	movs	r0, #2
}
 80023ca:	bd38      	pop	{r3, r4, r5, pc}

080023cc <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80023cc:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b21      	cmp	r3, #33	; 0x21
 80023d4:	d001      	beq.n	80023da <UART_Transmit_IT+0xe>
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 80023d6:	2002      	movs	r0, #2
  }
}
 80023d8:	4770      	bx	lr
    if(huart->TxXferCount == 0U)
 80023da:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 80023de:	b29b      	uxth	r3, r3
 80023e0:	b193      	cbz	r3, 8002408 <UART_Transmit_IT+0x3c>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023e2:	6883      	ldr	r3, [r0, #8]
 80023e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023e8:	d01a      	beq.n	8002420 <UART_Transmit_IT+0x54>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 80023ea:	6802      	ldr	r2, [r0, #0]
 80023ec:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80023ee:	1c59      	adds	r1, r3, #1
 80023f0:	64c1      	str	r1, [r0, #76]	; 0x4c
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 80023f6:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	3b01      	subs	r3, #1
 80023fe:	b29b      	uxth	r3, r3
 8002400:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
      return HAL_OK;
 8002404:	2000      	movs	r0, #0
 8002406:	4770      	bx	lr
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002408:	6802      	ldr	r2, [r0, #0]
 800240a:	6813      	ldr	r3, [r2, #0]
 800240c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002410:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002412:	6802      	ldr	r2, [r0, #0]
 8002414:	6813      	ldr	r3, [r2, #0]
 8002416:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800241a:	6013      	str	r3, [r2, #0]
      return HAL_OK;
 800241c:	2000      	movs	r0, #0
 800241e:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002420:	6903      	ldr	r3, [r0, #16]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1e1      	bne.n	80023ea <UART_Transmit_IT+0x1e>
        tmp = (uint16_t*) huart->pTxBuffPtr;
 8002426:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002428:	6802      	ldr	r2, [r0, #0]
 800242a:	881b      	ldrh	r3, [r3, #0]
 800242c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002430:	6293      	str	r3, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8002432:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002434:	3302      	adds	r3, #2
 8002436:	64c3      	str	r3, [r0, #76]	; 0x4c
 8002438:	e7dd      	b.n	80023f6 <UART_Transmit_IT+0x2a>

0800243a <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800243a:	6802      	ldr	r2, [r0, #0]
 800243c:	6813      	ldr	r3, [r2, #0]
 800243e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002442:	6013      	str	r3, [r2, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002444:	2320      	movs	r3, #32
 8002446:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800244a:	4770      	bx	lr

0800244c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800244c:	6802      	ldr	r2, [r0, #0]
 800244e:	6813      	ldr	r3, [r2, #0]
 8002450:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002454:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002456:	6802      	ldr	r2, [r0, #0]
 8002458:	6893      	ldr	r3, [r2, #8]
 800245a:	f023 0301 	bic.w	r3, r3, #1
 800245e:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002460:	2320      	movs	r3, #32
 8002462:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
 8002466:	4770      	bx	lr

08002468 <HAL_UART_Transmit_DMA>:
{
 8002468:	b538      	push	{r3, r4, r5, lr}
  if(huart->gState == HAL_UART_STATE_READY)
 800246a:	f890 4069 	ldrb.w	r4, [r0, #105]	; 0x69
 800246e:	b2e4      	uxtb	r4, r4
 8002470:	2c20      	cmp	r4, #32
 8002472:	d001      	beq.n	8002478 <HAL_UART_Transmit_DMA+0x10>
    return HAL_BUSY;
 8002474:	2002      	movs	r0, #2
 8002476:	bd38      	pop	{r3, r4, r5, pc}
    if((pData == NULL ) || (Size == 0U))
 8002478:	2a00      	cmp	r2, #0
 800247a:	bf18      	it	ne
 800247c:	2900      	cmpne	r1, #0
 800247e:	d030      	beq.n	80024e2 <HAL_UART_Transmit_DMA+0x7a>
    __HAL_LOCK(huart);
 8002480:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8002484:	2b01      	cmp	r3, #1
 8002486:	d101      	bne.n	800248c <HAL_UART_Transmit_DMA+0x24>
 8002488:	2002      	movs	r0, #2
}
 800248a:	bd38      	pop	{r3, r4, r5, pc}
 800248c:	4613      	mov	r3, r2
 800248e:	4604      	mov	r4, r0
    __HAL_LOCK(huart);
 8002490:	2201      	movs	r2, #1
 8002492:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    huart->pTxBuffPtr = pData;
 8002496:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize = Size;
 8002498:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
    huart->TxXferCount = Size;
 800249c:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024a0:	2500      	movs	r5, #0
 80024a2:	66c5      	str	r5, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024a4:	2221      	movs	r2, #33	; 0x21
 80024a6:	f880 2069 	strb.w	r2, [r0, #105]	; 0x69
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80024aa:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80024ac:	480e      	ldr	r0, [pc, #56]	; (80024e8 <HAL_UART_Transmit_DMA+0x80>)
 80024ae:	63d0      	str	r0, [r2, #60]	; 0x3c
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80024b0:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80024b2:	480e      	ldr	r0, [pc, #56]	; (80024ec <HAL_UART_Transmit_DMA+0x84>)
 80024b4:	6410      	str	r0, [r2, #64]	; 0x40
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80024b6:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80024b8:	480d      	ldr	r0, [pc, #52]	; (80024f0 <HAL_UART_Transmit_DMA+0x88>)
 80024ba:	64d0      	str	r0, [r2, #76]	; 0x4c
    huart->hdmatx->XferAbortCallback = NULL;
 80024bc:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80024be:	6515      	str	r5, [r2, #80]	; 0x50
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->TDR, Size);
 80024c0:	6822      	ldr	r2, [r4, #0]
 80024c2:	3228      	adds	r2, #40	; 0x28
 80024c4:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80024c6:	f7fe fc39 	bl	8000d3c <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_IT(huart, UART_FLAG_TC);
 80024ca:	6823      	ldr	r3, [r4, #0]
 80024cc:	2240      	movs	r2, #64	; 0x40
 80024ce:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 80024d0:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80024d4:	6822      	ldr	r2, [r4, #0]
 80024d6:	6893      	ldr	r3, [r2, #8]
 80024d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024dc:	6093      	str	r3, [r2, #8]
    return HAL_OK;
 80024de:	4628      	mov	r0, r5
 80024e0:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 80024e2:	2001      	movs	r0, #1
 80024e4:	bd38      	pop	{r3, r4, r5, pc}
 80024e6:	bf00      	nop
 80024e8:	08002559 	.word	0x08002559
 80024ec:	080025a7 	.word	0x080025a7
 80024f0:	08002639 	.word	0x08002639

080024f4 <UART_WaitOnFlagUntilTimeout>:
{
 80024f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024f8:	4605      	mov	r5, r0
 80024fa:	460f      	mov	r7, r1
 80024fc:	4616      	mov	r6, r2
 80024fe:	4698      	mov	r8, r3
 8002500:	9c06      	ldr	r4, [sp, #24]
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002502:	682b      	ldr	r3, [r5, #0]
 8002504:	69db      	ldr	r3, [r3, #28]
 8002506:	ea37 0303 	bics.w	r3, r7, r3
 800250a:	bf0c      	ite	eq
 800250c:	2301      	moveq	r3, #1
 800250e:	2300      	movne	r3, #0
 8002510:	42b3      	cmp	r3, r6
 8002512:	d11e      	bne.n	8002552 <UART_WaitOnFlagUntilTimeout+0x5e>
    if(Timeout != HAL_MAX_DELAY)
 8002514:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002518:	d0f3      	beq.n	8002502 <UART_WaitOnFlagUntilTimeout+0xe>
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 800251a:	b12c      	cbz	r4, 8002528 <UART_WaitOnFlagUntilTimeout+0x34>
 800251c:	f7fe f846 	bl	80005ac <HAL_GetTick>
 8002520:	eba0 0008 	sub.w	r0, r0, r8
 8002524:	4284      	cmp	r4, r0
 8002526:	d8ec      	bhi.n	8002502 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002528:	682a      	ldr	r2, [r5, #0]
 800252a:	6813      	ldr	r3, [r2, #0]
 800252c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002530:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002532:	682a      	ldr	r2, [r5, #0]
 8002534:	6893      	ldr	r3, [r2, #8]
 8002536:	f023 0301 	bic.w	r3, r3, #1
 800253a:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 800253c:	2320      	movs	r3, #32
 800253e:	f885 3069 	strb.w	r3, [r5, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8002542:	f885 306a 	strb.w	r3, [r5, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8002546:	2300      	movs	r3, #0
 8002548:	f885 3068 	strb.w	r3, [r5, #104]	; 0x68
        return HAL_TIMEOUT;
 800254c:	2003      	movs	r0, #3
 800254e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 8002552:	2000      	movs	r0, #0
}
 8002554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002558 <UART_DMATransmitCplt>:
{
 8002558:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800255a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800255c:	6802      	ldr	r2, [r0, #0]
 800255e:	6812      	ldr	r2, [r2, #0]
 8002560:	f412 7f80 	tst.w	r2, #256	; 0x100
 8002564:	d10d      	bne.n	8002582 <UART_DMATransmitCplt+0x2a>
    huart->TxXferCount = 0U;
 8002566:	2200      	movs	r2, #0
 8002568:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800256c:	6819      	ldr	r1, [r3, #0]
 800256e:	688a      	ldr	r2, [r1, #8]
 8002570:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002574:	608a      	str	r2, [r1, #8]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	6813      	ldr	r3, [r2, #0]
 800257a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800257e:	6013      	str	r3, [r2, #0]
 8002580:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8002582:	4618      	mov	r0, r3
 8002584:	f000 fbf2 	bl	8002d6c <HAL_UART_TxCpltCallback>
 8002588:	bd08      	pop	{r3, pc}

0800258a <UART_EndTransmit_IT>:
{
 800258a:	b508      	push	{r3, lr}
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800258c:	6801      	ldr	r1, [r0, #0]
 800258e:	680b      	ldr	r3, [r1, #0]
 8002590:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002594:	600b      	str	r3, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 8002596:	2320      	movs	r3, #32
 8002598:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
  HAL_UART_TxCpltCallback(huart);
 800259c:	f000 fbe6 	bl	8002d6c <HAL_UART_TxCpltCallback>
}
 80025a0:	2000      	movs	r0, #0
 80025a2:	bd08      	pop	{r3, pc}

080025a4 <HAL_UART_TxHalfCpltCallback>:
{
 80025a4:	4770      	bx	lr

080025a6 <UART_DMATxHalfCplt>:
{
 80025a6:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 80025a8:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80025aa:	f7ff fffb 	bl	80025a4 <HAL_UART_TxHalfCpltCallback>
 80025ae:	bd08      	pop	{r3, pc}

080025b0 <HAL_UART_RxCpltCallback>:
{
 80025b0:	4770      	bx	lr

080025b2 <UART_Receive_IT>:
{
 80025b2:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 80025b4:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80025b8:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b22      	cmp	r3, #34	; 0x22
 80025c0:	d006      	beq.n	80025d0 <UART_Receive_IT+0x1e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80025c2:	6802      	ldr	r2, [r0, #0]
 80025c4:	6993      	ldr	r3, [r2, #24]
 80025c6:	f043 0308 	orr.w	r3, r3, #8
 80025ca:	6193      	str	r3, [r2, #24]
    return HAL_BUSY;
 80025cc:	2002      	movs	r0, #2
 80025ce:	bd08      	pop	{r3, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025d0:	6883      	ldr	r3, [r0, #8]
 80025d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025d6:	d011      	beq.n	80025fc <UART_Receive_IT+0x4a>
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80025d8:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80025da:	1c59      	adds	r1, r3, #1
 80025dc:	6541      	str	r1, [r0, #84]	; 0x54
 80025de:	6801      	ldr	r1, [r0, #0]
 80025e0:	6a49      	ldr	r1, [r1, #36]	; 0x24
 80025e2:	b2d2      	uxtb	r2, r2
 80025e4:	400a      	ands	r2, r1
 80025e6:	701a      	strb	r2, [r3, #0]
    if(--huart->RxXferCount == 0)
 80025e8:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	3b01      	subs	r3, #1
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 80025f6:	b16b      	cbz	r3, 8002614 <UART_Receive_IT+0x62>
    return HAL_OK;
 80025f8:	2000      	movs	r0, #0
}
 80025fa:	bd08      	pop	{r3, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025fc:	6903      	ldr	r3, [r0, #16]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1ea      	bne.n	80025d8 <UART_Receive_IT+0x26>
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 8002602:	6d43      	ldr	r3, [r0, #84]	; 0x54
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8002604:	6801      	ldr	r1, [r0, #0]
 8002606:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8002608:	400a      	ands	r2, r1
 800260a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr +=2;
 800260c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800260e:	3302      	adds	r3, #2
 8002610:	6543      	str	r3, [r0, #84]	; 0x54
 8002612:	e7e9      	b.n	80025e8 <UART_Receive_IT+0x36>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002614:	6802      	ldr	r2, [r0, #0]
 8002616:	6813      	ldr	r3, [r2, #0]
 8002618:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800261c:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800261e:	6802      	ldr	r2, [r0, #0]
 8002620:	6893      	ldr	r3, [r2, #8]
 8002622:	f023 0301 	bic.w	r3, r3, #1
 8002626:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8002628:	2320      	movs	r3, #32
 800262a:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
      HAL_UART_RxCpltCallback(huart);
 800262e:	f7ff ffbf 	bl	80025b0 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8002632:	2000      	movs	r0, #0
 8002634:	bd08      	pop	{r3, pc}

08002636 <HAL_UART_ErrorCallback>:
{
 8002636:	4770      	bx	lr

08002638 <UART_DMAError>:
{
 8002638:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800263a:	6b84      	ldr	r4, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 800263c:	2300      	movs	r3, #0
 800263e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8002642:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
  if (  (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002646:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 800264a:	b2db      	uxtb	r3, r3
 800264c:	2b21      	cmp	r3, #33	; 0x21
 800264e:	d00c      	beq.n	800266a <UART_DMAError+0x32>
  if (  (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002650:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b22      	cmp	r3, #34	; 0x22
 8002658:	d010      	beq.n	800267c <UART_DMAError+0x44>
  SET_BIT(huart->ErrorCode, HAL_UART_ERROR_DMA);
 800265a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800265c:	f043 0310 	orr.w	r3, r3, #16
 8002660:	66e3      	str	r3, [r4, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 8002662:	4620      	mov	r0, r4
 8002664:	f7ff ffe7 	bl	8002636 <HAL_UART_ErrorCallback>
 8002668:	bd10      	pop	{r4, pc}
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) )
 800266a:	6823      	ldr	r3, [r4, #0]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002672:	d0ed      	beq.n	8002650 <UART_DMAError+0x18>
    UART_EndTxTransfer(huart);
 8002674:	4620      	mov	r0, r4
 8002676:	f7ff fee0 	bl	800243a <UART_EndTxTransfer>
 800267a:	e7e9      	b.n	8002650 <UART_DMAError+0x18>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) )
 800267c:	6823      	ldr	r3, [r4, #0]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002684:	d0e9      	beq.n	800265a <UART_DMAError+0x22>
    UART_EndRxTransfer(huart);
 8002686:	4620      	mov	r0, r4
 8002688:	f7ff fee0 	bl	800244c <UART_EndRxTransfer>
 800268c:	e7e5      	b.n	800265a <UART_DMAError+0x22>
	...

08002690 <HAL_UART_IRQHandler>:
{
 8002690:	b538      	push	{r3, r4, r5, lr}
 8002692:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002694:	6802      	ldr	r2, [r0, #0]
 8002696:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002698:	6810      	ldr	r0, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800269a:	6891      	ldr	r1, [r2, #8]
  if (errorflags == RESET)
 800269c:	f013 050f 	ands.w	r5, r3, #15
 80026a0:	d105      	bne.n	80026ae <HAL_UART_IRQHandler+0x1e>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80026a2:	f013 0f20 	tst.w	r3, #32
 80026a6:	d002      	beq.n	80026ae <HAL_UART_IRQHandler+0x1e>
 80026a8:	f010 0f20 	tst.w	r0, #32
 80026ac:	d15f      	bne.n	800276e <HAL_UART_IRQHandler+0xde>
  if(   (errorflags != RESET)
 80026ae:	2d00      	cmp	r5, #0
 80026b0:	d073      	beq.n	800279a <HAL_UART_IRQHandler+0x10a>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 80026b2:	f011 0101 	ands.w	r1, r1, #1
 80026b6:	d102      	bne.n	80026be <HAL_UART_IRQHandler+0x2e>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 80026b8:	f410 7f90 	tst.w	r0, #288	; 0x120
 80026bc:	d06d      	beq.n	800279a <HAL_UART_IRQHandler+0x10a>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80026be:	f013 0f01 	tst.w	r3, #1
 80026c2:	d007      	beq.n	80026d4 <HAL_UART_IRQHandler+0x44>
 80026c4:	f410 7f80 	tst.w	r0, #256	; 0x100
 80026c8:	d004      	beq.n	80026d4 <HAL_UART_IRQHandler+0x44>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 80026ca:	2501      	movs	r5, #1
 80026cc:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80026ce:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80026d0:	432a      	orrs	r2, r5
 80026d2:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026d4:	f013 0f02 	tst.w	r3, #2
 80026d8:	d007      	beq.n	80026ea <HAL_UART_IRQHandler+0x5a>
 80026da:	b131      	cbz	r1, 80026ea <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 80026dc:	6822      	ldr	r2, [r4, #0]
 80026de:	2502      	movs	r5, #2
 80026e0:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80026e2:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80026e4:	f042 0204 	orr.w	r2, r2, #4
 80026e8:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026ea:	f013 0f04 	tst.w	r3, #4
 80026ee:	d007      	beq.n	8002700 <HAL_UART_IRQHandler+0x70>
 80026f0:	b131      	cbz	r1, 8002700 <HAL_UART_IRQHandler+0x70>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 80026f2:	6822      	ldr	r2, [r4, #0]
 80026f4:	2504      	movs	r5, #4
 80026f6:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80026f8:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80026fa:	f042 0202 	orr.w	r2, r2, #2
 80026fe:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8002700:	f013 0f08 	tst.w	r3, #8
 8002704:	d009      	beq.n	800271a <HAL_UART_IRQHandler+0x8a>
 8002706:	f010 0f20 	tst.w	r0, #32
 800270a:	d100      	bne.n	800270e <HAL_UART_IRQHandler+0x7e>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800270c:	b129      	cbz	r1, 800271a <HAL_UART_IRQHandler+0x8a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 800270e:	6822      	ldr	r2, [r4, #0]
 8002710:	2108      	movs	r1, #8
 8002712:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002714:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002716:	430a      	orrs	r2, r1
 8002718:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800271a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800271c:	2a00      	cmp	r2, #0
 800271e:	d048      	beq.n	80027b2 <HAL_UART_IRQHandler+0x122>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002720:	f013 0f20 	tst.w	r3, #32
 8002724:	d002      	beq.n	800272c <HAL_UART_IRQHandler+0x9c>
 8002726:	f010 0f20 	tst.w	r0, #32
 800272a:	d124      	bne.n	8002776 <HAL_UART_IRQHandler+0xe6>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800272c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800272e:	f013 0f08 	tst.w	r3, #8
 8002732:	d104      	bne.n	800273e <HAL_UART_IRQHandler+0xae>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8002734:	6823      	ldr	r3, [r4, #0]
 8002736:	689b      	ldr	r3, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002738:	f013 0f40 	tst.w	r3, #64	; 0x40
 800273c:	d027      	beq.n	800278e <HAL_UART_IRQHandler+0xfe>
        UART_EndRxTransfer(huart);
 800273e:	4620      	mov	r0, r4
 8002740:	f7ff fe84 	bl	800244c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002744:	6823      	ldr	r3, [r4, #0]
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	f012 0f40 	tst.w	r2, #64	; 0x40
 800274c:	d01b      	beq.n	8002786 <HAL_UART_IRQHandler+0xf6>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800274e:	689a      	ldr	r2, [r3, #8]
 8002750:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002754:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8002756:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002758:	b18b      	cbz	r3, 800277e <HAL_UART_IRQHandler+0xee>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800275a:	4a1a      	ldr	r2, [pc, #104]	; (80027c4 <HAL_UART_IRQHandler+0x134>)
 800275c:	651a      	str	r2, [r3, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800275e:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8002760:	f7fe fb26 	bl	8000db0 <HAL_DMA_Abort_IT>
 8002764:	b328      	cbz	r0, 80027b2 <HAL_UART_IRQHandler+0x122>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002766:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8002768:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800276a:	4798      	blx	r3
 800276c:	bd38      	pop	{r3, r4, r5, pc}
      UART_Receive_IT(huart);
 800276e:	4620      	mov	r0, r4
 8002770:	f7ff ff1f 	bl	80025b2 <UART_Receive_IT>
      return;
 8002774:	bd38      	pop	{r3, r4, r5, pc}
        UART_Receive_IT(huart);
 8002776:	4620      	mov	r0, r4
 8002778:	f7ff ff1b 	bl	80025b2 <UART_Receive_IT>
 800277c:	e7d6      	b.n	800272c <HAL_UART_IRQHandler+0x9c>
            HAL_UART_ErrorCallback(huart);
 800277e:	4620      	mov	r0, r4
 8002780:	f7ff ff59 	bl	8002636 <HAL_UART_ErrorCallback>
 8002784:	bd38      	pop	{r3, r4, r5, pc}
          HAL_UART_ErrorCallback(huart);
 8002786:	4620      	mov	r0, r4
 8002788:	f7ff ff55 	bl	8002636 <HAL_UART_ErrorCallback>
 800278c:	bd38      	pop	{r3, r4, r5, pc}
        HAL_UART_ErrorCallback(huart);
 800278e:	4620      	mov	r0, r4
 8002790:	f7ff ff51 	bl	8002636 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002794:	2300      	movs	r3, #0
 8002796:	66e3      	str	r3, [r4, #108]	; 0x6c
 8002798:	bd38      	pop	{r3, r4, r5, pc}
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800279a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800279e:	d002      	beq.n	80027a6 <HAL_UART_IRQHandler+0x116>
 80027a0:	f010 0f80 	tst.w	r0, #128	; 0x80
 80027a4:	d106      	bne.n	80027b4 <HAL_UART_IRQHandler+0x124>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80027a6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80027aa:	d002      	beq.n	80027b2 <HAL_UART_IRQHandler+0x122>
 80027ac:	f010 0f40 	tst.w	r0, #64	; 0x40
 80027b0:	d104      	bne.n	80027bc <HAL_UART_IRQHandler+0x12c>
 80027b2:	bd38      	pop	{r3, r4, r5, pc}
    UART_Transmit_IT(huart);
 80027b4:	4620      	mov	r0, r4
 80027b6:	f7ff fe09 	bl	80023cc <UART_Transmit_IT>
    return;
 80027ba:	bd38      	pop	{r3, r4, r5, pc}
    UART_EndTransmit_IT(huart);
 80027bc:	4620      	mov	r0, r4
 80027be:	f7ff fee4 	bl	800258a <UART_EndTransmit_IT>
    return;
 80027c2:	e7f6      	b.n	80027b2 <HAL_UART_IRQHandler+0x122>
 80027c4:	080027c9 	.word	0x080027c9

080027c8 <UART_DMAAbortOnError>:
{
 80027c8:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 80027ca:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 80027cc:	2300      	movs	r3, #0
 80027ce:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80027d2:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 80027d6:	f7ff ff2e 	bl	8002636 <HAL_UART_ErrorCallback>
 80027da:	bd08      	pop	{r3, pc}

080027dc <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027dc:	b538      	push	{r3, r4, r5, lr}
 80027de:	4604      	mov	r4, r0
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80027e0:	6883      	ldr	r3, [r0, #8]
 80027e2:	6902      	ldr	r2, [r0, #16]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	6942      	ldr	r2, [r0, #20]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	69c2      	ldr	r2, [r0, #28]
 80027ec:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80027ee:	6801      	ldr	r1, [r0, #0]
 80027f0:	6808      	ldr	r0, [r1, #0]
 80027f2:	4aa0      	ldr	r2, [pc, #640]	; (8002a74 <UART_SetConfig+0x298>)
 80027f4:	4002      	ands	r2, r0
 80027f6:	4313      	orrs	r3, r2
 80027f8:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027fa:	6822      	ldr	r2, [r4, #0]
 80027fc:	6853      	ldr	r3, [r2, #4]
 80027fe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002802:	68e1      	ldr	r1, [r4, #12]
 8002804:	430b      	orrs	r3, r1
 8002806:	6053      	str	r3, [r2, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002808:	69a3      	ldr	r3, [r4, #24]
 800280a:	6a22      	ldr	r2, [r4, #32]
 800280c:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800280e:	6821      	ldr	r1, [r4, #0]
 8002810:	688a      	ldr	r2, [r1, #8]
 8002812:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8002816:	4313      	orrs	r3, r2
 8002818:	608b      	str	r3, [r1, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800281a:	6825      	ldr	r5, [r4, #0]
 800281c:	4b96      	ldr	r3, [pc, #600]	; (8002a78 <UART_SetConfig+0x29c>)
 800281e:	429d      	cmp	r5, r3
 8002820:	d02b      	beq.n	800287a <UART_SetConfig+0x9e>
 8002822:	4b96      	ldr	r3, [pc, #600]	; (8002a7c <UART_SetConfig+0x2a0>)
 8002824:	429d      	cmp	r5, r3
 8002826:	d03c      	beq.n	80028a2 <UART_SetConfig+0xc6>
 8002828:	4b95      	ldr	r3, [pc, #596]	; (8002a80 <UART_SetConfig+0x2a4>)
 800282a:	429d      	cmp	r5, r3
 800282c:	d052      	beq.n	80028d4 <UART_SetConfig+0xf8>
 800282e:	4b95      	ldr	r3, [pc, #596]	; (8002a84 <UART_SetConfig+0x2a8>)
 8002830:	429d      	cmp	r5, r3
 8002832:	d067      	beq.n	8002904 <UART_SetConfig+0x128>
 8002834:	4b94      	ldr	r3, [pc, #592]	; (8002a88 <UART_SetConfig+0x2ac>)
 8002836:	429d      	cmp	r5, r3
 8002838:	d07c      	beq.n	8002934 <UART_SetConfig+0x158>
 800283a:	4b94      	ldr	r3, [pc, #592]	; (8002a8c <UART_SetConfig+0x2b0>)
 800283c:	429d      	cmp	r5, r3
 800283e:	f000 8094 	beq.w	800296a <UART_SetConfig+0x18e>
 8002842:	4b93      	ldr	r3, [pc, #588]	; (8002a90 <UART_SetConfig+0x2b4>)
 8002844:	429d      	cmp	r5, r3
 8002846:	f000 80ab 	beq.w	80029a0 <UART_SetConfig+0x1c4>
 800284a:	4b92      	ldr	r3, [pc, #584]	; (8002a94 <UART_SetConfig+0x2b8>)
 800284c:	429d      	cmp	r5, r3
 800284e:	f000 80c2 	beq.w	80029d6 <UART_SetConfig+0x1fa>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002852:	2310      	movs	r3, #16

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002854:	69e2      	ldr	r2, [r4, #28]
 8002856:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800285a:	f000 80db 	beq.w	8002a14 <UART_SetConfig+0x238>
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
  }
  else
  {
    switch (clocksource)
 800285e:	2b08      	cmp	r3, #8
 8002860:	f200 8168 	bhi.w	8002b34 <UART_SetConfig+0x358>
 8002864:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002868:	013c0131 	.word	0x013c0131
 800286c:	01660147 	.word	0x01660147
 8002870:	01660151 	.word	0x01660151
 8002874:	01660166 	.word	0x01660166
 8002878:	015c      	.short	0x015c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800287a:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 800287e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002882:	f003 0303 	and.w	r3, r3, #3
 8002886:	2b03      	cmp	r3, #3
 8002888:	d803      	bhi.n	8002892 <UART_SetConfig+0xb6>
 800288a:	e8df f003 	tbb	[pc, r3]
 800288e:	06bf      	.short	0x06bf
 8002890:	0804      	.short	0x0804
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002892:	2310      	movs	r3, #16
 8002894:	e7de      	b.n	8002854 <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002896:	2302      	movs	r3, #2
 8002898:	e7dc      	b.n	8002854 <UART_SetConfig+0x78>
 800289a:	2304      	movs	r3, #4
 800289c:	e7da      	b.n	8002854 <UART_SetConfig+0x78>
 800289e:	2308      	movs	r3, #8
 80028a0:	e7d8      	b.n	8002854 <UART_SetConfig+0x78>
 80028a2:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80028a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028aa:	f003 030c 	and.w	r3, r3, #12
 80028ae:	2b0c      	cmp	r3, #12
 80028b0:	d808      	bhi.n	80028c4 <UART_SetConfig+0xe8>
 80028b2:	e8df f003 	tbb	[pc, r3]
 80028b6:	07ad      	.short	0x07ad
 80028b8:	070b0707 	.word	0x070b0707
 80028bc:	07090707 	.word	0x07090707
 80028c0:	0707      	.short	0x0707
 80028c2:	0d          	.byte	0x0d
 80028c3:	00          	.byte	0x00
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80028c4:	2310      	movs	r3, #16
 80028c6:	e7c5      	b.n	8002854 <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80028c8:	2302      	movs	r3, #2
 80028ca:	e7c3      	b.n	8002854 <UART_SetConfig+0x78>
 80028cc:	2304      	movs	r3, #4
 80028ce:	e7c1      	b.n	8002854 <UART_SetConfig+0x78>
 80028d0:	2308      	movs	r3, #8
 80028d2:	e7bf      	b.n	8002854 <UART_SetConfig+0x78>
 80028d4:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 80028d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028dc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80028e0:	2b10      	cmp	r3, #16
 80028e2:	d00d      	beq.n	8002900 <UART_SetConfig+0x124>
 80028e4:	d905      	bls.n	80028f2 <UART_SetConfig+0x116>
 80028e6:	2b20      	cmp	r3, #32
 80028e8:	d008      	beq.n	80028fc <UART_SetConfig+0x120>
 80028ea:	2b30      	cmp	r3, #48	; 0x30
 80028ec:	d104      	bne.n	80028f8 <UART_SetConfig+0x11c>
 80028ee:	2308      	movs	r3, #8
 80028f0:	e7b0      	b.n	8002854 <UART_SetConfig+0x78>
 80028f2:	b90b      	cbnz	r3, 80028f8 <UART_SetConfig+0x11c>
 80028f4:	2300      	movs	r3, #0
 80028f6:	e7ad      	b.n	8002854 <UART_SetConfig+0x78>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80028f8:	2310      	movs	r3, #16
 80028fa:	e7ab      	b.n	8002854 <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80028fc:	2302      	movs	r3, #2
 80028fe:	e7a9      	b.n	8002854 <UART_SetConfig+0x78>
 8002900:	2304      	movs	r3, #4
 8002902:	e7a7      	b.n	8002854 <UART_SetConfig+0x78>
 8002904:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8002908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800290c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002910:	2b40      	cmp	r3, #64	; 0x40
 8002912:	d00d      	beq.n	8002930 <UART_SetConfig+0x154>
 8002914:	d905      	bls.n	8002922 <UART_SetConfig+0x146>
 8002916:	2b80      	cmp	r3, #128	; 0x80
 8002918:	d008      	beq.n	800292c <UART_SetConfig+0x150>
 800291a:	2bc0      	cmp	r3, #192	; 0xc0
 800291c:	d104      	bne.n	8002928 <UART_SetConfig+0x14c>
 800291e:	2308      	movs	r3, #8
 8002920:	e798      	b.n	8002854 <UART_SetConfig+0x78>
 8002922:	b90b      	cbnz	r3, 8002928 <UART_SetConfig+0x14c>
 8002924:	2300      	movs	r3, #0
 8002926:	e795      	b.n	8002854 <UART_SetConfig+0x78>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002928:	2310      	movs	r3, #16
 800292a:	e793      	b.n	8002854 <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800292c:	2302      	movs	r3, #2
 800292e:	e791      	b.n	8002854 <UART_SetConfig+0x78>
 8002930:	2304      	movs	r3, #4
 8002932:	e78f      	b.n	8002854 <UART_SetConfig+0x78>
 8002934:	f503 33f4 	add.w	r3, r3, #124928	; 0x1e800
 8002938:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800293c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002940:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002944:	d00f      	beq.n	8002966 <UART_SetConfig+0x18a>
 8002946:	d907      	bls.n	8002958 <UART_SetConfig+0x17c>
 8002948:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800294c:	d009      	beq.n	8002962 <UART_SetConfig+0x186>
 800294e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002952:	d104      	bne.n	800295e <UART_SetConfig+0x182>
 8002954:	2308      	movs	r3, #8
 8002956:	e77d      	b.n	8002854 <UART_SetConfig+0x78>
 8002958:	b90b      	cbnz	r3, 800295e <UART_SetConfig+0x182>
 800295a:	2300      	movs	r3, #0
 800295c:	e77a      	b.n	8002854 <UART_SetConfig+0x78>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800295e:	2310      	movs	r3, #16
 8002960:	e778      	b.n	8002854 <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002962:	2302      	movs	r3, #2
 8002964:	e776      	b.n	8002854 <UART_SetConfig+0x78>
 8002966:	2304      	movs	r3, #4
 8002968:	e774      	b.n	8002854 <UART_SetConfig+0x78>
 800296a:	f503 3392 	add.w	r3, r3, #74752	; 0x12400
 800296e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002972:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002976:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800297a:	d00f      	beq.n	800299c <UART_SetConfig+0x1c0>
 800297c:	d907      	bls.n	800298e <UART_SetConfig+0x1b2>
 800297e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002982:	d009      	beq.n	8002998 <UART_SetConfig+0x1bc>
 8002984:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002988:	d104      	bne.n	8002994 <UART_SetConfig+0x1b8>
 800298a:	2308      	movs	r3, #8
 800298c:	e762      	b.n	8002854 <UART_SetConfig+0x78>
 800298e:	b90b      	cbnz	r3, 8002994 <UART_SetConfig+0x1b8>
 8002990:	2301      	movs	r3, #1
 8002992:	e75f      	b.n	8002854 <UART_SetConfig+0x78>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002994:	2310      	movs	r3, #16
 8002996:	e75d      	b.n	8002854 <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002998:	2302      	movs	r3, #2
 800299a:	e75b      	b.n	8002854 <UART_SetConfig+0x78>
 800299c:	2304      	movs	r3, #4
 800299e:	e759      	b.n	8002854 <UART_SetConfig+0x78>
 80029a0:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 80029a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80029ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029b0:	d00f      	beq.n	80029d2 <UART_SetConfig+0x1f6>
 80029b2:	d907      	bls.n	80029c4 <UART_SetConfig+0x1e8>
 80029b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029b8:	d009      	beq.n	80029ce <UART_SetConfig+0x1f2>
 80029ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80029be:	d104      	bne.n	80029ca <UART_SetConfig+0x1ee>
 80029c0:	2308      	movs	r3, #8
 80029c2:	e747      	b.n	8002854 <UART_SetConfig+0x78>
 80029c4:	b90b      	cbnz	r3, 80029ca <UART_SetConfig+0x1ee>
 80029c6:	2300      	movs	r3, #0
 80029c8:	e744      	b.n	8002854 <UART_SetConfig+0x78>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80029ca:	2310      	movs	r3, #16
 80029cc:	e742      	b.n	8002854 <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80029ce:	2302      	movs	r3, #2
 80029d0:	e740      	b.n	8002854 <UART_SetConfig+0x78>
 80029d2:	2304      	movs	r3, #4
 80029d4:	e73e      	b.n	8002854 <UART_SetConfig+0x78>
 80029d6:	f503 33de 	add.w	r3, r3, #113664	; 0x1bc00
 80029da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029de:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80029e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029e6:	d00f      	beq.n	8002a08 <UART_SetConfig+0x22c>
 80029e8:	d907      	bls.n	80029fa <UART_SetConfig+0x21e>
 80029ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029ee:	d009      	beq.n	8002a04 <UART_SetConfig+0x228>
 80029f0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80029f4:	d104      	bne.n	8002a00 <UART_SetConfig+0x224>
 80029f6:	2308      	movs	r3, #8
 80029f8:	e72c      	b.n	8002854 <UART_SetConfig+0x78>
 80029fa:	b90b      	cbnz	r3, 8002a00 <UART_SetConfig+0x224>
 80029fc:	2300      	movs	r3, #0
 80029fe:	e729      	b.n	8002854 <UART_SetConfig+0x78>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002a00:	2310      	movs	r3, #16
 8002a02:	e727      	b.n	8002854 <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a04:	2302      	movs	r3, #2
 8002a06:	e725      	b.n	8002854 <UART_SetConfig+0x78>
 8002a08:	2304      	movs	r3, #4
 8002a0a:	e723      	b.n	8002854 <UART_SetConfig+0x78>
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e721      	b.n	8002854 <UART_SetConfig+0x78>
 8002a10:	2300      	movs	r3, #0
 8002a12:	e71f      	b.n	8002854 <UART_SetConfig+0x78>
    switch (clocksource)
 8002a14:	2b08      	cmp	r3, #8
 8002a16:	d855      	bhi.n	8002ac4 <UART_SetConfig+0x2e8>
 8002a18:	e8df f003 	tbb	[pc, r3]
 8002a1c:	54221705 	.word	0x54221705
 8002a20:	54545440 	.word	0x54545440
 8002a24:	4b          	.byte	0x4b
 8002a25:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002a26:	f7fe fe9b 	bl	8001760 <HAL_RCC_GetPCLK1Freq>
 8002a2a:	6862      	ldr	r2, [r4, #4]
 8002a2c:	0853      	lsrs	r3, r2, #1
 8002a2e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8002a32:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a36:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a38:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 8002a3a:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002a3e:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8002a42:	4313      	orrs	r3, r2
    huart->Instance->BRR = brrtemp;
 8002a44:	6822      	ldr	r2, [r4, #0]
 8002a46:	60d3      	str	r3, [r2, #12]
 8002a48:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002a4a:	f7fe fe99 	bl	8001780 <HAL_RCC_GetPCLK2Freq>
 8002a4e:	6862      	ldr	r2, [r4, #4]
 8002a50:	0853      	lsrs	r3, r2, #1
 8002a52:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8002a56:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a5a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a5c:	2000      	movs	r0, #0
      break;
 8002a5e:	e7ec      	b.n	8002a3a <UART_SetConfig+0x25e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002a60:	6862      	ldr	r2, [r4, #4]
 8002a62:	4b0d      	ldr	r3, [pc, #52]	; (8002a98 <UART_SetConfig+0x2bc>)
 8002a64:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8002a68:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a6c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a6e:	2000      	movs	r0, #0
      break;
 8002a70:	e7e3      	b.n	8002a3a <UART_SetConfig+0x25e>
 8002a72:	bf00      	nop
 8002a74:	efff69f3 	.word	0xefff69f3
 8002a78:	40011000 	.word	0x40011000
 8002a7c:	40004400 	.word	0x40004400
 8002a80:	40004800 	.word	0x40004800
 8002a84:	40004c00 	.word	0x40004c00
 8002a88:	40005000 	.word	0x40005000
 8002a8c:	40011400 	.word	0x40011400
 8002a90:	40007800 	.word	0x40007800
 8002a94:	40007c00 	.word	0x40007c00
 8002a98:	01e84800 	.word	0x01e84800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002a9c:	f7fe fd56 	bl	800154c <HAL_RCC_GetSysClockFreq>
 8002aa0:	6862      	ldr	r2, [r4, #4]
 8002aa2:	0853      	lsrs	r3, r2, #1
 8002aa4:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8002aa8:	fbb3 f3f2 	udiv	r3, r3, r2
 8002aac:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002aae:	2000      	movs	r0, #0
      break;
 8002ab0:	e7c3      	b.n	8002a3a <UART_SetConfig+0x25e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002ab2:	6862      	ldr	r2, [r4, #4]
 8002ab4:	0853      	lsrs	r3, r2, #1
 8002ab6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002aba:	fbb3 f3f2 	udiv	r3, r3, r2
 8002abe:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ac0:	2000      	movs	r0, #0
      break;
 8002ac2:	e7ba      	b.n	8002a3a <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 8002ac4:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	e7b7      	b.n	8002a3a <UART_SetConfig+0x25e>
    {
    case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002aca:	f7fe fe49 	bl	8001760 <HAL_RCC_GetPCLK1Freq>
 8002ace:	6863      	ldr	r3, [r4, #4]
 8002ad0:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002ad4:	fbb0 f0f3 	udiv	r0, r0, r3
 8002ad8:	b280      	uxth	r0, r0
 8002ada:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002adc:	2000      	movs	r0, #0
      break;
 8002ade:	bd38      	pop	{r3, r4, r5, pc}
    case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002ae0:	f7fe fe4e 	bl	8001780 <HAL_RCC_GetPCLK2Freq>
 8002ae4:	6863      	ldr	r3, [r4, #4]
 8002ae6:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002aea:	fbb0 f0f3 	udiv	r0, r0, r3
 8002aee:	b280      	uxth	r0, r0
 8002af0:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002af2:	2000      	movs	r0, #0
      break;
 8002af4:	bd38      	pop	{r3, r4, r5, pc}
    case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002af6:	6862      	ldr	r2, [r4, #4]
 8002af8:	4b0f      	ldr	r3, [pc, #60]	; (8002b38 <UART_SetConfig+0x35c>)
 8002afa:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8002afe:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b06:	2000      	movs	r0, #0
      break;
 8002b08:	bd38      	pop	{r3, r4, r5, pc}
    case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002b0a:	f7fe fd1f 	bl	800154c <HAL_RCC_GetSysClockFreq>
 8002b0e:	6863      	ldr	r3, [r4, #4]
 8002b10:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002b14:	fbb0 f0f3 	udiv	r0, r0, r3
 8002b18:	b280      	uxth	r0, r0
 8002b1a:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b1c:	2000      	movs	r0, #0
      break;
 8002b1e:	bd38      	pop	{r3, r4, r5, pc}
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002b20:	6862      	ldr	r2, [r4, #4]
 8002b22:	0853      	lsrs	r3, r2, #1
 8002b24:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002b28:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b30:	2000      	movs	r0, #0
      break;
 8002b32:	bd38      	pop	{r3, r4, r5, pc}
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8002b34:	2001      	movs	r0, #1
    }
  }

  return ret;

}
 8002b36:	bd38      	pop	{r3, r4, r5, pc}
 8002b38:	00f42400 	.word	0x00f42400

08002b3c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002b3c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002b3e:	f013 0f01 	tst.w	r3, #1
 8002b42:	d006      	beq.n	8002b52 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002b44:	6802      	ldr	r2, [r0, #0]
 8002b46:	6853      	ldr	r3, [r2, #4]
 8002b48:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002b4c:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8002b4e:	430b      	orrs	r3, r1
 8002b50:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002b52:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002b54:	f013 0f02 	tst.w	r3, #2
 8002b58:	d006      	beq.n	8002b68 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002b5a:	6802      	ldr	r2, [r0, #0]
 8002b5c:	6853      	ldr	r3, [r2, #4]
 8002b5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b62:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8002b64:	430b      	orrs	r3, r1
 8002b66:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b68:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002b6a:	f013 0f04 	tst.w	r3, #4
 8002b6e:	d006      	beq.n	8002b7e <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002b70:	6802      	ldr	r2, [r0, #0]
 8002b72:	6853      	ldr	r3, [r2, #4]
 8002b74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b78:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8002b7a:	430b      	orrs	r3, r1
 8002b7c:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b7e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002b80:	f013 0f08 	tst.w	r3, #8
 8002b84:	d006      	beq.n	8002b94 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b86:	6802      	ldr	r2, [r0, #0]
 8002b88:	6853      	ldr	r3, [r2, #4]
 8002b8a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002b8e:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8002b90:	430b      	orrs	r3, r1
 8002b92:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002b94:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002b96:	f013 0f10 	tst.w	r3, #16
 8002b9a:	d006      	beq.n	8002baa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002b9c:	6802      	ldr	r2, [r0, #0]
 8002b9e:	6893      	ldr	r3, [r2, #8]
 8002ba0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ba4:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8002ba6:	430b      	orrs	r3, r1
 8002ba8:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002baa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002bac:	f013 0f20 	tst.w	r3, #32
 8002bb0:	d006      	beq.n	8002bc0 <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002bb2:	6802      	ldr	r2, [r0, #0]
 8002bb4:	6893      	ldr	r3, [r2, #8]
 8002bb6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002bba:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002bbc:	430b      	orrs	r3, r1
 8002bbe:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002bc0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002bc2:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002bc6:	d00a      	beq.n	8002bde <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002bc8:	6802      	ldr	r2, [r0, #0]
 8002bca:	6853      	ldr	r3, [r2, #4]
 8002bcc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002bd0:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002bd2:	430b      	orrs	r3, r1
 8002bd4:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002bd6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002bd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bdc:	d00b      	beq.n	8002bf6 <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002bde:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002be0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002be4:	d006      	beq.n	8002bf4 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002be6:	6802      	ldr	r2, [r0, #0]
 8002be8:	6853      	ldr	r3, [r2, #4]
 8002bea:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002bee:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002bf0:	430b      	orrs	r3, r1
 8002bf2:	6053      	str	r3, [r2, #4]
 8002bf4:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002bf6:	6802      	ldr	r2, [r0, #0]
 8002bf8:	6853      	ldr	r3, [r2, #4]
 8002bfa:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002bfe:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8002c00:	430b      	orrs	r3, r1
 8002c02:	6053      	str	r3, [r2, #4]
 8002c04:	e7eb      	b.n	8002bde <UART_AdvFeatureConfig+0xa2>

08002c06 <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002c06:	b510      	push	{r4, lr}
 8002c08:	b082      	sub	sp, #8
 8002c0a:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002c10:	f7fd fccc 	bl	80005ac <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c14:	6822      	ldr	r2, [r4, #0]
 8002c16:	6812      	ldr	r2, [r2, #0]
 8002c18:	f012 0f08 	tst.w	r2, #8
 8002c1c:	d109      	bne.n	8002c32 <UART_CheckIdleState+0x2c>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 8002c1e:	2320      	movs	r3, #32
 8002c20:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  huart->RxState= HAL_UART_STATE_READY;
 8002c24:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002c28:	2000      	movs	r0, #0
 8002c2a:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68

  return HAL_OK;
}
 8002c2e:	b002      	add	sp, #8
 8002c30:	bd10      	pop	{r4, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c32:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002c36:	9300      	str	r3, [sp, #0]
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002c40:	4620      	mov	r0, r4
 8002c42:	f7ff fc57 	bl	80024f4 <UART_WaitOnFlagUntilTimeout>
 8002c46:	2800      	cmp	r0, #0
 8002c48:	d0e9      	beq.n	8002c1e <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8002c4a:	2003      	movs	r0, #3
 8002c4c:	e7ef      	b.n	8002c2e <UART_CheckIdleState+0x28>

08002c4e <HAL_UART_Init>:
  if(huart == NULL)
 8002c4e:	b378      	cbz	r0, 8002cb0 <HAL_UART_Init+0x62>
{
 8002c50:	b510      	push	{r4, lr}
 8002c52:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 8002c54:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002c58:	b30b      	cbz	r3, 8002c9e <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8002c5a:	2324      	movs	r3, #36	; 0x24
 8002c5c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8002c60:	6822      	ldr	r2, [r4, #0]
 8002c62:	6813      	ldr	r3, [r2, #0]
 8002c64:	f023 0301 	bic.w	r3, r3, #1
 8002c68:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c6a:	4620      	mov	r0, r4
 8002c6c:	f7ff fdb6 	bl	80027dc <UART_SetConfig>
 8002c70:	2801      	cmp	r0, #1
 8002c72:	d01f      	beq.n	8002cb4 <HAL_UART_Init+0x66>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c76:	b9bb      	cbnz	r3, 8002ca8 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c78:	6822      	ldr	r2, [r4, #0]
 8002c7a:	6853      	ldr	r3, [r2, #4]
 8002c7c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002c80:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c82:	6822      	ldr	r2, [r4, #0]
 8002c84:	6893      	ldr	r3, [r2, #8]
 8002c86:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002c8a:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8002c8c:	6822      	ldr	r2, [r4, #0]
 8002c8e:	6813      	ldr	r3, [r2, #0]
 8002c90:	f043 0301 	orr.w	r3, r3, #1
 8002c94:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8002c96:	4620      	mov	r0, r4
 8002c98:	f7ff ffb5 	bl	8002c06 <UART_CheckIdleState>
 8002c9c:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002c9e:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8002ca2:	f000 fa61 	bl	8003168 <HAL_UART_MspInit>
 8002ca6:	e7d8      	b.n	8002c5a <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8002ca8:	4620      	mov	r0, r4
 8002caa:	f7ff ff47 	bl	8002b3c <UART_AdvFeatureConfig>
 8002cae:	e7e3      	b.n	8002c78 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8002cb0:	2001      	movs	r0, #1
 8002cb2:	4770      	bx	lr
}
 8002cb4:	bd10      	pop	{r4, pc}
	...

08002cb8 <MX_GPIO_Init>:

}
/** Pinout Configuration
*/
static void MX_GPIO_Init(void)
{
 8002cb8:	b084      	sub	sp, #16

  /* GPIO Ports Clock Enable */
 __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cba:	4b13      	ldr	r3, [pc, #76]	; (8002d08 <MX_GPIO_Init+0x50>)
 8002cbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cbe:	f042 0201 	orr.w	r2, r2, #1
 8002cc2:	631a      	str	r2, [r3, #48]	; 0x30
 8002cc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cc6:	f002 0201 	and.w	r2, r2, #1
 8002cca:	9200      	str	r2, [sp, #0]
 8002ccc:	9a00      	ldr	r2, [sp, #0]
 __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cd0:	f042 0208 	orr.w	r2, r2, #8
 8002cd4:	631a      	str	r2, [r3, #48]	; 0x30
 8002cd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cd8:	f002 0208 	and.w	r2, r2, #8
 8002cdc:	9201      	str	r2, [sp, #4]
 8002cde:	9a01      	ldr	r2, [sp, #4]
 __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ce0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ce2:	f042 0204 	orr.w	r2, r2, #4
 8002ce6:	631a      	str	r2, [r3, #48]	; 0x30
 8002ce8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cea:	f002 0204 	and.w	r2, r2, #4
 8002cee:	9202      	str	r2, [sp, #8]
 8002cf0:	9a02      	ldr	r2, [sp, #8]
 __HAL_RCC_GPIOE_CLK_ENABLE();
 8002cf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cf4:	f042 0210 	orr.w	r2, r2, #16
 8002cf8:	631a      	str	r2, [r3, #48]	; 0x30
 8002cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfc:	f003 0310 	and.w	r3, r3, #16
 8002d00:	9303      	str	r3, [sp, #12]
 8002d02:	9b03      	ldr	r3, [sp, #12]

}
 8002d04:	b004      	add	sp, #16
 8002d06:	4770      	bx	lr
 8002d08:	40023800 	.word	0x40023800

08002d0c <MX_DMA_Init>:
{
 8002d0c:	b500      	push	{lr}
 8002d0e:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002d10:	4b0e      	ldr	r3, [pc, #56]	; (8002d4c <MX_DMA_Init+0x40>)
 8002d12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d14:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002d18:	631a      	str	r2, [r3, #48]	; 0x30
 8002d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d20:	9301      	str	r3, [sp, #4]
 8002d22:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8002d24:	2200      	movs	r2, #0
 8002d26:	4611      	mov	r1, r2
 8002d28:	200d      	movs	r0, #13
 8002d2a:	f7fd febd 	bl	8000aa8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002d2e:	200d      	movs	r0, #13
 8002d30:	f7fd feea 	bl	8000b08 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002d34:	2200      	movs	r2, #0
 8002d36:	4611      	mov	r1, r2
 8002d38:	200f      	movs	r0, #15
 8002d3a:	f7fd feb5 	bl	8000aa8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002d3e:	200f      	movs	r0, #15
 8002d40:	f7fd fee2 	bl	8000b08 <HAL_NVIC_EnableIRQ>
}
 8002d44:	b003      	add	sp, #12
 8002d46:	f85d fb04 	ldr.w	pc, [sp], #4
 8002d4a:	bf00      	nop
 8002d4c:	40023800 	.word	0x40023800

08002d50 <print_timer_count>:
{
 8002d50:	b510      	push	{r4, lr}
    uint32_t timer_count = htim->Instance->CNT;
 8002d52:	6803      	ldr	r3, [r0, #0]
 8002d54:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    uart_debug_send_string("Timer count: ");
 8002d56:	4804      	ldr	r0, [pc, #16]	; (8002d68 <print_timer_count+0x18>)
 8002d58:	f000 fb7a 	bl	8003450 <uart_debug_send_string>
    uart_debug_print_uint32(timer_count);
 8002d5c:	4620      	mov	r0, r4
 8002d5e:	f000 fb3f 	bl	80033e0 <uart_debug_print_uint32>
    uart_debug_newline();
 8002d62:	f000 fb5b 	bl	800341c <uart_debug_newline>
 8002d66:	bd10      	pop	{r4, pc}
 8002d68:	080035c0 	.word	0x080035c0

08002d6c <HAL_UART_TxCpltCallback>:
  HAL_TIM_MspPostInit(&htim4);

}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart)
{
 8002d6c:	b508      	push	{r3, lr}
	if(huart == &huart4) {
 8002d6e:	4b03      	ldr	r3, [pc, #12]	; (8002d7c <HAL_UART_TxCpltCallback+0x10>)
 8002d70:	4283      	cmp	r3, r0
 8002d72:	d000      	beq.n	8002d76 <HAL_UART_TxCpltCallback+0xa>
 8002d74:	bd08      	pop	{r3, pc}
		uart_debug_callback();
 8002d76:	f000 fb77 	bl	8003468 <uart_debug_callback>
	}
}
 8002d7a:	e7fb      	b.n	8002d74 <HAL_UART_TxCpltCallback+0x8>
 8002d7c:	20000130 	.word	0x20000130

08002d80 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
	if(hadc ==&hadc1)
 8002d80:	4b06      	ldr	r3, [pc, #24]	; (8002d9c <HAL_ADC_ConvCpltCallback+0x1c>)
 8002d82:	4298      	cmp	r0, r3
 8002d84:	d000      	beq.n	8002d88 <HAL_ADC_ConvCpltCallback+0x8>
 8002d86:	4770      	bx	lr
{
 8002d88:	b510      	push	{r4, lr}
 8002d8a:	4604      	mov	r4, r0
	{
		// saving this value to the global adc_result variable
		// only for test purposes
		adc_result = HAL_ADC_GetValue(hadc);
 8002d8c:	f7fd fcfc 	bl	8000788 <HAL_ADC_GetValue>
 8002d90:	4b03      	ldr	r3, [pc, #12]	; (8002da0 <HAL_ADC_ConvCpltCallback+0x20>)
 8002d92:	6018      	str	r0, [r3, #0]
        // stops the ADC because we are not operating in continuous conversion mode
		HAL_ADC_Stop_IT(hadc);
 8002d94:	4620      	mov	r0, r4
 8002d96:	f7fd fcd1 	bl	800073c <HAL_ADC_Stop_IT>
 8002d9a:	bd10      	pop	{r4, pc}
 8002d9c:	200000e8 	.word	0x200000e8
 8002da0:	20000030 	.word	0x20000030

08002da4 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8002da4:	e7fe      	b.n	8002da4 <_Error_Handler>
	...

08002da8 <MX_ADC1_Init>:
{
 8002da8:	b500      	push	{lr}
 8002daa:	b085      	sub	sp, #20
  hadc1.Instance = ADC1;
 8002dac:	4819      	ldr	r0, [pc, #100]	; (8002e14 <MX_ADC1_Init+0x6c>)
 8002dae:	4b1a      	ldr	r3, [pc, #104]	; (8002e18 <MX_ADC1_Init+0x70>)
 8002db0:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002db2:	2300      	movs	r3, #0
 8002db4:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002db6:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002db8:	6103      	str	r3, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002dba:	6183      	str	r3, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002dbc:	6203      	str	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002dbe:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002dc0:	4a16      	ldr	r2, [pc, #88]	; (8002e1c <MX_ADC1_Init+0x74>)
 8002dc2:	6282      	str	r2, [r0, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002dc4:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002dca:	6303      	str	r3, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002dcc:	6142      	str	r2, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002dce:	f7fd fc8b 	bl	80006e8 <HAL_ADC_Init>
 8002dd2:	b9a8      	cbnz	r0, 8002e00 <MX_ADC1_Init+0x58>
  sConfig.Channel = ADC_CHANNEL_3;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002de0:	4669      	mov	r1, sp
 8002de2:	480c      	ldr	r0, [pc, #48]	; (8002e14 <MX_ADC1_Init+0x6c>)
 8002de4:	f7fd fd76 	bl	80008d4 <HAL_ADC_ConfigChannel>
 8002de8:	b970      	cbnz	r0, 8002e08 <MX_ADC1_Init+0x60>
  HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002dea:	2200      	movs	r2, #0
 8002dec:	4611      	mov	r1, r2
 8002dee:	2012      	movs	r0, #18
 8002df0:	f7fd fe5a 	bl	8000aa8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002df4:	2012      	movs	r0, #18
 8002df6:	f7fd fe87 	bl	8000b08 <HAL_NVIC_EnableIRQ>
}
 8002dfa:	b005      	add	sp, #20
 8002dfc:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8002e00:	21f9      	movs	r1, #249	; 0xf9
 8002e02:	4807      	ldr	r0, [pc, #28]	; (8002e20 <MX_ADC1_Init+0x78>)
 8002e04:	f7ff ffce 	bl	8002da4 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8002e08:	f240 1103 	movw	r1, #259	; 0x103
 8002e0c:	4804      	ldr	r0, [pc, #16]	; (8002e20 <MX_ADC1_Init+0x78>)
 8002e0e:	f7ff ffc9 	bl	8002da4 <_Error_Handler>
 8002e12:	bf00      	nop
 8002e14:	200000e8 	.word	0x200000e8
 8002e18:	40012000 	.word	0x40012000
 8002e1c:	0f000001 	.word	0x0f000001
 8002e20:	08003594 	.word	0x08003594

08002e24 <MX_TIM4_Init>:
{
 8002e24:	b500      	push	{lr}
 8002e26:	b08f      	sub	sp, #60	; 0x3c
  htim4.Instance = TIM4;
 8002e28:	4827      	ldr	r0, [pc, #156]	; (8002ec8 <MX_TIM4_Init+0xa4>)
 8002e2a:	4b28      	ldr	r3, [pc, #160]	; (8002ecc <MX_TIM4_Init+0xa8>)
 8002e2c:	6003      	str	r3, [r0, #0]
  htim4.Init.Prescaler = 512;
 8002e2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e32:	6043      	str	r3, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e34:	2300      	movs	r3, #0
 8002e36:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 4095;
 8002e38:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002e3c:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e3e:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e40:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002e42:	f7fe fff3 	bl	8001e2c <HAL_TIM_Base_Init>
 8002e46:	bb28      	cbnz	r0, 8002e94 <MX_TIM4_Init+0x70>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e48:	a90e      	add	r1, sp, #56	; 0x38
 8002e4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e4e:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002e52:	481d      	ldr	r0, [pc, #116]	; (8002ec8 <MX_TIM4_Init+0xa4>)
 8002e54:	f7ff f8ea 	bl	800202c <HAL_TIM_ConfigClockSource>
 8002e58:	bb08      	cbnz	r0, 8002e9e <MX_TIM4_Init+0x7a>
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002e5a:	481b      	ldr	r0, [pc, #108]	; (8002ec8 <MX_TIM4_Init+0xa4>)
 8002e5c:	f7fe ffff 	bl	8001e5e <HAL_TIM_PWM_Init>
 8002e60:	bb10      	cbnz	r0, 8002ea8 <MX_TIM4_Init+0x84>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e62:	2300      	movs	r3, #0
 8002e64:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e66:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002e68:	a907      	add	r1, sp, #28
 8002e6a:	4817      	ldr	r0, [pc, #92]	; (8002ec8 <MX_TIM4_Init+0xa4>)
 8002e6c:	f7ff f9e8 	bl	8002240 <HAL_TIMEx_MasterConfigSynchronization>
 8002e70:	b9f8      	cbnz	r0, 8002eb2 <MX_TIM4_Init+0x8e>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e72:	2360      	movs	r3, #96	; 0x60
 8002e74:	9300      	str	r3, [sp, #0]
  sConfigOC.Pulse = 0;
 8002e76:	2200      	movs	r2, #0
 8002e78:	9201      	str	r2, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e7a:	9202      	str	r2, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e7c:	9204      	str	r2, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e7e:	4669      	mov	r1, sp
 8002e80:	4811      	ldr	r0, [pc, #68]	; (8002ec8 <MX_TIM4_Init+0xa4>)
 8002e82:	f7ff fa09 	bl	8002298 <HAL_TIM_PWM_ConfigChannel>
 8002e86:	b9c8      	cbnz	r0, 8002ebc <MX_TIM4_Init+0x98>
  HAL_TIM_MspPostInit(&htim4);
 8002e88:	480f      	ldr	r0, [pc, #60]	; (8002ec8 <MX_TIM4_Init+0xa4>)
 8002e8a:	f000 f951 	bl	8003130 <HAL_TIM_MspPostInit>
}
 8002e8e:	b00f      	add	sp, #60	; 0x3c
 8002e90:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8002e94:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8002e98:	480d      	ldr	r0, [pc, #52]	; (8002ed0 <MX_TIM4_Init+0xac>)
 8002e9a:	f7ff ff83 	bl	8002da4 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8002e9e:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8002ea2:	480b      	ldr	r0, [pc, #44]	; (8002ed0 <MX_TIM4_Init+0xac>)
 8002ea4:	f7ff ff7e 	bl	8002da4 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8002ea8:	f240 1167 	movw	r1, #359	; 0x167
 8002eac:	4808      	ldr	r0, [pc, #32]	; (8002ed0 <MX_TIM4_Init+0xac>)
 8002eae:	f7ff ff79 	bl	8002da4 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8002eb2:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 8002eb6:	4806      	ldr	r0, [pc, #24]	; (8002ed0 <MX_TIM4_Init+0xac>)
 8002eb8:	f7ff ff74 	bl	8002da4 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8002ebc:	f240 1177 	movw	r1, #375	; 0x177
 8002ec0:	4803      	ldr	r0, [pc, #12]	; (8002ed0 <MX_TIM4_Init+0xac>)
 8002ec2:	f7ff ff6f 	bl	8002da4 <_Error_Handler>
 8002ec6:	bf00      	nop
 8002ec8:	200000a8 	.word	0x200000a8
 8002ecc:	40000800 	.word	0x40000800
 8002ed0:	08003594 	.word	0x08003594

08002ed4 <MX_UART4_Init>:
{
 8002ed4:	b508      	push	{r3, lr}
  huart4.Instance = UART4;
 8002ed6:	4810      	ldr	r0, [pc, #64]	; (8002f18 <MX_UART4_Init+0x44>)
 8002ed8:	4b10      	ldr	r3, [pc, #64]	; (8002f1c <MX_UART4_Init+0x48>)
 8002eda:	6003      	str	r3, [r0, #0]
  huart4.Init.BaudRate = 115200;
 8002edc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002ee0:	6043      	str	r3, [r0, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002ee6:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002ee8:	6103      	str	r3, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002eea:	220c      	movs	r2, #12
 8002eec:	6142      	str	r2, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002eee:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ef0:	61c3      	str	r3, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ef2:	6203      	str	r3, [r0, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ef4:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002ef6:	f7ff feaa 	bl	8002c4e <HAL_UART_Init>
 8002efa:	b940      	cbnz	r0, 8002f0e <MX_UART4_Init+0x3a>
  HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002efc:	2200      	movs	r2, #0
 8002efe:	4611      	mov	r1, r2
 8002f00:	2034      	movs	r0, #52	; 0x34
 8002f02:	f7fd fdd1 	bl	8000aa8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002f06:	2034      	movs	r0, #52	; 0x34
 8002f08:	f7fd fdfe 	bl	8000b08 <HAL_NVIC_EnableIRQ>
 8002f0c:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 8002f0e:	21ca      	movs	r1, #202	; 0xca
 8002f10:	4803      	ldr	r0, [pc, #12]	; (8002f20 <MX_UART4_Init+0x4c>)
 8002f12:	f7ff ff47 	bl	8002da4 <_Error_Handler>
 8002f16:	bf00      	nop
 8002f18:	20000130 	.word	0x20000130
 8002f1c:	40004c00 	.word	0x40004c00
 8002f20:	08003594 	.word	0x08003594

08002f24 <SystemClock_Config>:
{
 8002f24:	b500      	push	{lr}
 8002f26:	b0b5      	sub	sp, #212	; 0xd4
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f28:	4b2a      	ldr	r3, [pc, #168]	; (8002fd4 <SystemClock_Config+0xb0>)
 8002f2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f2c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002f30:	641a      	str	r2, [r3, #64]	; 0x40
 8002f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f38:	9301      	str	r3, [sp, #4]
 8002f3a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002f3c:	4a26      	ldr	r2, [pc, #152]	; (8002fd8 <SystemClock_Config+0xb4>)
 8002f3e:	6813      	ldr	r3, [r2, #0]
 8002f40:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002f44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f48:	6013      	str	r3, [r2, #0]
 8002f4a:	6813      	ldr	r3, [r2, #0]
 8002f4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002f50:	9302      	str	r3, [sp, #8]
 8002f52:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002f54:	2302      	movs	r3, #2
 8002f56:	9328      	str	r3, [sp, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	932b      	str	r3, [sp, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8002f5c:	2310      	movs	r3, #16
 8002f5e:	932c      	str	r3, [sp, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002f60:	2300      	movs	r3, #0
 8002f62:	932e      	str	r3, [sp, #184]	; 0xb8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f64:	a828      	add	r0, sp, #160	; 0xa0
 8002f66:	f7fe f907 	bl	8001178 <HAL_RCC_OscConfig>
 8002f6a:	bb38      	cbnz	r0, 8002fbc <SystemClock_Config+0x98>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f6c:	230f      	movs	r3, #15
 8002f6e:	9323      	str	r3, [sp, #140]	; 0x8c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002f70:	2100      	movs	r1, #0
 8002f72:	9124      	str	r1, [sp, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f74:	9125      	str	r1, [sp, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002f76:	9126      	str	r1, [sp, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f78:	9127      	str	r1, [sp, #156]	; 0x9c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002f7a:	a823      	add	r0, sp, #140	; 0x8c
 8002f7c:	f7fe fb38 	bl	80015f0 <HAL_RCC_ClockConfig>
 8002f80:	bb00      	cbnz	r0, 8002fc4 <SystemClock_Config+0xa0>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002f82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f86:	9303      	str	r3, [sp, #12]
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f8c:	a803      	add	r0, sp, #12
 8002f8e:	f7fe fc07 	bl	80017a0 <HAL_RCCEx_PeriphCLKConfig>
 8002f92:	b9d8      	cbnz	r0, 8002fcc <SystemClock_Config+0xa8>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002f94:	f7fe fbde 	bl	8001754 <HAL_RCC_GetHCLKFreq>
 8002f98:	4b10      	ldr	r3, [pc, #64]	; (8002fdc <SystemClock_Config+0xb8>)
 8002f9a:	fba3 3000 	umull	r3, r0, r3, r0
 8002f9e:	0980      	lsrs	r0, r0, #6
 8002fa0:	f7fd fdbe 	bl	8000b20 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002fa4:	2004      	movs	r0, #4
 8002fa6:	f7fd fdd1 	bl	8000b4c <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002faa:	2200      	movs	r2, #0
 8002fac:	4611      	mov	r1, r2
 8002fae:	f04f 30ff 	mov.w	r0, #4294967295
 8002fb2:	f7fd fd79 	bl	8000aa8 <HAL_NVIC_SetPriority>
}
 8002fb6:	b035      	add	sp, #212	; 0xd4
 8002fb8:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8002fbc:	2196      	movs	r1, #150	; 0x96
 8002fbe:	4808      	ldr	r0, [pc, #32]	; (8002fe0 <SystemClock_Config+0xbc>)
 8002fc0:	f7ff fef0 	bl	8002da4 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8002fc4:	21a4      	movs	r1, #164	; 0xa4
 8002fc6:	4806      	ldr	r0, [pc, #24]	; (8002fe0 <SystemClock_Config+0xbc>)
 8002fc8:	f7ff feec 	bl	8002da4 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8002fcc:	21ab      	movs	r1, #171	; 0xab
 8002fce:	4804      	ldr	r0, [pc, #16]	; (8002fe0 <SystemClock_Config+0xbc>)
 8002fd0:	f7ff fee8 	bl	8002da4 <_Error_Handler>
 8002fd4:	40023800 	.word	0x40023800
 8002fd8:	40007000 	.word	0x40007000
 8002fdc:	10624dd3 	.word	0x10624dd3
 8002fe0:	08003594 	.word	0x08003594

08002fe4 <main>:
{
 8002fe4:	b508      	push	{r3, lr}
  HAL_Init();
 8002fe6:	f7fd fac9 	bl	800057c <HAL_Init>
  SystemClock_Config();
 8002fea:	f7ff ff9b 	bl	8002f24 <SystemClock_Config>
  MX_GPIO_Init();
 8002fee:	f7ff fe63 	bl	8002cb8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002ff2:	f7ff fe8b 	bl	8002d0c <MX_DMA_Init>
  MX_ADC1_Init();
 8002ff6:	f7ff fed7 	bl	8002da8 <MX_ADC1_Init>
  MX_TIM4_Init();
 8002ffa:	f7ff ff13 	bl	8002e24 <MX_TIM4_Init>
  MX_UART4_Init();
 8002ffe:	f7ff ff69 	bl	8002ed4 <MX_UART4_Init>
  uart_debug_init(&huart4);
 8003002:	4807      	ldr	r0, [pc, #28]	; (8003020 <main+0x3c>)
 8003004:	f000 f996 	bl	8003334 <uart_debug_init>
  uart_debug_send_line("UART ALIVE Butts butts!!\n");
 8003008:	4806      	ldr	r0, [pc, #24]	; (8003024 <main+0x40>)
 800300a:	f000 fa13 	bl	8003434 <uart_debug_send_line>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800300e:	2100      	movs	r1, #0
 8003010:	4805      	ldr	r0, [pc, #20]	; (8003028 <main+0x44>)
 8003012:	f7ff f8a5 	bl	8002160 <HAL_TIM_PWM_Start>
	  print_timer_count(&htim4);
 8003016:	4804      	ldr	r0, [pc, #16]	; (8003028 <main+0x44>)
 8003018:	f7ff fe9a 	bl	8002d50 <print_timer_count>
 800301c:	e7fb      	b.n	8003016 <main+0x32>
 800301e:	bf00      	nop
 8003020:	20000130 	.word	0x20000130
 8003024:	080035a4 	.word	0x080035a4
 8003028:	200000a8 	.word	0x200000a8

0800302c <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM4)
 800302c:	6802      	ldr	r2, [r0, #0]
 800302e:	4b09      	ldr	r3, [pc, #36]	; (8003054 <HAL_TIM_Base_MspInit+0x28>)
 8003030:	429a      	cmp	r2, r3
 8003032:	d000      	beq.n	8003036 <HAL_TIM_Base_MspInit+0xa>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003034:	4770      	bx	lr
{
 8003036:	b082      	sub	sp, #8
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003038:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 800303c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800303e:	f042 0204 	orr.w	r2, r2, #4
 8003042:	641a      	str	r2, [r3, #64]	; 0x40
 8003044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003046:	f003 0304 	and.w	r3, r3, #4
 800304a:	9301      	str	r3, [sp, #4]
 800304c:	9b01      	ldr	r3, [sp, #4]
}
 800304e:	b002      	add	sp, #8
 8003050:	e7f0      	b.n	8003034 <HAL_TIM_Base_MspInit+0x8>
 8003052:	bf00      	nop
 8003054:	40000800 	.word	0x40000800

08003058 <HAL_ADC_MspInit>:
}
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8003058:	6802      	ldr	r2, [r0, #0]
 800305a:	4b0f      	ldr	r3, [pc, #60]	; (8003098 <HAL_ADC_MspInit+0x40>)
 800305c:	429a      	cmp	r2, r3
 800305e:	d000      	beq.n	8003062 <HAL_ADC_MspInit+0xa>
 8003060:	4770      	bx	lr
{
 8003062:	b500      	push	{lr}
 8003064:	b087      	sub	sp, #28
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003066:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 800306a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800306c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003070:	645a      	str	r2, [r3, #68]	; 0x44
 8003072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003078:	9300      	str	r3, [sp, #0]
 800307a:	9b00      	ldr	r3, [sp, #0]

    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800307c:	2301      	movs	r3, #1
 800307e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003080:	2303      	movs	r3, #3
 8003082:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003084:	2300      	movs	r3, #0
 8003086:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003088:	a901      	add	r1, sp, #4
 800308a:	4804      	ldr	r0, [pc, #16]	; (800309c <HAL_ADC_MspInit+0x44>)
 800308c:	f7fd ff92 	bl	8000fb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003090:	b007      	add	sp, #28
 8003092:	f85d fb04 	ldr.w	pc, [sp], #4
 8003096:	bf00      	nop
 8003098:	40012000 	.word	0x40012000
 800309c:	40020000 	.word	0x40020000

080030a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030a0:	b500      	push	{lr}
 80030a2:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80030a4:	4b21      	ldr	r3, [pc, #132]	; (800312c <HAL_MspInit+0x8c>)
 80030a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030a8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80030ac:	641a      	str	r2, [r3, #64]	; 0x40
 80030ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030b0:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80030b4:	9200      	str	r2, [sp, #0]
 80030b6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030be:	645a      	str	r2, [r3, #68]	; 0x44
 80030c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030c6:	9301      	str	r3, [sp, #4]
 80030c8:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030ca:	2003      	movs	r0, #3
 80030cc:	f7fd fcda 	bl	8000a84 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80030d0:	2200      	movs	r2, #0
 80030d2:	4611      	mov	r1, r2
 80030d4:	f06f 000b 	mvn.w	r0, #11
 80030d8:	f7fd fce6 	bl	8000aa8 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80030dc:	2200      	movs	r2, #0
 80030de:	4611      	mov	r1, r2
 80030e0:	f06f 000a 	mvn.w	r0, #10
 80030e4:	f7fd fce0 	bl	8000aa8 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80030e8:	2200      	movs	r2, #0
 80030ea:	4611      	mov	r1, r2
 80030ec:	f06f 0009 	mvn.w	r0, #9
 80030f0:	f7fd fcda 	bl	8000aa8 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80030f4:	2200      	movs	r2, #0
 80030f6:	4611      	mov	r1, r2
 80030f8:	f06f 0004 	mvn.w	r0, #4
 80030fc:	f7fd fcd4 	bl	8000aa8 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8003100:	2200      	movs	r2, #0
 8003102:	4611      	mov	r1, r2
 8003104:	f06f 0003 	mvn.w	r0, #3
 8003108:	f7fd fcce 	bl	8000aa8 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800310c:	2200      	movs	r2, #0
 800310e:	4611      	mov	r1, r2
 8003110:	f06f 0001 	mvn.w	r0, #1
 8003114:	f7fd fcc8 	bl	8000aa8 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003118:	2200      	movs	r2, #0
 800311a:	4611      	mov	r1, r2
 800311c:	f04f 30ff 	mov.w	r0, #4294967295
 8003120:	f7fd fcc2 	bl	8000aa8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003124:	b003      	add	sp, #12
 8003126:	f85d fb04 	ldr.w	pc, [sp], #4
 800312a:	bf00      	nop
 800312c:	40023800 	.word	0x40023800

08003130 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM4)
 8003130:	6802      	ldr	r2, [r0, #0]
 8003132:	4b0b      	ldr	r3, [pc, #44]	; (8003160 <HAL_TIM_MspPostInit+0x30>)
 8003134:	429a      	cmp	r2, r3
 8003136:	d000      	beq.n	800313a <HAL_TIM_MspPostInit+0xa>
 8003138:	4770      	bx	lr
{
 800313a:	b500      	push	{lr}
 800313c:	b087      	sub	sp, #28
  /* USER CODE END TIM4_MspPostInit 0 */

    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800313e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003142:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003144:	2302      	movs	r3, #2
 8003146:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003148:	2200      	movs	r2, #0
 800314a:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800314c:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800314e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003150:	a901      	add	r1, sp, #4
 8003152:	4804      	ldr	r0, [pc, #16]	; (8003164 <HAL_TIM_MspPostInit+0x34>)
 8003154:	f7fd ff2e 	bl	8000fb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003158:	b007      	add	sp, #28
 800315a:	f85d fb04 	ldr.w	pc, [sp], #4
 800315e:	bf00      	nop
 8003160:	40000800 	.word	0x40000800
 8003164:	40020c00 	.word	0x40020c00

08003168 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==UART4)
 8003168:	6802      	ldr	r2, [r0, #0]
 800316a:	4b2c      	ldr	r3, [pc, #176]	; (800321c <HAL_UART_MspInit+0xb4>)
 800316c:	429a      	cmp	r2, r3
 800316e:	d000      	beq.n	8003172 <HAL_UART_MspInit+0xa>
 8003170:	4770      	bx	lr
{
 8003172:	b530      	push	{r4, r5, lr}
 8003174:	b087      	sub	sp, #28
 8003176:	4604      	mov	r4, r0
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003178:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 800317c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800317e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003182:	641a      	str	r2, [r3, #64]	; 0x40
 8003184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003186:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800318a:	9300      	str	r3, [sp, #0]
 800318c:	9b00      	ldr	r3, [sp, #0]
  
    /**UART4 GPIO Configuration    
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800318e:	2303      	movs	r3, #3
 8003190:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003192:	2202      	movs	r2, #2
 8003194:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003196:	2500      	movs	r5, #0
 8003198:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800319a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800319c:	2308      	movs	r3, #8
 800319e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031a0:	a901      	add	r1, sp, #4
 80031a2:	481f      	ldr	r0, [pc, #124]	; (8003220 <HAL_UART_MspInit+0xb8>)
 80031a4:	f7fd ff06 	bl	8000fb4 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 80031a8:	481e      	ldr	r0, [pc, #120]	; (8003224 <HAL_UART_MspInit+0xbc>)
 80031aa:	4b1f      	ldr	r3, [pc, #124]	; (8003228 <HAL_UART_MspInit+0xc0>)
 80031ac:	6003      	str	r3, [r0, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 80031ae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80031b2:	6043      	str	r3, [r0, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80031b4:	2340      	movs	r3, #64	; 0x40
 80031b6:	6083      	str	r3, [r0, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031b8:	60c5      	str	r5, [r0, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80031ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031be:	6103      	str	r3, [r0, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80031c0:	6145      	str	r5, [r0, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80031c2:	6185      	str	r5, [r0, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 80031c4:	61c5      	str	r5, [r0, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80031c6:	6205      	str	r5, [r0, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80031c8:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80031ca:	f7fd fd4f 	bl	8000c6c <HAL_DMA_Init>
 80031ce:	b9d8      	cbnz	r0, 8003208 <HAL_UART_MspInit+0xa0>
    {
      _Error_Handler(__FILE__, __LINE__);
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 80031d0:	4b14      	ldr	r3, [pc, #80]	; (8003224 <HAL_UART_MspInit+0xbc>)
 80031d2:	6623      	str	r3, [r4, #96]	; 0x60
 80031d4:	639c      	str	r4, [r3, #56]	; 0x38

    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80031d6:	4815      	ldr	r0, [pc, #84]	; (800322c <HAL_UART_MspInit+0xc4>)
 80031d8:	4b15      	ldr	r3, [pc, #84]	; (8003230 <HAL_UART_MspInit+0xc8>)
 80031da:	6003      	str	r3, [r0, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80031dc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80031e0:	6043      	str	r3, [r0, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031e2:	2300      	movs	r3, #0
 80031e4:	6083      	str	r3, [r0, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031e6:	60c3      	str	r3, [r0, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80031e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031ec:	6102      	str	r2, [r0, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80031ee:	6143      	str	r3, [r0, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80031f0:	6183      	str	r3, [r0, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80031f2:	61c3      	str	r3, [r0, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80031f4:	6203      	str	r3, [r0, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80031f6:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80031f8:	f7fd fd38 	bl	8000c6c <HAL_DMA_Init>
 80031fc:	b948      	cbnz	r0, 8003212 <HAL_UART_MspInit+0xaa>
    {
      _Error_Handler(__FILE__, __LINE__);
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80031fe:	4b0b      	ldr	r3, [pc, #44]	; (800322c <HAL_UART_MspInit+0xc4>)
 8003200:	6663      	str	r3, [r4, #100]	; 0x64
 8003202:	639c      	str	r4, [r3, #56]	; 0x38
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8003204:	b007      	add	sp, #28
 8003206:	bd30      	pop	{r4, r5, pc}
      _Error_Handler(__FILE__, __LINE__);
 8003208:	21e7      	movs	r1, #231	; 0xe7
 800320a:	480a      	ldr	r0, [pc, #40]	; (8003234 <HAL_UART_MspInit+0xcc>)
 800320c:	f7ff fdca 	bl	8002da4 <_Error_Handler>
 8003210:	e7de      	b.n	80031d0 <HAL_UART_MspInit+0x68>
      _Error_Handler(__FILE__, __LINE__);
 8003212:	21f9      	movs	r1, #249	; 0xf9
 8003214:	4807      	ldr	r0, [pc, #28]	; (8003234 <HAL_UART_MspInit+0xcc>)
 8003216:	f7ff fdc5 	bl	8002da4 <_Error_Handler>
 800321a:	e7f0      	b.n	80031fe <HAL_UART_MspInit+0x96>
 800321c:	40004c00 	.word	0x40004c00
 8003220:	40020000 	.word	0x40020000
 8003224:	200001a0 	.word	0x200001a0
 8003228:	40026070 	.word	0x40026070
 800322c:	20000048 	.word	0x20000048
 8003230:	40026040 	.word	0x40026040
 8003234:	080035d0 	.word	0x080035d0

08003238 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8003238:	4770      	bx	lr

0800323a <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800323a:	e7fe      	b.n	800323a <HardFault_Handler>

0800323c <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 800323c:	e7fe      	b.n	800323c <MemManage_Handler>

0800323e <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800323e:	e7fe      	b.n	800323e <BusFault_Handler>

08003240 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8003240:	e7fe      	b.n	8003240 <UsageFault_Handler>

08003242 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8003242:	4770      	bx	lr

08003244 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8003244:	4770      	bx	lr

08003246 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8003246:	4770      	bx	lr

08003248 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003248:	b508      	push	{r3, lr}

  HAL_IncTick();
 800324a:	f7fd f9a3 	bl	8000594 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 800324e:	f7fd fc8e 	bl	8000b6e <HAL_SYSTICK_IRQHandler>
 8003252:	bd08      	pop	{r3, pc}

08003254 <DMA1_Stream2_IRQHandler>:

/**
* @brief This function handles DMA1 stream2 global interrupt.
*/
void DMA1_Stream2_IRQHandler(void)
{
 8003254:	b508      	push	{r3, lr}

  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8003256:	4802      	ldr	r0, [pc, #8]	; (8003260 <DMA1_Stream2_IRQHandler+0xc>)
 8003258:	f7fd fdbe 	bl	8000dd8 <HAL_DMA_IRQHandler>
 800325c:	bd08      	pop	{r3, pc}
 800325e:	bf00      	nop
 8003260:	20000048 	.word	0x20000048

08003264 <UART4_IRQHandler>:

}

void UART4_IRQHandler(void)
{
 8003264:	b508      	push	{r3, lr}
	HAL_UART_IRQHandler(&huart4);
 8003266:	4802      	ldr	r0, [pc, #8]	; (8003270 <UART4_IRQHandler+0xc>)
 8003268:	f7ff fa12 	bl	8002690 <HAL_UART_IRQHandler>
 800326c:	bd08      	pop	{r3, pc}
 800326e:	bf00      	nop
 8003270:	20000130 	.word	0x20000130

08003274 <DMA1_Stream4_IRQHandler>:
}
/**
* @brief This function handles DMA1 stream4 global interrupt.
*/
void DMA1_Stream4_IRQHandler(void)
{
 8003274:	b508      	push	{r3, lr}

  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8003276:	4802      	ldr	r0, [pc, #8]	; (8003280 <DMA1_Stream4_IRQHandler+0xc>)
 8003278:	f7fd fdae 	bl	8000dd8 <HAL_DMA_IRQHandler>
 800327c:	bd08      	pop	{r3, pc}
 800327e:	bf00      	nop
 8003280:	200001a0 	.word	0x200001a0

08003284 <ADC_IRQHandler>:


// the ADC IRQ handler that could be used for interrupt style adc polling
// Tim added this because MX cube doesn't assume you we want to do interrupt style ADC conversions
void ADC_IRQHandler(void)
{
 8003284:	b508      	push	{r3, lr}
	HAL_ADC_IRQHandler(&hadc1);
 8003286:	4802      	ldr	r0, [pc, #8]	; (8003290 <ADC_IRQHandler+0xc>)
 8003288:	f7fd fa83 	bl	8000792 <HAL_ADC_IRQHandler>
 800328c:	bd08      	pop	{r3, pc}
 800328e:	bf00      	nop
 8003290:	200000e8 	.word	0x200000e8

08003294 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003294:	b410      	push	{r4}
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003296:	4a0f      	ldr	r2, [pc, #60]	; (80032d4 <SystemInit+0x40>)
 8003298:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800329c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80032a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80032a4:	4b0c      	ldr	r3, [pc, #48]	; (80032d8 <SystemInit+0x44>)
 80032a6:	6819      	ldr	r1, [r3, #0]
 80032a8:	f041 0101 	orr.w	r1, r1, #1
 80032ac:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80032ae:	2000      	movs	r0, #0
 80032b0:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80032b2:	681c      	ldr	r4, [r3, #0]
 80032b4:	4909      	ldr	r1, [pc, #36]	; (80032dc <SystemInit+0x48>)
 80032b6:	4021      	ands	r1, r4
 80032b8:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80032ba:	4909      	ldr	r1, [pc, #36]	; (80032e0 <SystemInit+0x4c>)
 80032bc:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80032be:	6819      	ldr	r1, [r3, #0]
 80032c0:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80032c4:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80032c6:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80032c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80032cc:	6093      	str	r3, [r2, #8]
#endif
}
 80032ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80032d2:	4770      	bx	lr
 80032d4:	e000ed00 	.word	0xe000ed00
 80032d8:	40023800 	.word	0x40023800
 80032dc:	fef6ffff 	.word	0xfef6ffff
 80032e0:	24003010 	.word	0x24003010

080032e4 <uart_debug_transmit>:
    uart_debug_add_to_buffer(&in, 1);
}

/* internal helper function to handle the actual HAL call*/
void uart_debug_transmit(void) {
	if(debugUART != NULL)
 80032e4:	4b0d      	ldr	r3, [pc, #52]	; (800331c <uart_debug_transmit+0x38>)
 80032e6:	6818      	ldr	r0, [r3, #0]
 80032e8:	b1b8      	cbz	r0, 800331a <uart_debug_transmit+0x36>
void uart_debug_transmit(void) {
 80032ea:	b510      	push	{r4, lr}
	{
		uint32_t head = uart_debug_buffer_head;
 80032ec:	4b0c      	ldr	r3, [pc, #48]	; (8003320 <uart_debug_transmit+0x3c>)
 80032ee:	681c      	ldr	r4, [r3, #0]
		if(head < uart_debug_buffer_tail) {
 80032f0:	4b0c      	ldr	r3, [pc, #48]	; (8003324 <uart_debug_transmit+0x40>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	429c      	cmp	r4, r3
 80032f6:	d201      	bcs.n	80032fc <uart_debug_transmit+0x18>
			/* we've wrapped around
			 * head is at the end and we'll have to do another HAL call later
			 */
			head = DEBUG_UART_TRANSMIT_BUFFER_LEN;
 80032f8:	f44f 5400 	mov.w	r4, #8192	; 0x2000
		}
		uint32_t len = head - uart_debug_buffer_tail;
 80032fc:	4b09      	ldr	r3, [pc, #36]	; (8003324 <uart_debug_transmit+0x40>)
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	1aa2      	subs	r2, r4, r2
            alignedAddr = (uint32_t)(uart_debug_buffer + uart_debug_buffer_tail) & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, len);
#endif


		HAL_UART_Transmit_DMA(debugUART, uart_debug_buffer + uart_debug_buffer_tail, len);
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	b292      	uxth	r2, r2
 8003306:	4908      	ldr	r1, [pc, #32]	; (8003328 <uart_debug_transmit+0x44>)
 8003308:	4419      	add	r1, r3
 800330a:	f7ff f8ad 	bl	8002468 <HAL_UART_Transmit_DMA>
		//HAL_UART_Transmit(debugUART, uart_debug_buffer + uart_debug_buffer_tail, len, 1000); //try blocking IO for now
		//HAL_UART_Transmit_IT(debugUART, uart_debug_buffer + uart_debug_buffer_tail, len);
		uart_debug_busy_flag = 1;
 800330e:	2201      	movs	r2, #1
 8003310:	4b06      	ldr	r3, [pc, #24]	; (800332c <uart_debug_transmit+0x48>)
 8003312:	701a      	strb	r2, [r3, #0]
		/*update the transmit head*/
		uart_debug_buffer_transmit_head = head;
 8003314:	4b06      	ldr	r3, [pc, #24]	; (8003330 <uart_debug_transmit+0x4c>)
 8003316:	601c      	str	r4, [r3, #0]
 8003318:	bd10      	pop	{r4, pc}
 800331a:	4770      	bx	lr
 800331c:	20000034 	.word	0x20000034
 8003320:	20000038 	.word	0x20000038
 8003324:	2000003c 	.word	0x2000003c
 8003328:	20000234 	.word	0x20000234
 800332c:	20000010 	.word	0x20000010
 8003330:	20000040 	.word	0x20000040

08003334 <uart_debug_init>:
    if(NULL == uart) {
 8003334:	b128      	cbz	r0, 8003342 <uart_debug_init+0xe>
    debugUART = uart;
 8003336:	4a04      	ldr	r2, [pc, #16]	; (8003348 <uart_debug_init+0x14>)
 8003338:	6010      	str	r0, [r2, #0]
    uart_debug_busy_flag = 0;
 800333a:	2000      	movs	r0, #0
 800333c:	4b03      	ldr	r3, [pc, #12]	; (800334c <uart_debug_init+0x18>)
 800333e:	7018      	strb	r0, [r3, #0]
    return 0;
 8003340:	4770      	bx	lr
        return -1;
 8003342:	f04f 30ff 	mov.w	r0, #4294967295
}
 8003346:	4770      	bx	lr
 8003348:	20000034 	.word	0x20000034
 800334c:	20000010 	.word	0x20000010

08003350 <uart_debug_add_to_buffer>:
uint32_t uart_debug_add_to_buffer(uint8_t* in, uint32_t len) {
 8003350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003354:	4606      	mov	r6, r0
 8003356:	460c      	mov	r4, r1
    if(len > uart_debug_buffer_remaining) {
 8003358:	4b1d      	ldr	r3, [pc, #116]	; (80033d0 <uart_debug_add_to_buffer+0x80>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	428b      	cmp	r3, r1
 800335e:	d201      	bcs.n	8003364 <uart_debug_add_to_buffer+0x14>
        len = uart_debug_buffer_remaining; /*toss bit that won't fit*/
 8003360:	4b1b      	ldr	r3, [pc, #108]	; (80033d0 <uart_debug_add_to_buffer+0x80>)
 8003362:	681c      	ldr	r4, [r3, #0]
    uint32_t remainingLen = (len + uart_debug_buffer_head);
 8003364:	4b1b      	ldr	r3, [pc, #108]	; (80033d4 <uart_debug_add_to_buffer+0x84>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4423      	add	r3, r4
    if(DEBUG_UART_TRANSMIT_BUFFER_LEN > remainingLen) {
 800336a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800336e:	d215      	bcs.n	800339c <uart_debug_add_to_buffer+0x4c>
        memcpy(uart_debug_buffer + uart_debug_buffer_head, in, len);
 8003370:	4d18      	ldr	r5, [pc, #96]	; (80033d4 <uart_debug_add_to_buffer+0x84>)
 8003372:	682b      	ldr	r3, [r5, #0]
 8003374:	4622      	mov	r2, r4
 8003376:	4631      	mov	r1, r6
 8003378:	4817      	ldr	r0, [pc, #92]	; (80033d8 <uart_debug_add_to_buffer+0x88>)
 800337a:	4418      	add	r0, r3
 800337c:	f000 f8ee 	bl	800355c <memcpy>
        uart_debug_buffer_head += len;
 8003380:	682b      	ldr	r3, [r5, #0]
 8003382:	4423      	add	r3, r4
 8003384:	602b      	str	r3, [r5, #0]
    uart_debug_buffer_remaining -= len; /* update this*/
 8003386:	4a12      	ldr	r2, [pc, #72]	; (80033d0 <uart_debug_add_to_buffer+0x80>)
 8003388:	6813      	ldr	r3, [r2, #0]
 800338a:	1b1b      	subs	r3, r3, r4
 800338c:	6013      	str	r3, [r2, #0]
    if(!uart_debug_busy_flag) {
 800338e:	4b13      	ldr	r3, [pc, #76]	; (80033dc <uart_debug_add_to_buffer+0x8c>)
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	b25b      	sxtb	r3, r3
 8003394:	b1c3      	cbz	r3, 80033c8 <uart_debug_add_to_buffer+0x78>
}
 8003396:	4620      	mov	r0, r4
 8003398:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        uint32_t endLen = DEBUG_UART_TRANSMIT_BUFFER_LEN - uart_debug_buffer_head;
 800339c:	4f0d      	ldr	r7, [pc, #52]	; (80033d4 <uart_debug_add_to_buffer+0x84>)
 800339e:	683d      	ldr	r5, [r7, #0]
 80033a0:	f5c5 5500 	rsb	r5, r5, #8192	; 0x2000
        memcpy(uart_debug_buffer + uart_debug_buffer_head, in, endLen);
 80033a4:	6838      	ldr	r0, [r7, #0]
 80033a6:	f8df 9030 	ldr.w	r9, [pc, #48]	; 80033d8 <uart_debug_add_to_buffer+0x88>
 80033aa:	462a      	mov	r2, r5
 80033ac:	4631      	mov	r1, r6
 80033ae:	4448      	add	r0, r9
 80033b0:	f000 f8d4 	bl	800355c <memcpy>
        uint32_t startLen = len - endLen; /*what goes at the start of the buffer*/
 80033b4:	eba4 0805 	sub.w	r8, r4, r5
        memcpy(uart_debug_buffer, in + endLen, startLen);
 80033b8:	4642      	mov	r2, r8
 80033ba:	1971      	adds	r1, r6, r5
 80033bc:	4648      	mov	r0, r9
 80033be:	f000 f8cd 	bl	800355c <memcpy>
        uart_debug_buffer_head = startLen;
 80033c2:	f8c7 8000 	str.w	r8, [r7]
 80033c6:	e7de      	b.n	8003386 <uart_debug_add_to_buffer+0x36>
        uart_debug_transmit(); /* start things*/
 80033c8:	f7ff ff8c 	bl	80032e4 <uart_debug_transmit>
 80033cc:	e7e3      	b.n	8003396 <uart_debug_add_to_buffer+0x46>
 80033ce:	bf00      	nop
 80033d0:	2000000c 	.word	0x2000000c
 80033d4:	20000038 	.word	0x20000038
 80033d8:	20000234 	.word	0x20000234
 80033dc:	20000010 	.word	0x20000010

080033e0 <uart_debug_print_uint32>:
void uart_debug_print_uint32(uint32_t val) {
 80033e0:	b510      	push	{r4, lr}
    uint32_t pos = DEBUG_UART_TEMP_BUFFER_LEN;
 80033e2:	2231      	movs	r2, #49	; 0x31
        uart_debug_buffer_temp[--pos] = (val % 10) + '0';
 80033e4:	3a01      	subs	r2, #1
 80033e6:	4b0b      	ldr	r3, [pc, #44]	; (8003414 <uart_debug_print_uint32+0x34>)
 80033e8:	fba3 1300 	umull	r1, r3, r3, r0
 80033ec:	08db      	lsrs	r3, r3, #3
 80033ee:	4619      	mov	r1, r3
 80033f0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80033f4:	005c      	lsls	r4, r3, #1
 80033f6:	1b03      	subs	r3, r0, r4
 80033f8:	3330      	adds	r3, #48	; 0x30
 80033fa:	4807      	ldr	r0, [pc, #28]	; (8003418 <uart_debug_print_uint32+0x38>)
 80033fc:	5483      	strb	r3, [r0, r2]
        val /= 10;
 80033fe:	4608      	mov	r0, r1
    } while(val);
 8003400:	2900      	cmp	r1, #0
 8003402:	d1ef      	bne.n	80033e4 <uart_debug_print_uint32+0x4>
    uart_debug_add_to_buffer(uart_debug_buffer_temp + pos, DEBUG_UART_TEMP_BUFFER_LEN - pos);
 8003404:	f1c2 0131 	rsb	r1, r2, #49	; 0x31
 8003408:	4803      	ldr	r0, [pc, #12]	; (8003418 <uart_debug_print_uint32+0x38>)
 800340a:	4410      	add	r0, r2
 800340c:	f7ff ffa0 	bl	8003350 <uart_debug_add_to_buffer>
 8003410:	bd10      	pop	{r4, pc}
 8003412:	bf00      	nop
 8003414:	cccccccd 	.word	0xcccccccd
 8003418:	20000200 	.word	0x20000200

0800341c <uart_debug_newline>:
void uart_debug_newline(void) {
 800341c:	b500      	push	{lr}
 800341e:	b083      	sub	sp, #12
    uint8_t newlineChar = '\n';
 8003420:	a802      	add	r0, sp, #8
 8003422:	230a      	movs	r3, #10
 8003424:	f800 3d01 	strb.w	r3, [r0, #-1]!
    uart_debug_add_to_buffer(&newlineChar, 1);
 8003428:	2101      	movs	r1, #1
 800342a:	f7ff ff91 	bl	8003350 <uart_debug_add_to_buffer>
}
 800342e:	b003      	add	sp, #12
 8003430:	f85d fb04 	ldr.w	pc, [sp], #4

08003434 <uart_debug_send_line>:
void uart_debug_send_line(char* str) {
 8003434:	b508      	push	{r3, lr}
    uint32_t len = 0;
 8003436:	2100      	movs	r1, #0
    for(; len < DEBUG_UART_TRANSMIT_BUFFER_LEN; ++len) {
 8003438:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800343c:	d204      	bcs.n	8003448 <uart_debug_send_line+0x14>
        if(str[len] == '\n') {
 800343e:	5c43      	ldrb	r3, [r0, r1]
 8003440:	2b0a      	cmp	r3, #10
 8003442:	d001      	beq.n	8003448 <uart_debug_send_line+0x14>
    for(; len < DEBUG_UART_TRANSMIT_BUFFER_LEN; ++len) {
 8003444:	3101      	adds	r1, #1
 8003446:	e7f7      	b.n	8003438 <uart_debug_send_line+0x4>
    uart_debug_add_to_buffer((uint8_t*) str, len + 1); /* to account for the newline char*/
 8003448:	3101      	adds	r1, #1
 800344a:	f7ff ff81 	bl	8003350 <uart_debug_add_to_buffer>
 800344e:	bd08      	pop	{r3, pc}

08003450 <uart_debug_send_string>:
void uart_debug_send_string(char* str) {
 8003450:	b508      	push	{r3, lr}
    uint32_t len = 0;
 8003452:	2100      	movs	r1, #0
    for(; len < DEBUG_UART_TRANSMIT_BUFFER_LEN; ++len) {
 8003454:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8003458:	d203      	bcs.n	8003462 <uart_debug_send_string+0x12>
        if(str[len] == '\0') {
 800345a:	5c43      	ldrb	r3, [r0, r1]
 800345c:	b10b      	cbz	r3, 8003462 <uart_debug_send_string+0x12>
    for(; len < DEBUG_UART_TRANSMIT_BUFFER_LEN; ++len) {
 800345e:	3101      	adds	r1, #1
 8003460:	e7f8      	b.n	8003454 <uart_debug_send_string+0x4>
    uart_debug_add_to_buffer((uint8_t*) str, len);
 8003462:	f7ff ff75 	bl	8003350 <uart_debug_add_to_buffer>
 8003466:	bd08      	pop	{r3, pc}

08003468 <uart_debug_callback>:


/*void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart) {
 * moved the callback to main, that callback then calls this function
 * */
void uart_debug_callback(void) {
 8003468:	b508      	push	{r3, lr}
    uart_debug_buffer_remaining += (uart_debug_buffer_transmit_head - uart_debug_buffer_tail);
 800346a:	4a10      	ldr	r2, [pc, #64]	; (80034ac <uart_debug_callback+0x44>)
 800346c:	6813      	ldr	r3, [r2, #0]
 800346e:	4910      	ldr	r1, [pc, #64]	; (80034b0 <uart_debug_callback+0x48>)
 8003470:	6809      	ldr	r1, [r1, #0]
 8003472:	1a5b      	subs	r3, r3, r1
 8003474:	490f      	ldr	r1, [pc, #60]	; (80034b4 <uart_debug_callback+0x4c>)
 8003476:	6808      	ldr	r0, [r1, #0]
 8003478:	4403      	add	r3, r0
 800347a:	600b      	str	r3, [r1, #0]
    if(DEBUG_UART_TRANSMIT_BUFFER_LEN <= uart_debug_buffer_transmit_head) {
 800347c:	6813      	ldr	r3, [r2, #0]
 800347e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003482:	d302      	bcc.n	800348a <uart_debug_callback+0x22>
        uart_debug_buffer_transmit_head = 0; //wrap this
 8003484:	2200      	movs	r2, #0
 8003486:	4b09      	ldr	r3, [pc, #36]	; (80034ac <uart_debug_callback+0x44>)
 8003488:	601a      	str	r2, [r3, #0]
    }
    uart_debug_buffer_tail = uart_debug_buffer_transmit_head; /*update tail*/
 800348a:	4b08      	ldr	r3, [pc, #32]	; (80034ac <uart_debug_callback+0x44>)
 800348c:	6819      	ldr	r1, [r3, #0]
 800348e:	4a08      	ldr	r2, [pc, #32]	; (80034b0 <uart_debug_callback+0x48>)
 8003490:	6011      	str	r1, [r2, #0]
    if(uart_debug_buffer_head == uart_debug_buffer_transmit_head) {
 8003492:	4a09      	ldr	r2, [pc, #36]	; (80034b8 <uart_debug_callback+0x50>)
 8003494:	6812      	ldr	r2, [r2, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	429a      	cmp	r2, r3
 800349a:	d002      	beq.n	80034a2 <uart_debug_callback+0x3a>
        /*nothing new has been added, so nothing to do!*/
        uart_debug_busy_flag = 0;
    } else {
        uart_debug_transmit();
 800349c:	f7ff ff22 	bl	80032e4 <uart_debug_transmit>
 80034a0:	bd08      	pop	{r3, pc}
        uart_debug_busy_flag = 0;
 80034a2:	2200      	movs	r2, #0
 80034a4:	4b05      	ldr	r3, [pc, #20]	; (80034bc <uart_debug_callback+0x54>)
 80034a6:	701a      	strb	r2, [r3, #0]
 80034a8:	bd08      	pop	{r3, pc}
 80034aa:	bf00      	nop
 80034ac:	20000040 	.word	0x20000040
 80034b0:	2000003c 	.word	0x2000003c
 80034b4:	2000000c 	.word	0x2000000c
 80034b8:	20000038 	.word	0x20000038
 80034bc:	20000010 	.word	0x20000010

080034c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80034c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80034f8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80034c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80034c6:	e003      	b.n	80034d0 <LoopCopyDataInit>

080034c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80034c8:	4b0c      	ldr	r3, [pc, #48]	; (80034fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80034ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80034cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80034ce:	3104      	adds	r1, #4

080034d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80034d0:	480b      	ldr	r0, [pc, #44]	; (8003500 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80034d2:	4b0c      	ldr	r3, [pc, #48]	; (8003504 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80034d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80034d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80034d8:	d3f6      	bcc.n	80034c8 <CopyDataInit>
  ldr  r2, =_sbss
 80034da:	4a0b      	ldr	r2, [pc, #44]	; (8003508 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80034dc:	e002      	b.n	80034e4 <LoopFillZerobss>

080034de <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80034de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80034e0:	f842 3b04 	str.w	r3, [r2], #4

080034e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80034e4:	4b09      	ldr	r3, [pc, #36]	; (800350c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80034e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80034e8:	d3f9      	bcc.n	80034de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80034ea:	f7ff fed3 	bl	8003294 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80034ee:	f000 f811 	bl	8003514 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80034f2:	f7ff fd77 	bl	8002fe4 <main>
  bx  lr    
 80034f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80034f8:	20040000 	.word	0x20040000
  ldr  r3, =_sidata
 80034fc:	08003614 	.word	0x08003614
  ldr  r0, =_sdata
 8003500:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003504:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8003508:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 800350c:	20002234 	.word	0x20002234

08003510 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003510:	e7fe      	b.n	8003510 <CAN1_RX0_IRQHandler>
	...

08003514 <__libc_init_array>:
 8003514:	b570      	push	{r4, r5, r6, lr}
 8003516:	4e0d      	ldr	r6, [pc, #52]	; (800354c <__libc_init_array+0x38>)
 8003518:	4c0d      	ldr	r4, [pc, #52]	; (8003550 <__libc_init_array+0x3c>)
 800351a:	1ba4      	subs	r4, r4, r6
 800351c:	10a4      	asrs	r4, r4, #2
 800351e:	2500      	movs	r5, #0
 8003520:	42a5      	cmp	r5, r4
 8003522:	d109      	bne.n	8003538 <__libc_init_array+0x24>
 8003524:	4e0b      	ldr	r6, [pc, #44]	; (8003554 <__libc_init_array+0x40>)
 8003526:	4c0c      	ldr	r4, [pc, #48]	; (8003558 <__libc_init_array+0x44>)
 8003528:	f000 f824 	bl	8003574 <_init>
 800352c:	1ba4      	subs	r4, r4, r6
 800352e:	10a4      	asrs	r4, r4, #2
 8003530:	2500      	movs	r5, #0
 8003532:	42a5      	cmp	r5, r4
 8003534:	d105      	bne.n	8003542 <__libc_init_array+0x2e>
 8003536:	bd70      	pop	{r4, r5, r6, pc}
 8003538:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800353c:	4798      	blx	r3
 800353e:	3501      	adds	r5, #1
 8003540:	e7ee      	b.n	8003520 <__libc_init_array+0xc>
 8003542:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003546:	4798      	blx	r3
 8003548:	3501      	adds	r5, #1
 800354a:	e7f2      	b.n	8003532 <__libc_init_array+0x1e>
 800354c:	0800360c 	.word	0x0800360c
 8003550:	0800360c 	.word	0x0800360c
 8003554:	0800360c 	.word	0x0800360c
 8003558:	08003610 	.word	0x08003610

0800355c <memcpy>:
 800355c:	b510      	push	{r4, lr}
 800355e:	1e43      	subs	r3, r0, #1
 8003560:	440a      	add	r2, r1
 8003562:	4291      	cmp	r1, r2
 8003564:	d100      	bne.n	8003568 <memcpy+0xc>
 8003566:	bd10      	pop	{r4, pc}
 8003568:	f811 4b01 	ldrb.w	r4, [r1], #1
 800356c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003570:	e7f7      	b.n	8003562 <memcpy+0x6>
	...

08003574 <_init>:
 8003574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003576:	bf00      	nop
 8003578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800357a:	bc08      	pop	{r3}
 800357c:	469e      	mov	lr, r3
 800357e:	4770      	bx	lr

08003580 <_fini>:
 8003580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003582:	bf00      	nop
 8003584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003586:	bc08      	pop	{r3}
 8003588:	469e      	mov	lr, r3
 800358a:	4770      	bx	lr
