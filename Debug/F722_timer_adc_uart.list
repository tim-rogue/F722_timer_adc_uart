
F722_timer_adc_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000378c  080001e0  080001e0  000101e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  0800396c  0800396c  0001396c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080039e0  080039e0  000139e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080039e8  080039e8  000139e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080039ec  080039ec  000139ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  20000000  080039f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002220  20000014  08003a04  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20002234  08003a04  00022234  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .debug_info   00018bdb  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002a93  00000000  00000000  00038c1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00009fcf  00000000  00000000  0003b6b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000db8  00000000  00000000  00045688  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000df0  00000000  00000000  00046440  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000069c1  00000000  00000000  00047230  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00004afc  00000000  00000000  0004dbf1  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000526ed  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000256c  00000000  00000000  0005276c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000014 	.word	0x20000014
 80001fc:	00000000 	.word	0x00000000
 8000200:	08003954 	.word	0x08003954

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000018 	.word	0x20000018
 800021c:	08003954 	.word	0x08003954

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b97a 	b.w	800052c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	468c      	mov	ip, r1
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	9e08      	ldr	r6, [sp, #32]
 800025c:	2b00      	cmp	r3, #0
 800025e:	d151      	bne.n	8000304 <__udivmoddi4+0xb4>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d96d      	bls.n	8000342 <__udivmoddi4+0xf2>
 8000266:	fab2 fe82 	clz	lr, r2
 800026a:	f1be 0f00 	cmp.w	lr, #0
 800026e:	d00b      	beq.n	8000288 <__udivmoddi4+0x38>
 8000270:	f1ce 0c20 	rsb	ip, lr, #32
 8000274:	fa01 f50e 	lsl.w	r5, r1, lr
 8000278:	fa20 fc0c 	lsr.w	ip, r0, ip
 800027c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000280:	ea4c 0c05 	orr.w	ip, ip, r5
 8000284:	fa00 f40e 	lsl.w	r4, r0, lr
 8000288:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800028c:	0c25      	lsrs	r5, r4, #16
 800028e:	fbbc f8fa 	udiv	r8, ip, sl
 8000292:	fa1f f987 	uxth.w	r9, r7
 8000296:	fb0a cc18 	mls	ip, sl, r8, ip
 800029a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800029e:	fb08 f309 	mul.w	r3, r8, r9
 80002a2:	42ab      	cmp	r3, r5
 80002a4:	d90a      	bls.n	80002bc <__udivmoddi4+0x6c>
 80002a6:	19ed      	adds	r5, r5, r7
 80002a8:	f108 32ff 	add.w	r2, r8, #4294967295
 80002ac:	f080 8123 	bcs.w	80004f6 <__udivmoddi4+0x2a6>
 80002b0:	42ab      	cmp	r3, r5
 80002b2:	f240 8120 	bls.w	80004f6 <__udivmoddi4+0x2a6>
 80002b6:	f1a8 0802 	sub.w	r8, r8, #2
 80002ba:	443d      	add	r5, r7
 80002bc:	1aed      	subs	r5, r5, r3
 80002be:	b2a4      	uxth	r4, r4
 80002c0:	fbb5 f0fa 	udiv	r0, r5, sl
 80002c4:	fb0a 5510 	mls	r5, sl, r0, r5
 80002c8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002cc:	fb00 f909 	mul.w	r9, r0, r9
 80002d0:	45a1      	cmp	r9, r4
 80002d2:	d909      	bls.n	80002e8 <__udivmoddi4+0x98>
 80002d4:	19e4      	adds	r4, r4, r7
 80002d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002da:	f080 810a 	bcs.w	80004f2 <__udivmoddi4+0x2a2>
 80002de:	45a1      	cmp	r9, r4
 80002e0:	f240 8107 	bls.w	80004f2 <__udivmoddi4+0x2a2>
 80002e4:	3802      	subs	r0, #2
 80002e6:	443c      	add	r4, r7
 80002e8:	eba4 0409 	sub.w	r4, r4, r9
 80002ec:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002f0:	2100      	movs	r1, #0
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d061      	beq.n	80003ba <__udivmoddi4+0x16a>
 80002f6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002fa:	2300      	movs	r3, #0
 80002fc:	6034      	str	r4, [r6, #0]
 80002fe:	6073      	str	r3, [r6, #4]
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	428b      	cmp	r3, r1
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0xc8>
 8000308:	2e00      	cmp	r6, #0
 800030a:	d054      	beq.n	80003b6 <__udivmoddi4+0x166>
 800030c:	2100      	movs	r1, #0
 800030e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000312:	4608      	mov	r0, r1
 8000314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000318:	fab3 f183 	clz	r1, r3
 800031c:	2900      	cmp	r1, #0
 800031e:	f040 808e 	bne.w	800043e <__udivmoddi4+0x1ee>
 8000322:	42ab      	cmp	r3, r5
 8000324:	d302      	bcc.n	800032c <__udivmoddi4+0xdc>
 8000326:	4282      	cmp	r2, r0
 8000328:	f200 80fa 	bhi.w	8000520 <__udivmoddi4+0x2d0>
 800032c:	1a84      	subs	r4, r0, r2
 800032e:	eb65 0503 	sbc.w	r5, r5, r3
 8000332:	2001      	movs	r0, #1
 8000334:	46ac      	mov	ip, r5
 8000336:	2e00      	cmp	r6, #0
 8000338:	d03f      	beq.n	80003ba <__udivmoddi4+0x16a>
 800033a:	e886 1010 	stmia.w	r6, {r4, ip}
 800033e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000342:	b912      	cbnz	r2, 800034a <__udivmoddi4+0xfa>
 8000344:	2701      	movs	r7, #1
 8000346:	fbb7 f7f2 	udiv	r7, r7, r2
 800034a:	fab7 fe87 	clz	lr, r7
 800034e:	f1be 0f00 	cmp.w	lr, #0
 8000352:	d134      	bne.n	80003be <__udivmoddi4+0x16e>
 8000354:	1beb      	subs	r3, r5, r7
 8000356:	0c3a      	lsrs	r2, r7, #16
 8000358:	fa1f fc87 	uxth.w	ip, r7
 800035c:	2101      	movs	r1, #1
 800035e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000362:	0c25      	lsrs	r5, r4, #16
 8000364:	fb02 3318 	mls	r3, r2, r8, r3
 8000368:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800036c:	fb0c f308 	mul.w	r3, ip, r8
 8000370:	42ab      	cmp	r3, r5
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x134>
 8000374:	19ed      	adds	r5, r5, r7
 8000376:	f108 30ff 	add.w	r0, r8, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x132>
 800037c:	42ab      	cmp	r3, r5
 800037e:	f200 80d1 	bhi.w	8000524 <__udivmoddi4+0x2d4>
 8000382:	4680      	mov	r8, r0
 8000384:	1aed      	subs	r5, r5, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb5 f0f2 	udiv	r0, r5, r2
 800038c:	fb02 5510 	mls	r5, r2, r0, r5
 8000390:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000394:	fb0c fc00 	mul.w	ip, ip, r0
 8000398:	45a4      	cmp	ip, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x15c>
 800039c:	19e4      	adds	r4, r4, r7
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x15a>
 80003a4:	45a4      	cmp	ip, r4
 80003a6:	f200 80b8 	bhi.w	800051a <__udivmoddi4+0x2ca>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 040c 	sub.w	r4, r4, ip
 80003b0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003b4:	e79d      	b.n	80002f2 <__udivmoddi4+0xa2>
 80003b6:	4631      	mov	r1, r6
 80003b8:	4630      	mov	r0, r6
 80003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003be:	f1ce 0420 	rsb	r4, lr, #32
 80003c2:	fa05 f30e 	lsl.w	r3, r5, lr
 80003c6:	fa07 f70e 	lsl.w	r7, r7, lr
 80003ca:	fa20 f804 	lsr.w	r8, r0, r4
 80003ce:	0c3a      	lsrs	r2, r7, #16
 80003d0:	fa25 f404 	lsr.w	r4, r5, r4
 80003d4:	ea48 0803 	orr.w	r8, r8, r3
 80003d8:	fbb4 f1f2 	udiv	r1, r4, r2
 80003dc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003e0:	fb02 4411 	mls	r4, r2, r1, r4
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003ec:	fb01 f30c 	mul.w	r3, r1, ip
 80003f0:	42ab      	cmp	r3, r5
 80003f2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003f6:	d909      	bls.n	800040c <__udivmoddi4+0x1bc>
 80003f8:	19ed      	adds	r5, r5, r7
 80003fa:	f101 30ff 	add.w	r0, r1, #4294967295
 80003fe:	f080 808a 	bcs.w	8000516 <__udivmoddi4+0x2c6>
 8000402:	42ab      	cmp	r3, r5
 8000404:	f240 8087 	bls.w	8000516 <__udivmoddi4+0x2c6>
 8000408:	3902      	subs	r1, #2
 800040a:	443d      	add	r5, r7
 800040c:	1aeb      	subs	r3, r5, r3
 800040e:	fa1f f588 	uxth.w	r5, r8
 8000412:	fbb3 f0f2 	udiv	r0, r3, r2
 8000416:	fb02 3310 	mls	r3, r2, r0, r3
 800041a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800041e:	fb00 f30c 	mul.w	r3, r0, ip
 8000422:	42ab      	cmp	r3, r5
 8000424:	d907      	bls.n	8000436 <__udivmoddi4+0x1e6>
 8000426:	19ed      	adds	r5, r5, r7
 8000428:	f100 38ff 	add.w	r8, r0, #4294967295
 800042c:	d26f      	bcs.n	800050e <__udivmoddi4+0x2be>
 800042e:	42ab      	cmp	r3, r5
 8000430:	d96d      	bls.n	800050e <__udivmoddi4+0x2be>
 8000432:	3802      	subs	r0, #2
 8000434:	443d      	add	r5, r7
 8000436:	1aeb      	subs	r3, r5, r3
 8000438:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800043c:	e78f      	b.n	800035e <__udivmoddi4+0x10e>
 800043e:	f1c1 0720 	rsb	r7, r1, #32
 8000442:	fa22 f807 	lsr.w	r8, r2, r7
 8000446:	408b      	lsls	r3, r1
 8000448:	fa05 f401 	lsl.w	r4, r5, r1
 800044c:	ea48 0303 	orr.w	r3, r8, r3
 8000450:	fa20 fe07 	lsr.w	lr, r0, r7
 8000454:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000458:	40fd      	lsrs	r5, r7
 800045a:	ea4e 0e04 	orr.w	lr, lr, r4
 800045e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000462:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000466:	fb0c 5519 	mls	r5, ip, r9, r5
 800046a:	fa1f f883 	uxth.w	r8, r3
 800046e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000472:	fb09 f408 	mul.w	r4, r9, r8
 8000476:	42ac      	cmp	r4, r5
 8000478:	fa02 f201 	lsl.w	r2, r2, r1
 800047c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x244>
 8000482:	18ed      	adds	r5, r5, r3
 8000484:	f109 30ff 	add.w	r0, r9, #4294967295
 8000488:	d243      	bcs.n	8000512 <__udivmoddi4+0x2c2>
 800048a:	42ac      	cmp	r4, r5
 800048c:	d941      	bls.n	8000512 <__udivmoddi4+0x2c2>
 800048e:	f1a9 0902 	sub.w	r9, r9, #2
 8000492:	441d      	add	r5, r3
 8000494:	1b2d      	subs	r5, r5, r4
 8000496:	fa1f fe8e 	uxth.w	lr, lr
 800049a:	fbb5 f0fc 	udiv	r0, r5, ip
 800049e:	fb0c 5510 	mls	r5, ip, r0, r5
 80004a2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004a6:	fb00 f808 	mul.w	r8, r0, r8
 80004aa:	45a0      	cmp	r8, r4
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x26e>
 80004ae:	18e4      	adds	r4, r4, r3
 80004b0:	f100 35ff 	add.w	r5, r0, #4294967295
 80004b4:	d229      	bcs.n	800050a <__udivmoddi4+0x2ba>
 80004b6:	45a0      	cmp	r8, r4
 80004b8:	d927      	bls.n	800050a <__udivmoddi4+0x2ba>
 80004ba:	3802      	subs	r0, #2
 80004bc:	441c      	add	r4, r3
 80004be:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004c2:	eba4 0408 	sub.w	r4, r4, r8
 80004c6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ca:	454c      	cmp	r4, r9
 80004cc:	46c6      	mov	lr, r8
 80004ce:	464d      	mov	r5, r9
 80004d0:	d315      	bcc.n	80004fe <__udivmoddi4+0x2ae>
 80004d2:	d012      	beq.n	80004fa <__udivmoddi4+0x2aa>
 80004d4:	b156      	cbz	r6, 80004ec <__udivmoddi4+0x29c>
 80004d6:	ebba 030e 	subs.w	r3, sl, lr
 80004da:	eb64 0405 	sbc.w	r4, r4, r5
 80004de:	fa04 f707 	lsl.w	r7, r4, r7
 80004e2:	40cb      	lsrs	r3, r1
 80004e4:	431f      	orrs	r7, r3
 80004e6:	40cc      	lsrs	r4, r1
 80004e8:	6037      	str	r7, [r6, #0]
 80004ea:	6074      	str	r4, [r6, #4]
 80004ec:	2100      	movs	r1, #0
 80004ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f2:	4618      	mov	r0, r3
 80004f4:	e6f8      	b.n	80002e8 <__udivmoddi4+0x98>
 80004f6:	4690      	mov	r8, r2
 80004f8:	e6e0      	b.n	80002bc <__udivmoddi4+0x6c>
 80004fa:	45c2      	cmp	sl, r8
 80004fc:	d2ea      	bcs.n	80004d4 <__udivmoddi4+0x284>
 80004fe:	ebb8 0e02 	subs.w	lr, r8, r2
 8000502:	eb69 0503 	sbc.w	r5, r9, r3
 8000506:	3801      	subs	r0, #1
 8000508:	e7e4      	b.n	80004d4 <__udivmoddi4+0x284>
 800050a:	4628      	mov	r0, r5
 800050c:	e7d7      	b.n	80004be <__udivmoddi4+0x26e>
 800050e:	4640      	mov	r0, r8
 8000510:	e791      	b.n	8000436 <__udivmoddi4+0x1e6>
 8000512:	4681      	mov	r9, r0
 8000514:	e7be      	b.n	8000494 <__udivmoddi4+0x244>
 8000516:	4601      	mov	r1, r0
 8000518:	e778      	b.n	800040c <__udivmoddi4+0x1bc>
 800051a:	3802      	subs	r0, #2
 800051c:	443c      	add	r4, r7
 800051e:	e745      	b.n	80003ac <__udivmoddi4+0x15c>
 8000520:	4608      	mov	r0, r1
 8000522:	e708      	b.n	8000336 <__udivmoddi4+0xe6>
 8000524:	f1a8 0802 	sub.w	r8, r8, #2
 8000528:	443d      	add	r5, r7
 800052a:	e72b      	b.n	8000384 <__udivmoddi4+0x134>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000530:	b510      	push	{r4, lr}
 8000532:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000534:	4b0e      	ldr	r3, [pc, #56]	; (8000570 <HAL_InitTick+0x40>)
 8000536:	7818      	ldrb	r0, [r3, #0]
 8000538:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800053c:	fbb3 f3f0 	udiv	r3, r3, r0
 8000540:	4a0c      	ldr	r2, [pc, #48]	; (8000574 <HAL_InitTick+0x44>)
 8000542:	6810      	ldr	r0, [r2, #0]
 8000544:	fbb0 f0f3 	udiv	r0, r0, r3
 8000548:	f000 fc7a 	bl	8000e40 <HAL_SYSTICK_Config>
 800054c:	b968      	cbnz	r0, 800056a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800054e:	2c0f      	cmp	r4, #15
 8000550:	d901      	bls.n	8000556 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000552:	2001      	movs	r0, #1
  }

  /* Return function status */
  return HAL_OK;
}
 8000554:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000556:	2200      	movs	r2, #0
 8000558:	4621      	mov	r1, r4
 800055a:	f04f 30ff 	mov.w	r0, #4294967295
 800055e:	f000 fc33 	bl	8000dc8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000562:	4b05      	ldr	r3, [pc, #20]	; (8000578 <HAL_InitTick+0x48>)
 8000564:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 8000566:	2000      	movs	r0, #0
 8000568:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800056a:	2001      	movs	r0, #1
 800056c:	bd10      	pop	{r4, pc}
 800056e:	bf00      	nop
 8000570:	20000000 	.word	0x20000000
 8000574:	20000008 	.word	0x20000008
 8000578:	20000004 	.word	0x20000004

0800057c <HAL_Init>:
{
 800057c:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800057e:	2003      	movs	r0, #3
 8000580:	f000 fc10 	bl	8000da4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000584:	2000      	movs	r0, #0
 8000586:	f7ff ffd3 	bl	8000530 <HAL_InitTick>
  HAL_MspInit();
 800058a:	f002 ff79 	bl	8003480 <HAL_MspInit>
}
 800058e:	2000      	movs	r0, #0
 8000590:	bd08      	pop	{r3, pc}
	...

08000594 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000594:	4a03      	ldr	r2, [pc, #12]	; (80005a4 <HAL_IncTick+0x10>)
 8000596:	6811      	ldr	r1, [r2, #0]
 8000598:	4b03      	ldr	r3, [pc, #12]	; (80005a8 <HAL_IncTick+0x14>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	440b      	add	r3, r1
 800059e:	6013      	str	r3, [r2, #0]
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	20000044 	.word	0x20000044
 80005a8:	20000000 	.word	0x20000000

080005ac <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005ac:	4b01      	ldr	r3, [pc, #4]	; (80005b4 <HAL_GetTick+0x8>)
 80005ae:	6818      	ldr	r0, [r3, #0]
}
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	20000044 	.word	0x20000044

080005b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005b8:	b538      	push	{r3, r4, r5, lr}
 80005ba:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80005bc:	f7ff fff6 	bl	80005ac <HAL_GetTick>
 80005c0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005c2:	f1b4 3fff 	cmp.w	r4, #4294967295
 80005c6:	d002      	beq.n	80005ce <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80005c8:	4b04      	ldr	r3, [pc, #16]	; (80005dc <HAL_Delay+0x24>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005ce:	f7ff ffed 	bl	80005ac <HAL_GetTick>
 80005d2:	1b40      	subs	r0, r0, r5
 80005d4:	4284      	cmp	r4, r0
 80005d6:	d8fa      	bhi.n	80005ce <HAL_Delay+0x16>
  {
  }
}
 80005d8:	bd38      	pop	{r3, r4, r5, pc}
 80005da:	bf00      	nop
 80005dc:	20000000 	.word	0x20000000

080005e0 <ADC_Init>:
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80005e0:	4b49      	ldr	r3, [pc, #292]	; (8000708 <ADC_Init+0x128>)
 80005e2:	685a      	ldr	r2, [r3, #4]
 80005e4:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80005e8:	605a      	str	r2, [r3, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80005ea:	685a      	ldr	r2, [r3, #4]
 80005ec:	6841      	ldr	r1, [r0, #4]
 80005ee:	430a      	orrs	r2, r1
 80005f0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80005f2:	6802      	ldr	r2, [r0, #0]
 80005f4:	6853      	ldr	r3, [r2, #4]
 80005f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80005fa:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80005fc:	6802      	ldr	r2, [r0, #0]
 80005fe:	6853      	ldr	r3, [r2, #4]
 8000600:	6901      	ldr	r1, [r0, #16]
 8000602:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8000606:	6053      	str	r3, [r2, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000608:	6802      	ldr	r2, [r0, #0]
 800060a:	6853      	ldr	r3, [r2, #4]
 800060c:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000610:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000612:	6802      	ldr	r2, [r0, #0]
 8000614:	6853      	ldr	r3, [r2, #4]
 8000616:	6881      	ldr	r1, [r0, #8]
 8000618:	430b      	orrs	r3, r1
 800061a:	6053      	str	r3, [r2, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800061c:	6802      	ldr	r2, [r0, #0]
 800061e:	6893      	ldr	r3, [r2, #8]
 8000620:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000624:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000626:	6802      	ldr	r2, [r0, #0]
 8000628:	6893      	ldr	r3, [r2, #8]
 800062a:	68c1      	ldr	r1, [r0, #12]
 800062c:	430b      	orrs	r3, r1
 800062e:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000630:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8000632:	4b36      	ldr	r3, [pc, #216]	; (800070c <ADC_Init+0x12c>)
 8000634:	429a      	cmp	r2, r3
 8000636:	d049      	beq.n	80006cc <ADC_Init+0xec>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000638:	6802      	ldr	r2, [r0, #0]
 800063a:	6893      	ldr	r3, [r2, #8]
 800063c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000640:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000642:	6802      	ldr	r2, [r0, #0]
 8000644:	6893      	ldr	r3, [r2, #8]
 8000646:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8000648:	430b      	orrs	r3, r1
 800064a:	6093      	str	r3, [r2, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800064c:	6802      	ldr	r2, [r0, #0]
 800064e:	6893      	ldr	r3, [r2, #8]
 8000650:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8000654:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000656:	6802      	ldr	r2, [r0, #0]
 8000658:	6893      	ldr	r3, [r2, #8]
 800065a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800065c:	430b      	orrs	r3, r1
 800065e:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000660:	6802      	ldr	r2, [r0, #0]
 8000662:	6893      	ldr	r3, [r2, #8]
 8000664:	f023 0302 	bic.w	r3, r3, #2
 8000668:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 800066a:	6802      	ldr	r2, [r0, #0]
 800066c:	6893      	ldr	r3, [r2, #8]
 800066e:	6981      	ldr	r1, [r0, #24]
 8000670:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8000674:	6093      	str	r3, [r2, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000676:	6a03      	ldr	r3, [r0, #32]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d132      	bne.n	80006e2 <ADC_Init+0x102>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800067c:	6802      	ldr	r2, [r0, #0]
 800067e:	6853      	ldr	r3, [r2, #4]
 8000680:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000684:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000686:	6802      	ldr	r2, [r0, #0]
 8000688:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800068a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800068e:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000690:	6801      	ldr	r1, [r0, #0]
 8000692:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8000694:	69c2      	ldr	r2, [r0, #28]
 8000696:	3a01      	subs	r2, #1
 8000698:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800069c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800069e:	6802      	ldr	r2, [r0, #0]
 80006a0:	6893      	ldr	r3, [r2, #8]
 80006a2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80006a6:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 80006a8:	6802      	ldr	r2, [r0, #0]
 80006aa:	6893      	ldr	r3, [r2, #8]
 80006ac:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80006ae:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 80006b2:	6093      	str	r3, [r2, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80006b4:	6802      	ldr	r2, [r0, #0]
 80006b6:	6893      	ldr	r3, [r2, #8]
 80006b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80006bc:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80006be:	6802      	ldr	r2, [r0, #0]
 80006c0:	6893      	ldr	r3, [r2, #8]
 80006c2:	6941      	ldr	r1, [r0, #20]
 80006c4:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 80006c8:	6093      	str	r3, [r2, #8]
 80006ca:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80006cc:	6802      	ldr	r2, [r0, #0]
 80006ce:	6893      	ldr	r3, [r2, #8]
 80006d0:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80006d4:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80006d6:	6802      	ldr	r2, [r0, #0]
 80006d8:	6893      	ldr	r3, [r2, #8]
 80006da:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80006de:	6093      	str	r3, [r2, #8]
 80006e0:	e7be      	b.n	8000660 <ADC_Init+0x80>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80006e2:	6802      	ldr	r2, [r0, #0]
 80006e4:	6853      	ldr	r3, [r2, #4]
 80006e6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80006ea:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80006ec:	6802      	ldr	r2, [r0, #0]
 80006ee:	6853      	ldr	r3, [r2, #4]
 80006f0:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80006f4:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80006f6:	6801      	ldr	r1, [r0, #0]
 80006f8:	684b      	ldr	r3, [r1, #4]
 80006fa:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80006fc:	3a01      	subs	r2, #1
 80006fe:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8000702:	604b      	str	r3, [r1, #4]
 8000704:	e7bf      	b.n	8000686 <ADC_Init+0xa6>
 8000706:	bf00      	nop
 8000708:	40012300 	.word	0x40012300
 800070c:	0f000001 	.word	0x0f000001

08000710 <HAL_ADC_Init>:
  if(hadc == NULL)
 8000710:	b320      	cbz	r0, 800075c <HAL_ADC_Init+0x4c>
{
 8000712:	b510      	push	{r4, lr}
 8000714:	4604      	mov	r4, r0
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000716:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000718:	b143      	cbz	r3, 800072c <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800071a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800071c:	f013 0f10 	tst.w	r3, #16
 8000720:	d00a      	beq.n	8000738 <HAL_ADC_Init+0x28>
    tmp_hal_status = HAL_ERROR;
 8000722:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8000724:	2300      	movs	r3, #0
 8000726:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 800072a:	bd10      	pop	{r4, pc}
    ADC_CLEAR_ERRORCODE(hadc);
 800072c:	6443      	str	r3, [r0, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 800072e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_ADC_MspInit(hadc);
 8000732:	f002 fe81 	bl	8003438 <HAL_ADC_MspInit>
 8000736:	e7f0      	b.n	800071a <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 8000738:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800073a:	4b09      	ldr	r3, [pc, #36]	; (8000760 <HAL_ADC_Init+0x50>)
 800073c:	4013      	ands	r3, r2
 800073e:	f043 0302 	orr.w	r3, r3, #2
 8000742:	6423      	str	r3, [r4, #64]	; 0x40
    ADC_Init(hadc);
 8000744:	4620      	mov	r0, r4
 8000746:	f7ff ff4b 	bl	80005e0 <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 800074a:	2000      	movs	r0, #0
 800074c:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 800074e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000750:	f023 0303 	bic.w	r3, r3, #3
 8000754:	f043 0301 	orr.w	r3, r3, #1
 8000758:	6423      	str	r3, [r4, #64]	; 0x40
 800075a:	e7e3      	b.n	8000724 <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 800075c:	2001      	movs	r0, #1
 800075e:	4770      	bx	lr
 8000760:	ffffeefd 	.word	0xffffeefd

08000764 <HAL_ADC_Start>:
{
 8000764:	b082      	sub	sp, #8
  __IO uint32_t counter = 0;
 8000766:	2300      	movs	r3, #0
 8000768:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800076a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800076e:	2b01      	cmp	r3, #1
 8000770:	d061      	beq.n	8000836 <HAL_ADC_Start+0xd2>
 8000772:	2301      	movs	r3, #1
 8000774:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000778:	6803      	ldr	r3, [r0, #0]
 800077a:	689a      	ldr	r2, [r3, #8]
 800077c:	f012 0f01 	tst.w	r2, #1
 8000780:	d113      	bne.n	80007aa <HAL_ADC_Start+0x46>
    __HAL_ADC_ENABLE(hadc);
 8000782:	689a      	ldr	r2, [r3, #8]
 8000784:	f042 0201 	orr.w	r2, r2, #1
 8000788:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800078a:	4b2f      	ldr	r3, [pc, #188]	; (8000848 <HAL_ADC_Start+0xe4>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4a2f      	ldr	r2, [pc, #188]	; (800084c <HAL_ADC_Start+0xe8>)
 8000790:	fba2 2303 	umull	r2, r3, r2, r3
 8000794:	0c9b      	lsrs	r3, r3, #18
 8000796:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800079a:	9301      	str	r3, [sp, #4]
    while(counter != 0)
 800079c:	e002      	b.n	80007a4 <HAL_ADC_Start+0x40>
      counter--;
 800079e:	9b01      	ldr	r3, [sp, #4]
 80007a0:	3b01      	subs	r3, #1
 80007a2:	9301      	str	r3, [sp, #4]
    while(counter != 0)
 80007a4:	9b01      	ldr	r3, [sp, #4]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d1f9      	bne.n	800079e <HAL_ADC_Start+0x3a>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80007aa:	6802      	ldr	r2, [r0, #0]
 80007ac:	6893      	ldr	r3, [r2, #8]
 80007ae:	f013 0f01 	tst.w	r3, #1
 80007b2:	d043      	beq.n	800083c <HAL_ADC_Start+0xd8>
    ADC_STATE_CLR_SET(hadc->State,
 80007b4:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80007b6:	4b26      	ldr	r3, [pc, #152]	; (8000850 <HAL_ADC_Start+0xec>)
 80007b8:	400b      	ands	r3, r1
 80007ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007be:	6403      	str	r3, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80007c0:	6853      	ldr	r3, [r2, #4]
 80007c2:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80007c6:	d005      	beq.n	80007d4 <HAL_ADC_Start+0x70>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80007c8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80007ca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80007ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007d2:	6403      	str	r3, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80007d4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80007d6:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80007da:	d019      	beq.n	8000810 <HAL_ADC_Start+0xac>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80007dc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80007de:	f023 0306 	bic.w	r3, r3, #6
 80007e2:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 80007e4:	2300      	movs	r3, #0
 80007e6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80007ea:	f06f 0322 	mvn.w	r3, #34	; 0x22
 80007ee:	6013      	str	r3, [r2, #0]
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80007f0:	4b18      	ldr	r3, [pc, #96]	; (8000854 <HAL_ADC_Start+0xf0>)
 80007f2:	685b      	ldr	r3, [r3, #4]
 80007f4:	f013 0f1f 	tst.w	r3, #31
 80007f8:	d10d      	bne.n	8000816 <HAL_ADC_Start+0xb2>
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80007fa:	6803      	ldr	r3, [r0, #0]
 80007fc:	689a      	ldr	r2, [r3, #8]
 80007fe:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8000802:	d11d      	bne.n	8000840 <HAL_ADC_Start+0xdc>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000804:	689a      	ldr	r2, [r3, #8]
 8000806:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800080a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800080c:	2000      	movs	r0, #0
 800080e:	e013      	b.n	8000838 <HAL_ADC_Start+0xd4>
      ADC_CLEAR_ERRORCODE(hadc);
 8000810:	2300      	movs	r3, #0
 8000812:	6443      	str	r3, [r0, #68]	; 0x44
 8000814:	e7e6      	b.n	80007e4 <HAL_ADC_Start+0x80>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000816:	6803      	ldr	r3, [r0, #0]
 8000818:	4a0f      	ldr	r2, [pc, #60]	; (8000858 <HAL_ADC_Start+0xf4>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d001      	beq.n	8000822 <HAL_ADC_Start+0xbe>
  return HAL_OK;
 800081e:	2000      	movs	r0, #0
 8000820:	e00a      	b.n	8000838 <HAL_ADC_Start+0xd4>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000822:	689a      	ldr	r2, [r3, #8]
 8000824:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8000828:	d10c      	bne.n	8000844 <HAL_ADC_Start+0xe0>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800082a:	689a      	ldr	r2, [r3, #8]
 800082c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000830:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8000832:	2000      	movs	r0, #0
 8000834:	e000      	b.n	8000838 <HAL_ADC_Start+0xd4>
  __HAL_LOCK(hadc);
 8000836:	2002      	movs	r0, #2
}
 8000838:	b002      	add	sp, #8
 800083a:	4770      	bx	lr
  return HAL_OK;
 800083c:	2000      	movs	r0, #0
 800083e:	e7fb      	b.n	8000838 <HAL_ADC_Start+0xd4>
 8000840:	2000      	movs	r0, #0
 8000842:	e7f9      	b.n	8000838 <HAL_ADC_Start+0xd4>
 8000844:	2000      	movs	r0, #0
 8000846:	e7f7      	b.n	8000838 <HAL_ADC_Start+0xd4>
 8000848:	20000008 	.word	0x20000008
 800084c:	431bde83 	.word	0x431bde83
 8000850:	fffff8fe 	.word	0xfffff8fe
 8000854:	40012300 	.word	0x40012300
 8000858:	40012000 	.word	0x40012000

0800085c <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 800085c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000860:	2b01      	cmp	r3, #1
 8000862:	d017      	beq.n	8000894 <HAL_ADC_Stop+0x38>
 8000864:	2301      	movs	r3, #1
 8000866:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_ADC_DISABLE(hadc);
 800086a:	6802      	ldr	r2, [r0, #0]
 800086c:	6893      	ldr	r3, [r2, #8]
 800086e:	f023 0301 	bic.w	r3, r3, #1
 8000872:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8000874:	6803      	ldr	r3, [r0, #0]
 8000876:	689b      	ldr	r3, [r3, #8]
 8000878:	f013 0f01 	tst.w	r3, #1
 800087c:	d105      	bne.n	800088a <HAL_ADC_Stop+0x2e>
    ADC_STATE_CLR_SET(hadc->State,
 800087e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000880:	4b05      	ldr	r3, [pc, #20]	; (8000898 <HAL_ADC_Stop+0x3c>)
 8000882:	4013      	ands	r3, r2
 8000884:	f043 0301 	orr.w	r3, r3, #1
 8000888:	6403      	str	r3, [r0, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 800088a:	2300      	movs	r3, #0
 800088c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8000890:	4618      	mov	r0, r3
 8000892:	4770      	bx	lr
  __HAL_LOCK(hadc);
 8000894:	2002      	movs	r0, #2
}
 8000896:	4770      	bx	lr
 8000898:	ffffeefe 	.word	0xffffeefe

0800089c <HAL_ADC_PollForConversion>:
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800089c:	6803      	ldr	r3, [r0, #0]
 800089e:	689a      	ldr	r2, [r3, #8]
 80008a0:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80008a4:	d003      	beq.n	80008ae <HAL_ADC_PollForConversion+0x12>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80008a6:	689b      	ldr	r3, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80008a8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80008ac:	d11c      	bne.n	80008e8 <HAL_ADC_PollForConversion+0x4c>
{
 80008ae:	b570      	push	{r4, r5, r6, lr}
 80008b0:	460d      	mov	r5, r1
 80008b2:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 80008b4:	f7ff fe7a 	bl	80005ac <HAL_GetTick>
 80008b8:	4606      	mov	r6, r0
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80008ba:	6823      	ldr	r3, [r4, #0]
 80008bc:	681a      	ldr	r2, [r3, #0]
 80008be:	f012 0f02 	tst.w	r2, #2
 80008c2:	d11a      	bne.n	80008fa <HAL_ADC_PollForConversion+0x5e>
    if(Timeout != HAL_MAX_DELAY)
 80008c4:	f1b5 3fff 	cmp.w	r5, #4294967295
 80008c8:	d0f7      	beq.n	80008ba <HAL_ADC_PollForConversion+0x1e>
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80008ca:	b125      	cbz	r5, 80008d6 <HAL_ADC_PollForConversion+0x3a>
 80008cc:	f7ff fe6e 	bl	80005ac <HAL_GetTick>
 80008d0:	1b80      	subs	r0, r0, r6
 80008d2:	4285      	cmp	r5, r0
 80008d4:	d2f1      	bcs.n	80008ba <HAL_ADC_PollForConversion+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80008d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80008d8:	f043 0304 	orr.w	r3, r3, #4
 80008dc:	6423      	str	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hadc);
 80008de:	2300      	movs	r3, #0
 80008e0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_TIMEOUT;
 80008e4:	2003      	movs	r0, #3
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80008e8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80008ea:	f043 0320 	orr.w	r3, r3, #32
 80008ee:	6403      	str	r3, [r0, #64]	; 0x40
    __HAL_UNLOCK(hadc);
 80008f0:	2300      	movs	r3, #0
 80008f2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 80008f6:	2001      	movs	r0, #1
 80008f8:	4770      	bx	lr
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80008fa:	f06f 0212 	mvn.w	r2, #18
 80008fe:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000900:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000902:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000906:	6423      	str	r3, [r4, #64]	; 0x40
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000908:	6823      	ldr	r3, [r4, #0]
 800090a:	689a      	ldr	r2, [r3, #8]
 800090c:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8000910:	d117      	bne.n	8000942 <HAL_ADC_PollForConversion+0xa6>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000912:	69a2      	ldr	r2, [r4, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000914:	b9ba      	cbnz	r2, 8000946 <HAL_ADC_PollForConversion+0xaa>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000918:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 800091c:	d003      	beq.n	8000926 <HAL_ADC_PollForConversion+0x8a>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800091e:	689b      	ldr	r3, [r3, #8]
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000920:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8000924:	d111      	bne.n	800094a <HAL_ADC_PollForConversion+0xae>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000926:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000928:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800092c:	6423      	str	r3, [r4, #64]	; 0x40
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800092e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000930:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8000934:	d10b      	bne.n	800094e <HAL_ADC_PollForConversion+0xb2>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000936:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000938:	f043 0301 	orr.w	r3, r3, #1
 800093c:	6423      	str	r3, [r4, #64]	; 0x40
  return HAL_OK;
 800093e:	2000      	movs	r0, #0
 8000940:	bd70      	pop	{r4, r5, r6, pc}
 8000942:	2000      	movs	r0, #0
 8000944:	bd70      	pop	{r4, r5, r6, pc}
 8000946:	2000      	movs	r0, #0
 8000948:	bd70      	pop	{r4, r5, r6, pc}
 800094a:	2000      	movs	r0, #0
 800094c:	bd70      	pop	{r4, r5, r6, pc}
 800094e:	2000      	movs	r0, #0
}
 8000950:	bd70      	pop	{r4, r5, r6, pc}
	...

08000954 <HAL_ADC_Start_IT>:
{
 8000954:	b082      	sub	sp, #8
  __IO uint32_t counter = 0;
 8000956:	2300      	movs	r3, #0
 8000958:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800095a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800095e:	2b01      	cmp	r3, #1
 8000960:	d066      	beq.n	8000a30 <HAL_ADC_Start_IT+0xdc>
 8000962:	2301      	movs	r3, #1
 8000964:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000968:	6803      	ldr	r3, [r0, #0]
 800096a:	689a      	ldr	r2, [r3, #8]
 800096c:	f012 0f01 	tst.w	r2, #1
 8000970:	d113      	bne.n	800099a <HAL_ADC_Start_IT+0x46>
    __HAL_ADC_ENABLE(hadc);
 8000972:	689a      	ldr	r2, [r3, #8]
 8000974:	f042 0201 	orr.w	r2, r2, #1
 8000978:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800097a:	4b32      	ldr	r3, [pc, #200]	; (8000a44 <HAL_ADC_Start_IT+0xf0>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4a32      	ldr	r2, [pc, #200]	; (8000a48 <HAL_ADC_Start_IT+0xf4>)
 8000980:	fba2 2303 	umull	r2, r3, r2, r3
 8000984:	0c9b      	lsrs	r3, r3, #18
 8000986:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800098a:	9301      	str	r3, [sp, #4]
    while(counter != 0)
 800098c:	e002      	b.n	8000994 <HAL_ADC_Start_IT+0x40>
      counter--;
 800098e:	9b01      	ldr	r3, [sp, #4]
 8000990:	3b01      	subs	r3, #1
 8000992:	9301      	str	r3, [sp, #4]
    while(counter != 0)
 8000994:	9b01      	ldr	r3, [sp, #4]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d1f9      	bne.n	800098e <HAL_ADC_Start_IT+0x3a>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800099a:	6802      	ldr	r2, [r0, #0]
 800099c:	6893      	ldr	r3, [r2, #8]
 800099e:	f013 0f01 	tst.w	r3, #1
 80009a2:	d048      	beq.n	8000a36 <HAL_ADC_Start_IT+0xe2>
    ADC_STATE_CLR_SET(hadc->State,
 80009a4:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80009a6:	4b29      	ldr	r3, [pc, #164]	; (8000a4c <HAL_ADC_Start_IT+0xf8>)
 80009a8:	400b      	ands	r3, r1
 80009aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009ae:	6403      	str	r3, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80009b0:	6853      	ldr	r3, [r2, #4]
 80009b2:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80009b6:	d005      	beq.n	80009c4 <HAL_ADC_Start_IT+0x70>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80009b8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80009ba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80009be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009c2:	6403      	str	r3, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80009c4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80009c6:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80009ca:	d01e      	beq.n	8000a0a <HAL_ADC_Start_IT+0xb6>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80009cc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80009ce:	f023 0306 	bic.w	r3, r3, #6
 80009d2:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 80009d4:	2300      	movs	r3, #0
 80009d6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80009da:	f06f 0322 	mvn.w	r3, #34	; 0x22
 80009de:	6013      	str	r3, [r2, #0]
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80009e0:	6802      	ldr	r2, [r0, #0]
 80009e2:	6851      	ldr	r1, [r2, #4]
 80009e4:	4b1a      	ldr	r3, [pc, #104]	; (8000a50 <HAL_ADC_Start_IT+0xfc>)
 80009e6:	430b      	orrs	r3, r1
 80009e8:	6053      	str	r3, [r2, #4]
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80009ea:	4b1a      	ldr	r3, [pc, #104]	; (8000a54 <HAL_ADC_Start_IT+0x100>)
 80009ec:	685b      	ldr	r3, [r3, #4]
 80009ee:	f013 0f1f 	tst.w	r3, #31
 80009f2:	d10d      	bne.n	8000a10 <HAL_ADC_Start_IT+0xbc>
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80009f4:	6803      	ldr	r3, [r0, #0]
 80009f6:	689a      	ldr	r2, [r3, #8]
 80009f8:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80009fc:	d11d      	bne.n	8000a3a <HAL_ADC_Start_IT+0xe6>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80009fe:	689a      	ldr	r2, [r3, #8]
 8000a00:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000a04:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8000a06:	2000      	movs	r0, #0
 8000a08:	e013      	b.n	8000a32 <HAL_ADC_Start_IT+0xde>
      ADC_CLEAR_ERRORCODE(hadc);
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	6443      	str	r3, [r0, #68]	; 0x44
 8000a0e:	e7e1      	b.n	80009d4 <HAL_ADC_Start_IT+0x80>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000a10:	6803      	ldr	r3, [r0, #0]
 8000a12:	4a11      	ldr	r2, [pc, #68]	; (8000a58 <HAL_ADC_Start_IT+0x104>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d001      	beq.n	8000a1c <HAL_ADC_Start_IT+0xc8>
  return HAL_OK;
 8000a18:	2000      	movs	r0, #0
 8000a1a:	e00a      	b.n	8000a32 <HAL_ADC_Start_IT+0xde>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000a1c:	689a      	ldr	r2, [r3, #8]
 8000a1e:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8000a22:	d10c      	bne.n	8000a3e <HAL_ADC_Start_IT+0xea>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000a24:	689a      	ldr	r2, [r3, #8]
 8000a26:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000a2a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8000a2c:	2000      	movs	r0, #0
 8000a2e:	e000      	b.n	8000a32 <HAL_ADC_Start_IT+0xde>
  __HAL_LOCK(hadc);
 8000a30:	2002      	movs	r0, #2
}
 8000a32:	b002      	add	sp, #8
 8000a34:	4770      	bx	lr
  return HAL_OK;
 8000a36:	2000      	movs	r0, #0
 8000a38:	e7fb      	b.n	8000a32 <HAL_ADC_Start_IT+0xde>
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	e7f9      	b.n	8000a32 <HAL_ADC_Start_IT+0xde>
 8000a3e:	2000      	movs	r0, #0
 8000a40:	e7f7      	b.n	8000a32 <HAL_ADC_Start_IT+0xde>
 8000a42:	bf00      	nop
 8000a44:	20000008 	.word	0x20000008
 8000a48:	431bde83 	.word	0x431bde83
 8000a4c:	fffff8fe 	.word	0xfffff8fe
 8000a50:	04000020 	.word	0x04000020
 8000a54:	40012300 	.word	0x40012300
 8000a58:	40012000 	.word	0x40012000

08000a5c <HAL_ADC_Stop_IT>:
  __HAL_LOCK(hadc);
 8000a5c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000a60:	2b01      	cmp	r3, #1
 8000a62:	d01b      	beq.n	8000a9c <HAL_ADC_Stop_IT+0x40>
 8000a64:	2301      	movs	r3, #1
 8000a66:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_ADC_DISABLE(hadc);
 8000a6a:	6802      	ldr	r2, [r0, #0]
 8000a6c:	6893      	ldr	r3, [r2, #8]
 8000a6e:	f023 0301 	bic.w	r3, r3, #1
 8000a72:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8000a74:	6803      	ldr	r3, [r0, #0]
 8000a76:	689a      	ldr	r2, [r3, #8]
 8000a78:	f012 0f01 	tst.w	r2, #1
 8000a7c:	d109      	bne.n	8000a92 <HAL_ADC_Stop_IT+0x36>
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8000a7e:	6859      	ldr	r1, [r3, #4]
 8000a80:	4a07      	ldr	r2, [pc, #28]	; (8000aa0 <HAL_ADC_Stop_IT+0x44>)
 8000a82:	400a      	ands	r2, r1
 8000a84:	605a      	str	r2, [r3, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8000a86:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000a88:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <HAL_ADC_Stop_IT+0x48>)
 8000a8a:	4013      	ands	r3, r2
 8000a8c:	f043 0301 	orr.w	r3, r3, #1
 8000a90:	6403      	str	r3, [r0, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8000a92:	2300      	movs	r3, #0
 8000a94:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8000a98:	4618      	mov	r0, r3
 8000a9a:	4770      	bx	lr
  __HAL_LOCK(hadc);
 8000a9c:	2002      	movs	r0, #2
}
 8000a9e:	4770      	bx	lr
 8000aa0:	fbffffdf 	.word	0xfbffffdf
 8000aa4:	ffffeefe 	.word	0xffffeefe

08000aa8 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8000aa8:	6803      	ldr	r3, [r0, #0]
 8000aaa:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8000aac:	4770      	bx	lr

08000aae <HAL_ADC_LevelOutOfWindowCallback>:
{
 8000aae:	4770      	bx	lr

08000ab0 <HAL_ADC_ErrorCallback>:
{
 8000ab0:	4770      	bx	lr

08000ab2 <HAL_ADC_IRQHandler>:
{
 8000ab2:	b538      	push	{r3, r4, r5, lr}
 8000ab4:	4604      	mov	r4, r0
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8000ab6:	6802      	ldr	r2, [r0, #0]
 8000ab8:	6811      	ldr	r1, [r2, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8000aba:	6853      	ldr	r3, [r2, #4]
 8000abc:	f3c3 1340 	ubfx	r3, r3, #5, #1
  if(tmp1 && tmp2)
 8000ac0:	ea13 0351 	ands.w	r3, r3, r1, lsr #1
 8000ac4:	d02c      	beq.n	8000b20 <HAL_ADC_IRQHandler+0x6e>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ac6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000ac8:	f013 0f10 	tst.w	r3, #16
 8000acc:	d103      	bne.n	8000ad6 <HAL_ADC_IRQHandler+0x24>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000ace:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000ad0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ad4:	6403      	str	r3, [r0, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000ad6:	6893      	ldr	r3, [r2, #8]
 8000ad8:	f013 5f40 	tst.w	r3, #805306368	; 0x30000000
 8000adc:	d119      	bne.n	8000b12 <HAL_ADC_IRQHandler+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000ade:	69a3      	ldr	r3, [r4, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000ae0:	b9bb      	cbnz	r3, 8000b12 <HAL_ADC_IRQHandler+0x60>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000ae2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000ae4:	f413 0f70 	tst.w	r3, #15728640	; 0xf00000
 8000ae8:	d003      	beq.n	8000af2 <HAL_ADC_IRQHandler+0x40>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000aea:	6893      	ldr	r3, [r2, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000aec:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8000af0:	d10f      	bne.n	8000b12 <HAL_ADC_IRQHandler+0x60>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000af2:	6853      	ldr	r3, [r2, #4]
 8000af4:	f023 0320 	bic.w	r3, r3, #32
 8000af8:	6053      	str	r3, [r2, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000afa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000afc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000b00:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000b02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b04:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8000b08:	d103      	bne.n	8000b12 <HAL_ADC_IRQHandler+0x60>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000b0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b0c:	f043 0301 	orr.w	r3, r3, #1
 8000b10:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8000b12:	4620      	mov	r0, r4
 8000b14:	f002 faea 	bl	80030ec <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000b18:	6823      	ldr	r3, [r4, #0]
 8000b1a:	f06f 0212 	mvn.w	r2, #18
 8000b1e:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8000b20:	6823      	ldr	r3, [r4, #0]
 8000b22:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8000b24:	685a      	ldr	r2, [r3, #4]
 8000b26:	f3c2 12c0 	ubfx	r2, r2, #7, #1
  if(tmp1 && tmp2)
 8000b2a:	ea12 0291 	ands.w	r2, r2, r1, lsr #2
 8000b2e:	d034      	beq.n	8000b9a <HAL_ADC_IRQHandler+0xe8>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000b30:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000b32:	f012 0f10 	tst.w	r2, #16
 8000b36:	d103      	bne.n	8000b40 <HAL_ADC_IRQHandler+0x8e>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000b38:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000b3a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000b3e:	6422      	str	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000b40:	689a      	ldr	r2, [r3, #8]
 8000b42:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8000b46:	d121      	bne.n	8000b8c <HAL_ADC_IRQHandler+0xda>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8000b48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000b4a:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8000b4e:	d003      	beq.n	8000b58 <HAL_ADC_IRQHandler+0xa6>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8000b50:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8000b52:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8000b56:	d119      	bne.n	8000b8c <HAL_ADC_IRQHandler+0xda>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000b58:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8000b5a:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8000b5e:	d115      	bne.n	8000b8c <HAL_ADC_IRQHandler+0xda>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8000b60:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000b62:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8000b66:	d111      	bne.n	8000b8c <HAL_ADC_IRQHandler+0xda>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8000b68:	69a2      	ldr	r2, [r4, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8000b6a:	b97a      	cbnz	r2, 8000b8c <HAL_ADC_IRQHandler+0xda>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000b6c:	685a      	ldr	r2, [r3, #4]
 8000b6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000b72:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000b74:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000b7a:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000b7c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b7e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000b82:	d103      	bne.n	8000b8c <HAL_ADC_IRQHandler+0xda>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000b84:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b86:	f043 0301 	orr.w	r3, r3, #1
 8000b8a:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000b8c:	4620      	mov	r0, r4
 8000b8e:	f000 f907 	bl	8000da0 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000b92:	6823      	ldr	r3, [r4, #0]
 8000b94:	f06f 020c 	mvn.w	r2, #12
 8000b98:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8000b9a:	6822      	ldr	r2, [r4, #0]
 8000b9c:	6811      	ldr	r1, [r2, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8000b9e:	6853      	ldr	r3, [r2, #4]
 8000ba0:	f3c3 1380 	ubfx	r3, r3, #6, #1
  if(tmp1 && tmp2)
 8000ba4:	4219      	tst	r1, r3
 8000ba6:	d003      	beq.n	8000bb0 <HAL_ADC_IRQHandler+0xfe>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000ba8:	6813      	ldr	r3, [r2, #0]
 8000baa:	f013 0f01 	tst.w	r3, #1
 8000bae:	d108      	bne.n	8000bc2 <HAL_ADC_IRQHandler+0x110>
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8000bb0:	6822      	ldr	r2, [r4, #0]
 8000bb2:	6811      	ldr	r1, [r2, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8000bb4:	6853      	ldr	r3, [r2, #4]
 8000bb6:	f3c3 6380 	ubfx	r3, r3, #26, #1
  if(tmp1 && tmp2)
 8000bba:	ea13 1351 	ands.w	r3, r3, r1, lsr #5
 8000bbe:	d10c      	bne.n	8000bda <HAL_ADC_IRQHandler+0x128>
 8000bc0:	bd38      	pop	{r3, r4, r5, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000bc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000bc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bc8:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000bca:	4620      	mov	r0, r4
 8000bcc:	f7ff ff6f 	bl	8000aae <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000bd0:	6823      	ldr	r3, [r4, #0]
 8000bd2:	f06f 0201 	mvn.w	r2, #1
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	e7ea      	b.n	8000bb0 <HAL_ADC_IRQHandler+0xfe>
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000bda:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000bdc:	f043 0302 	orr.w	r3, r3, #2
 8000be0:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000be2:	f06f 0520 	mvn.w	r5, #32
 8000be6:	6015      	str	r5, [r2, #0]
    HAL_ADC_ErrorCallback(hadc);
 8000be8:	4620      	mov	r0, r4
 8000bea:	f7ff ff61 	bl	8000ab0 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000bee:	6823      	ldr	r3, [r4, #0]
 8000bf0:	601d      	str	r5, [r3, #0]
}
 8000bf2:	e7e5      	b.n	8000bc0 <HAL_ADC_IRQHandler+0x10e>

08000bf4 <HAL_ADC_ConfigChannel>:
{
 8000bf4:	b430      	push	{r4, r5}
 8000bf6:	b082      	sub	sp, #8
  __IO uint32_t counter = 0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000bfc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	f000 80c0 	beq.w	8000d86 <HAL_ADC_ConfigChannel+0x192>
 8000c06:	2301      	movs	r3, #1
 8000c08:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
	if (sConfig->Channel > ADC_CHANNEL_9)
 8000c0c:	680b      	ldr	r3, [r1, #0]
 8000c0e:	2b09      	cmp	r3, #9
 8000c10:	d922      	bls.n	8000c58 <HAL_ADC_ConfigChannel+0x64>
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000c12:	6805      	ldr	r5, [r0, #0]
 8000c14:	68ea      	ldr	r2, [r5, #12]
 8000c16:	b29b      	uxth	r3, r3
 8000c18:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000c1c:	3b1e      	subs	r3, #30
 8000c1e:	2407      	movs	r4, #7
 8000c20:	fa04 f303 	lsl.w	r3, r4, r3
 8000c24:	ea22 0303 	bic.w	r3, r2, r3
 8000c28:	60eb      	str	r3, [r5, #12]
		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000c2a:	680b      	ldr	r3, [r1, #0]
 8000c2c:	4a57      	ldr	r2, [pc, #348]	; (8000d8c <HAL_ADC_ConfigChannel+0x198>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d00b      	beq.n	8000c4a <HAL_ADC_ConfigChannel+0x56>
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000c32:	6805      	ldr	r5, [r0, #0]
 8000c34:	68ea      	ldr	r2, [r5, #12]
 8000c36:	688c      	ldr	r4, [r1, #8]
 8000c38:	b29b      	uxth	r3, r3
 8000c3a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000c3e:	3b1e      	subs	r3, #30
 8000c40:	fa04 f303 	lsl.w	r3, r4, r3
 8000c44:	4313      	orrs	r3, r2
 8000c46:	60eb      	str	r3, [r5, #12]
 8000c48:	e01b      	b.n	8000c82 <HAL_ADC_ConfigChannel+0x8e>
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8000c4a:	6802      	ldr	r2, [r0, #0]
 8000c4c:	68d3      	ldr	r3, [r2, #12]
 8000c4e:	688c      	ldr	r4, [r1, #8]
 8000c50:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 8000c54:	60d3      	str	r3, [r2, #12]
 8000c56:	e014      	b.n	8000c82 <HAL_ADC_ConfigChannel+0x8e>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000c58:	6805      	ldr	r5, [r0, #0]
 8000c5a:	692a      	ldr	r2, [r5, #16]
 8000c5c:	b29b      	uxth	r3, r3
 8000c5e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000c62:	2407      	movs	r4, #7
 8000c64:	fa04 f303 	lsl.w	r3, r4, r3
 8000c68:	ea22 0303 	bic.w	r3, r2, r3
 8000c6c:	612b      	str	r3, [r5, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000c6e:	6805      	ldr	r5, [r0, #0]
 8000c70:	692a      	ldr	r2, [r5, #16]
 8000c72:	688c      	ldr	r4, [r1, #8]
 8000c74:	880b      	ldrh	r3, [r1, #0]
 8000c76:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000c7a:	fa04 f303 	lsl.w	r3, r4, r3
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	612b      	str	r3, [r5, #16]
  if (sConfig->Rank < 7)
 8000c82:	684b      	ldr	r3, [r1, #4]
 8000c84:	2b06      	cmp	r3, #6
 8000c86:	d824      	bhi.n	8000cd2 <HAL_ADC_ConfigChannel+0xde>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000c88:	6805      	ldr	r5, [r0, #0]
 8000c8a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000c8c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000c90:	3b05      	subs	r3, #5
 8000c92:	241f      	movs	r4, #31
 8000c94:	fa04 f303 	lsl.w	r3, r4, r3
 8000c98:	ea22 0303 	bic.w	r3, r2, r3
 8000c9c:	636b      	str	r3, [r5, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000c9e:	6805      	ldr	r5, [r0, #0]
 8000ca0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000ca2:	684b      	ldr	r3, [r1, #4]
 8000ca4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000ca8:	3b05      	subs	r3, #5
 8000caa:	880c      	ldrh	r4, [r1, #0]
 8000cac:	fa04 f303 	lsl.w	r3, r4, r3
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	636b      	str	r3, [r5, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000cb4:	6802      	ldr	r2, [r0, #0]
 8000cb6:	4b36      	ldr	r3, [pc, #216]	; (8000d90 <HAL_ADC_ConfigChannel+0x19c>)
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d03a      	beq.n	8000d32 <HAL_ADC_ConfigChannel+0x13e>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000cbc:	6802      	ldr	r2, [r0, #0]
 8000cbe:	4b34      	ldr	r3, [pc, #208]	; (8000d90 <HAL_ADC_ConfigChannel+0x19c>)
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d03f      	beq.n	8000d44 <HAL_ADC_ConfigChannel+0x150>
  __HAL_UNLOCK(hadc);
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8000cca:	4618      	mov	r0, r3
}
 8000ccc:	b002      	add	sp, #8
 8000cce:	bc30      	pop	{r4, r5}
 8000cd0:	4770      	bx	lr
  else if (sConfig->Rank < 13)
 8000cd2:	2b0c      	cmp	r3, #12
 8000cd4:	d816      	bhi.n	8000d04 <HAL_ADC_ConfigChannel+0x110>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000cd6:	6805      	ldr	r5, [r0, #0]
 8000cd8:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8000cda:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000cde:	3b23      	subs	r3, #35	; 0x23
 8000ce0:	241f      	movs	r4, #31
 8000ce2:	fa04 f303 	lsl.w	r3, r4, r3
 8000ce6:	ea22 0303 	bic.w	r3, r2, r3
 8000cea:	632b      	str	r3, [r5, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000cec:	6805      	ldr	r5, [r0, #0]
 8000cee:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8000cf0:	684b      	ldr	r3, [r1, #4]
 8000cf2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000cf6:	3b23      	subs	r3, #35	; 0x23
 8000cf8:	880c      	ldrh	r4, [r1, #0]
 8000cfa:	fa04 f303 	lsl.w	r3, r4, r3
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	632b      	str	r3, [r5, #48]	; 0x30
 8000d02:	e7d7      	b.n	8000cb4 <HAL_ADC_ConfigChannel+0xc0>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000d04:	6805      	ldr	r5, [r0, #0]
 8000d06:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8000d08:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000d0c:	3b41      	subs	r3, #65	; 0x41
 8000d0e:	241f      	movs	r4, #31
 8000d10:	fa04 f303 	lsl.w	r3, r4, r3
 8000d14:	ea22 0303 	bic.w	r3, r2, r3
 8000d18:	62eb      	str	r3, [r5, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000d1a:	6805      	ldr	r5, [r0, #0]
 8000d1c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8000d1e:	684b      	ldr	r3, [r1, #4]
 8000d20:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000d24:	3b41      	subs	r3, #65	; 0x41
 8000d26:	880c      	ldrh	r4, [r1, #0]
 8000d28:	fa04 f303 	lsl.w	r3, r4, r3
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	62eb      	str	r3, [r5, #44]	; 0x2c
 8000d30:	e7c0      	b.n	8000cb4 <HAL_ADC_ConfigChannel+0xc0>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000d32:	680b      	ldr	r3, [r1, #0]
 8000d34:	2b12      	cmp	r3, #18
 8000d36:	d1c1      	bne.n	8000cbc <HAL_ADC_ConfigChannel+0xc8>
    ADC->CCR |= ADC_CCR_VBATE;
 8000d38:	4a16      	ldr	r2, [pc, #88]	; (8000d94 <HAL_ADC_ConfigChannel+0x1a0>)
 8000d3a:	6853      	ldr	r3, [r2, #4]
 8000d3c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d40:	6053      	str	r3, [r2, #4]
 8000d42:	e7bb      	b.n	8000cbc <HAL_ADC_ConfigChannel+0xc8>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000d44:	680b      	ldr	r3, [r1, #0]
 8000d46:	4a11      	ldr	r2, [pc, #68]	; (8000d8c <HAL_ADC_ConfigChannel+0x198>)
 8000d48:	2b11      	cmp	r3, #17
 8000d4a:	bf18      	it	ne
 8000d4c:	4293      	cmpne	r3, r2
 8000d4e:	d1b9      	bne.n	8000cc4 <HAL_ADC_ConfigChannel+0xd0>
    ADC->CCR |= ADC_CCR_TSVREFE;
 8000d50:	4a10      	ldr	r2, [pc, #64]	; (8000d94 <HAL_ADC_ConfigChannel+0x1a0>)
 8000d52:	6853      	ldr	r3, [r2, #4]
 8000d54:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000d58:	6053      	str	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000d5a:	680a      	ldr	r2, [r1, #0]
 8000d5c:	4b0b      	ldr	r3, [pc, #44]	; (8000d8c <HAL_ADC_ConfigChannel+0x198>)
 8000d5e:	429a      	cmp	r2, r3
 8000d60:	d1b0      	bne.n	8000cc4 <HAL_ADC_ConfigChannel+0xd0>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8000d62:	4b0d      	ldr	r3, [pc, #52]	; (8000d98 <HAL_ADC_ConfigChannel+0x1a4>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a0d      	ldr	r2, [pc, #52]	; (8000d9c <HAL_ADC_ConfigChannel+0x1a8>)
 8000d68:	fba2 2303 	umull	r2, r3, r2, r3
 8000d6c:	0c9b      	lsrs	r3, r3, #18
 8000d6e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000d72:	005a      	lsls	r2, r3, #1
 8000d74:	9201      	str	r2, [sp, #4]
      while(counter != 0)
 8000d76:	e002      	b.n	8000d7e <HAL_ADC_ConfigChannel+0x18a>
        counter--;
 8000d78:	9b01      	ldr	r3, [sp, #4]
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8000d7e:	9b01      	ldr	r3, [sp, #4]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d1f9      	bne.n	8000d78 <HAL_ADC_ConfigChannel+0x184>
 8000d84:	e79e      	b.n	8000cc4 <HAL_ADC_ConfigChannel+0xd0>
  __HAL_LOCK(hadc);
 8000d86:	2002      	movs	r0, #2
 8000d88:	e7a0      	b.n	8000ccc <HAL_ADC_ConfigChannel+0xd8>
 8000d8a:	bf00      	nop
 8000d8c:	10000012 	.word	0x10000012
 8000d90:	40012000 	.word	0x40012000
 8000d94:	40012300 	.word	0x40012300
 8000d98:	20000008 	.word	0x20000008
 8000d9c:	431bde83 	.word	0x431bde83

08000da0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000da0:	4770      	bx	lr
	...

08000da4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000da4:	4906      	ldr	r1, [pc, #24]	; (8000dc0 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8000da6:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000da8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000dac:	041b      	lsls	r3, r3, #16
 8000dae:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000db0:	0200      	lsls	r0, r0, #8
 8000db2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000db6:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000db8:	4a02      	ldr	r2, [pc, #8]	; (8000dc4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000dba:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8000dbc:	60ca      	str	r2, [r1, #12]
 8000dbe:	4770      	bx	lr
 8000dc0:	e000ed00 	.word	0xe000ed00
 8000dc4:	05fa0000 	.word	0x05fa0000

08000dc8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dc8:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dca:	4b14      	ldr	r3, [pc, #80]	; (8000e1c <HAL_NVIC_SetPriority+0x54>)
 8000dcc:	68db      	ldr	r3, [r3, #12]
 8000dce:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dd2:	f1c3 0407 	rsb	r4, r3, #7
 8000dd6:	2c04      	cmp	r4, #4
 8000dd8:	bf28      	it	cs
 8000dda:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ddc:	1d1d      	adds	r5, r3, #4
 8000dde:	2d06      	cmp	r5, #6
 8000de0:	d913      	bls.n	8000e0a <HAL_NVIC_SetPriority+0x42>
 8000de2:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de4:	2501      	movs	r5, #1
 8000de6:	fa05 f404 	lsl.w	r4, r5, r4
 8000dea:	3c01      	subs	r4, #1
 8000dec:	4021      	ands	r1, r4
 8000dee:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000df0:	fa05 f303 	lsl.w	r3, r5, r3
 8000df4:	3b01      	subs	r3, #1
 8000df6:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df8:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 8000dfa:	2800      	cmp	r0, #0
 8000dfc:	db07      	blt.n	8000e0e <HAL_NVIC_SetPriority+0x46>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfe:	0109      	lsls	r1, r1, #4
 8000e00:	b2c9      	uxtb	r1, r1
 8000e02:	4b07      	ldr	r3, [pc, #28]	; (8000e20 <HAL_NVIC_SetPriority+0x58>)
 8000e04:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000e06:	bc30      	pop	{r4, r5}
 8000e08:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	e7ea      	b.n	8000de4 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0e:	f000 000f 	and.w	r0, r0, #15
 8000e12:	0109      	lsls	r1, r1, #4
 8000e14:	b2c9      	uxtb	r1, r1
 8000e16:	4b03      	ldr	r3, [pc, #12]	; (8000e24 <HAL_NVIC_SetPriority+0x5c>)
 8000e18:	5419      	strb	r1, [r3, r0]
 8000e1a:	e7f4      	b.n	8000e06 <HAL_NVIC_SetPriority+0x3e>
 8000e1c:	e000ed00 	.word	0xe000ed00
 8000e20:	e000e400 	.word	0xe000e400
 8000e24:	e000ed14 	.word	0xe000ed14

08000e28 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000e28:	0942      	lsrs	r2, r0, #5
 8000e2a:	f000 001f 	and.w	r0, r0, #31
 8000e2e:	2301      	movs	r3, #1
 8000e30:	fa03 f000 	lsl.w	r0, r3, r0
 8000e34:	4b01      	ldr	r3, [pc, #4]	; (8000e3c <HAL_NVIC_EnableIRQ+0x14>)
 8000e36:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000e3a:	4770      	bx	lr
 8000e3c:	e000e100 	.word	0xe000e100

08000e40 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e40:	3801      	subs	r0, #1
 8000e42:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000e46:	d20a      	bcs.n	8000e5e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e48:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <HAL_SYSTICK_Config+0x24>)
 8000e4a:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e4c:	21f0      	movs	r1, #240	; 0xf0
 8000e4e:	4a06      	ldr	r2, [pc, #24]	; (8000e68 <HAL_SYSTICK_Config+0x28>)
 8000e50:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e54:	2000      	movs	r0, #0
 8000e56:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e58:	2207      	movs	r2, #7
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000e5e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	e000e010 	.word	0xe000e010
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000e6c:	2804      	cmp	r0, #4
 8000e6e:	d005      	beq.n	8000e7c <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000e70:	4a05      	ldr	r2, [pc, #20]	; (8000e88 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8000e72:	6813      	ldr	r3, [r2, #0]
 8000e74:	f023 0304 	bic.w	r3, r3, #4
 8000e78:	6013      	str	r3, [r2, #0]
 8000e7a:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000e7c:	4a02      	ldr	r2, [pc, #8]	; (8000e88 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8000e7e:	6813      	ldr	r3, [r2, #0]
 8000e80:	f043 0304 	orr.w	r3, r3, #4
 8000e84:	6013      	str	r3, [r2, #0]
 8000e86:	4770      	bx	lr
 8000e88:	e000e010 	.word	0xe000e010

08000e8c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000e8c:	4770      	bx	lr

08000e8e <HAL_SYSTICK_IRQHandler>:
{
 8000e8e:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000e90:	f7ff fffc 	bl	8000e8c <HAL_SYSTICK_Callback>
 8000e94:	bd08      	pop	{r3, pc}

08000e96 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e96:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000e98:	6805      	ldr	r5, [r0, #0]
 8000e9a:	682c      	ldr	r4, [r5, #0]
 8000e9c:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8000ea0:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000ea2:	6804      	ldr	r4, [r0, #0]
 8000ea4:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000ea6:	6883      	ldr	r3, [r0, #8]
 8000ea8:	2b40      	cmp	r3, #64	; 0x40
 8000eaa:	d005      	beq.n	8000eb8 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8000eac:	6803      	ldr	r3, [r0, #0]
 8000eae:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8000eb0:	6803      	ldr	r3, [r0, #0]
 8000eb2:	60da      	str	r2, [r3, #12]
  }
}
 8000eb4:	bc30      	pop	{r4, r5}
 8000eb6:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8000eb8:	6803      	ldr	r3, [r0, #0]
 8000eba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8000ebc:	6803      	ldr	r3, [r0, #0]
 8000ebe:	60d9      	str	r1, [r3, #12]
 8000ec0:	e7f8      	b.n	8000eb4 <DMA_SetConfig+0x1e>
	...

08000ec4 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000ec4:	6802      	ldr	r2, [r0, #0]
 8000ec6:	b2d3      	uxtb	r3, r2
 8000ec8:	3b10      	subs	r3, #16
 8000eca:	4909      	ldr	r1, [pc, #36]	; (8000ef0 <DMA_CalcBaseAndBitshift+0x2c>)
 8000ecc:	fba1 1303 	umull	r1, r3, r1, r3
 8000ed0:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000ed2:	4908      	ldr	r1, [pc, #32]	; (8000ef4 <DMA_CalcBaseAndBitshift+0x30>)
 8000ed4:	5cc9      	ldrb	r1, [r1, r3]
 8000ed6:	65c1      	str	r1, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000ed8:	2b03      	cmp	r3, #3
 8000eda:	d804      	bhi.n	8000ee6 <DMA_CalcBaseAndBitshift+0x22>
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000edc:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <DMA_CalcBaseAndBitshift+0x34>)
 8000ede:	4013      	ands	r3, r2
 8000ee0:	6583      	str	r3, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 8000ee2:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8000ee4:	4770      	bx	lr
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000ee6:	4b04      	ldr	r3, [pc, #16]	; (8000ef8 <DMA_CalcBaseAndBitshift+0x34>)
 8000ee8:	4013      	ands	r3, r2
 8000eea:	3304      	adds	r3, #4
 8000eec:	6583      	str	r3, [r0, #88]	; 0x58
 8000eee:	e7f8      	b.n	8000ee2 <DMA_CalcBaseAndBitshift+0x1e>
 8000ef0:	aaaaaaab 	.word	0xaaaaaaab
 8000ef4:	0800396c 	.word	0x0800396c
 8000ef8:	fffffc00 	.word	0xfffffc00

08000efc <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000efc:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000efe:	6982      	ldr	r2, [r0, #24]
 8000f00:	b992      	cbnz	r2, 8000f28 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d00a      	beq.n	8000f1c <DMA_CheckFifoParam+0x20>
 8000f06:	b11b      	cbz	r3, 8000f10 <DMA_CheckFifoParam+0x14>
 8000f08:	2b02      	cmp	r3, #2
 8000f0a:	d001      	beq.n	8000f10 <DMA_CheckFifoParam+0x14>
  HAL_StatusTypeDef status = HAL_OK;
 8000f0c:	2000      	movs	r0, #0
 8000f0e:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000f10:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000f12:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8000f16:	d12c      	bne.n	8000f72 <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 8000f18:	2000      	movs	r0, #0
 8000f1a:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000f1c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000f1e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000f22:	d028      	beq.n	8000f76 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8000f24:	2000      	movs	r0, #0
 8000f26:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000f28:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000f2c:	d005      	beq.n	8000f3a <DMA_CheckFifoParam+0x3e>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	d929      	bls.n	8000f86 <DMA_CheckFifoParam+0x8a>
 8000f32:	2b03      	cmp	r3, #3
 8000f34:	d015      	beq.n	8000f62 <DMA_CheckFifoParam+0x66>
  HAL_StatusTypeDef status = HAL_OK;
 8000f36:	2000      	movs	r0, #0
 8000f38:	4770      	bx	lr
    switch (tmp)
 8000f3a:	2b03      	cmp	r3, #3
 8000f3c:	d803      	bhi.n	8000f46 <DMA_CheckFifoParam+0x4a>
 8000f3e:	e8df f003 	tbb	[pc, r3]
 8000f42:	041c      	.short	0x041c
 8000f44:	0a1c      	.short	0x0a1c
  HAL_StatusTypeDef status = HAL_OK;
 8000f46:	2000      	movs	r0, #0
 8000f48:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000f4a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000f4c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8000f50:	d115      	bne.n	8000f7e <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 8000f52:	2000      	movs	r0, #0
 8000f54:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000f56:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000f58:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000f5c:	d011      	beq.n	8000f82 <DMA_CheckFifoParam+0x86>
  HAL_StatusTypeDef status = HAL_OK;
 8000f5e:	2000      	movs	r0, #0
 8000f60:	4770      	bx	lr
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000f62:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000f64:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8000f68:	d001      	beq.n	8000f6e <DMA_CheckFifoParam+0x72>
      {
        status = HAL_ERROR;
 8000f6a:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8000f6c:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 8000f6e:	2000      	movs	r0, #0
 8000f70:	4770      	bx	lr
        status = HAL_ERROR;
 8000f72:	2001      	movs	r0, #1
 8000f74:	4770      	bx	lr
        status = HAL_ERROR;
 8000f76:	2001      	movs	r0, #1
 8000f78:	4770      	bx	lr
      status = HAL_ERROR;
 8000f7a:	2001      	movs	r0, #1
 8000f7c:	4770      	bx	lr
        status = HAL_ERROR;
 8000f7e:	2001      	movs	r0, #1
 8000f80:	4770      	bx	lr
        status = HAL_ERROR;
 8000f82:	2001      	movs	r0, #1
 8000f84:	4770      	bx	lr
      status = HAL_ERROR;
 8000f86:	2001      	movs	r0, #1
 8000f88:	4770      	bx	lr
	...

08000f8c <HAL_DMA_Init>:
{
 8000f8c:	b570      	push	{r4, r5, r6, lr}
 8000f8e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000f90:	f7ff fb0c 	bl	80005ac <HAL_GetTick>
  if(hdma == NULL)
 8000f94:	2c00      	cmp	r4, #0
 8000f96:	d05d      	beq.n	8001054 <HAL_DMA_Init+0xc8>
 8000f98:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8000fa6:	6822      	ldr	r2, [r4, #0]
 8000fa8:	6813      	ldr	r3, [r2, #0]
 8000faa:	f023 0301 	bic.w	r3, r3, #1
 8000fae:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fb0:	6823      	ldr	r3, [r4, #0]
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	f012 0f01 	tst.w	r2, #1
 8000fb8:	d00a      	beq.n	8000fd0 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000fba:	f7ff faf7 	bl	80005ac <HAL_GetTick>
 8000fbe:	1b40      	subs	r0, r0, r5
 8000fc0:	2805      	cmp	r0, #5
 8000fc2:	d9f5      	bls.n	8000fb0 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000fc4:	2320      	movs	r3, #32
 8000fc6:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000fc8:	2003      	movs	r0, #3
 8000fca:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
      return HAL_TIMEOUT;
 8000fce:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8000fd0:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000fd2:	4921      	ldr	r1, [pc, #132]	; (8001058 <HAL_DMA_Init+0xcc>)
 8000fd4:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000fd6:	6862      	ldr	r2, [r4, #4]
 8000fd8:	68a0      	ldr	r0, [r4, #8]
 8000fda:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fdc:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000fde:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fe0:	6920      	ldr	r0, [r4, #16]
 8000fe2:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fe4:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fe6:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fe8:	69a0      	ldr	r0, [r4, #24]
 8000fea:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fec:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fee:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ff0:	6a20      	ldr	r0, [r4, #32]
 8000ff2:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ff4:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000ff6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000ff8:	2904      	cmp	r1, #4
 8000ffa:	d016      	beq.n	800102a <HAL_DMA_Init+0x9e>
  hdma->Instance->CR = tmp;  
 8000ffc:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8000ffe:	6826      	ldr	r6, [r4, #0]
 8001000:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001002:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8001006:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001008:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800100a:	2b04      	cmp	r3, #4
 800100c:	d012      	beq.n	8001034 <HAL_DMA_Init+0xa8>
  hdma->Instance->FCR = tmp;
 800100e:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001010:	4620      	mov	r0, r4
 8001012:	f7ff ff57 	bl	8000ec4 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001016:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001018:	233f      	movs	r3, #63	; 0x3f
 800101a:	4093      	lsls	r3, r2
 800101c:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800101e:	2000      	movs	r0, #0
 8001020:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001022:	2301      	movs	r3, #1
 8001024:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001028:	bd70      	pop	{r4, r5, r6, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800102a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800102c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800102e:	4301      	orrs	r1, r0
 8001030:	430a      	orrs	r2, r1
 8001032:	e7e3      	b.n	8000ffc <HAL_DMA_Init+0x70>
    tmp |= hdma->Init.FIFOThreshold;
 8001034:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001036:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001038:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800103a:	2b00      	cmp	r3, #0
 800103c:	d0e7      	beq.n	800100e <HAL_DMA_Init+0x82>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800103e:	4620      	mov	r0, r4
 8001040:	f7ff ff5c 	bl	8000efc <DMA_CheckFifoParam>
 8001044:	2800      	cmp	r0, #0
 8001046:	d0e2      	beq.n	800100e <HAL_DMA_Init+0x82>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001048:	2340      	movs	r3, #64	; 0x40
 800104a:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800104c:	2001      	movs	r0, #1
 800104e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8001052:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001054:	2001      	movs	r0, #1
}
 8001056:	bd70      	pop	{r4, r5, r6, pc}
 8001058:	e010803f 	.word	0xe010803f

0800105c <HAL_DMA_Start_IT>:
{
 800105c:	b538      	push	{r3, r4, r5, lr}
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800105e:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8001060:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8001064:	2c01      	cmp	r4, #1
 8001066:	d031      	beq.n	80010cc <HAL_DMA_Start_IT+0x70>
 8001068:	2401      	movs	r4, #1
 800106a:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800106e:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8001072:	b2e4      	uxtb	r4, r4
 8001074:	2c01      	cmp	r4, #1
 8001076:	d004      	beq.n	8001082 <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);	  
 8001078:	2300      	movs	r3, #0
 800107a:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    status = HAL_BUSY;
 800107e:	2002      	movs	r0, #2
 8001080:	bd38      	pop	{r3, r4, r5, pc}
 8001082:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 8001084:	2002      	movs	r0, #2
 8001086:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800108a:	2000      	movs	r0, #0
 800108c:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800108e:	4620      	mov	r0, r4
 8001090:	f7ff ff01 	bl	8000e96 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001094:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001096:	233f      	movs	r3, #63	; 0x3f
 8001098:	4093      	lsls	r3, r2
 800109a:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800109c:	6822      	ldr	r2, [r4, #0]
 800109e:	6813      	ldr	r3, [r2, #0]
 80010a0:	f043 0316 	orr.w	r3, r3, #22
 80010a4:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80010a6:	6822      	ldr	r2, [r4, #0]
 80010a8:	6953      	ldr	r3, [r2, #20]
 80010aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010ae:	6153      	str	r3, [r2, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 80010b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80010b2:	b123      	cbz	r3, 80010be <HAL_DMA_Start_IT+0x62>
      hdma->Instance->CR  |= DMA_IT_HT;
 80010b4:	6822      	ldr	r2, [r4, #0]
 80010b6:	6813      	ldr	r3, [r2, #0]
 80010b8:	f043 0308 	orr.w	r3, r3, #8
 80010bc:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 80010be:	6822      	ldr	r2, [r4, #0]
 80010c0:	6813      	ldr	r3, [r2, #0]
 80010c2:	f043 0301 	orr.w	r3, r3, #1
 80010c6:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80010c8:	2000      	movs	r0, #0
 80010ca:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hdma);
 80010cc:	2002      	movs	r0, #2
}
 80010ce:	bd38      	pop	{r3, r4, r5, pc}

080010d0 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010d0:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	2b02      	cmp	r3, #2
 80010d8:	d003      	beq.n	80010e2 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010da:	2380      	movs	r3, #128	; 0x80
 80010dc:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80010de:	2001      	movs	r0, #1
 80010e0:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 80010e2:	2305      	movs	r3, #5
 80010e4:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80010e8:	6802      	ldr	r2, [r0, #0]
 80010ea:	6813      	ldr	r3, [r2, #0]
 80010ec:	f023 0301 	bic.w	r3, r3, #1
 80010f0:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80010f2:	2000      	movs	r0, #0
}
 80010f4:	4770      	bx	lr
	...

080010f8 <HAL_DMA_IRQHandler>:
{
 80010f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010fa:	b083      	sub	sp, #12
 80010fc:	4604      	mov	r4, r0
  __IO uint32_t count = 0;
 80010fe:	2300      	movs	r3, #0
 8001100:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600;
 8001102:	4b72      	ldr	r3, [pc, #456]	; (80012cc <HAL_DMA_IRQHandler+0x1d4>)
 8001104:	681d      	ldr	r5, [r3, #0]
 8001106:	4b72      	ldr	r3, [pc, #456]	; (80012d0 <HAL_DMA_IRQHandler+0x1d8>)
 8001108:	fba3 3505 	umull	r3, r5, r3, r5
 800110c:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800110e:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8001110:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001112:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001114:	2308      	movs	r3, #8
 8001116:	4093      	lsls	r3, r2
 8001118:	421e      	tst	r6, r3
 800111a:	d010      	beq.n	800113e <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800111c:	6803      	ldr	r3, [r0, #0]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	f012 0f04 	tst.w	r2, #4
 8001124:	d00b      	beq.n	800113e <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	f022 0204 	bic.w	r2, r2, #4
 800112c:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800112e:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001130:	2308      	movs	r3, #8
 8001132:	4093      	lsls	r3, r2
 8001134:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001136:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001138:	f043 0301 	orr.w	r3, r3, #1
 800113c:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800113e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001140:	2301      	movs	r3, #1
 8001142:	4093      	lsls	r3, r2
 8001144:	421e      	tst	r6, r3
 8001146:	d009      	beq.n	800115c <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001148:	6822      	ldr	r2, [r4, #0]
 800114a:	6952      	ldr	r2, [r2, #20]
 800114c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001150:	d004      	beq.n	800115c <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001152:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001154:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001156:	f043 0302 	orr.w	r3, r3, #2
 800115a:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800115c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800115e:	2304      	movs	r3, #4
 8001160:	4093      	lsls	r3, r2
 8001162:	421e      	tst	r6, r3
 8001164:	d009      	beq.n	800117a <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001166:	6822      	ldr	r2, [r4, #0]
 8001168:	6812      	ldr	r2, [r2, #0]
 800116a:	f012 0f02 	tst.w	r2, #2
 800116e:	d004      	beq.n	800117a <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001170:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001172:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001174:	f043 0304 	orr.w	r3, r3, #4
 8001178:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800117a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800117c:	2310      	movs	r3, #16
 800117e:	4093      	lsls	r3, r2
 8001180:	421e      	tst	r6, r3
 8001182:	d024      	beq.n	80011ce <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001184:	6822      	ldr	r2, [r4, #0]
 8001186:	6812      	ldr	r2, [r2, #0]
 8001188:	f012 0f08 	tst.w	r2, #8
 800118c:	d01f      	beq.n	80011ce <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800118e:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001190:	6823      	ldr	r3, [r4, #0]
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8001198:	d00d      	beq.n	80011b6 <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80011a0:	d104      	bne.n	80011ac <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 80011a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80011a4:	b19b      	cbz	r3, 80011ce <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 80011a6:	4620      	mov	r0, r4
 80011a8:	4798      	blx	r3
 80011aa:	e010      	b.n	80011ce <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80011ac:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80011ae:	b173      	cbz	r3, 80011ce <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 80011b0:	4620      	mov	r0, r4
 80011b2:	4798      	blx	r3
 80011b4:	e00b      	b.n	80011ce <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	f412 7f80 	tst.w	r2, #256	; 0x100
 80011bc:	d103      	bne.n	80011c6 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	f022 0208 	bic.w	r2, r2, #8
 80011c4:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 80011c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80011c8:	b10b      	cbz	r3, 80011ce <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 80011ca:	4620      	mov	r0, r4
 80011cc:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80011ce:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80011d0:	2320      	movs	r3, #32
 80011d2:	4093      	lsls	r3, r2
 80011d4:	421e      	tst	r6, r3
 80011d6:	d055      	beq.n	8001284 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80011d8:	6822      	ldr	r2, [r4, #0]
 80011da:	6812      	ldr	r2, [r2, #0]
 80011dc:	f012 0f10 	tst.w	r2, #16
 80011e0:	d050      	beq.n	8001284 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80011e2:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80011e4:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	2b05      	cmp	r3, #5
 80011ec:	d00e      	beq.n	800120c <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80011ee:	6823      	ldr	r3, [r4, #0]
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80011f6:	d033      	beq.n	8001260 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80011fe:	d12a      	bne.n	8001256 <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8001200:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001202:	2b00      	cmp	r3, #0
 8001204:	d03e      	beq.n	8001284 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 8001206:	4620      	mov	r0, r4
 8001208:	4798      	blx	r3
 800120a:	e03b      	b.n	8001284 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800120c:	6822      	ldr	r2, [r4, #0]
 800120e:	6813      	ldr	r3, [r2, #0]
 8001210:	f023 0316 	bic.w	r3, r3, #22
 8001214:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001216:	6822      	ldr	r2, [r4, #0]
 8001218:	6953      	ldr	r3, [r2, #20]
 800121a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800121e:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001220:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001222:	b1a3      	cbz	r3, 800124e <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001224:	6822      	ldr	r2, [r4, #0]
 8001226:	6813      	ldr	r3, [r2, #0]
 8001228:	f023 0308 	bic.w	r3, r3, #8
 800122c:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800122e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001230:	233f      	movs	r3, #63	; 0x3f
 8001232:	4093      	lsls	r3, r2
 8001234:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 8001236:	2300      	movs	r3, #0
 8001238:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 800123c:	2301      	movs	r3, #1
 800123e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8001242:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001244:	2b00      	cmp	r3, #0
 8001246:	d03f      	beq.n	80012c8 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8001248:	4620      	mov	r0, r4
 800124a:	4798      	blx	r3
 800124c:	e03c      	b.n	80012c8 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800124e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001250:	2b00      	cmp	r3, #0
 8001252:	d1e7      	bne.n	8001224 <HAL_DMA_IRQHandler+0x12c>
 8001254:	e7eb      	b.n	800122e <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8001256:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001258:	b1a3      	cbz	r3, 8001284 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 800125a:	4620      	mov	r0, r4
 800125c:	4798      	blx	r3
 800125e:	e011      	b.n	8001284 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001266:	d109      	bne.n	800127c <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	f022 0210 	bic.w	r2, r2, #16
 800126e:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 8001270:	2300      	movs	r3, #0
 8001272:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8001276:	2301      	movs	r3, #1
 8001278:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 800127c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800127e:	b10b      	cbz	r3, 8001284 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8001280:	4620      	mov	r0, r4
 8001282:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001284:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001286:	b1fb      	cbz	r3, 80012c8 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001288:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800128a:	f013 0f01 	tst.w	r3, #1
 800128e:	d017      	beq.n	80012c0 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8001290:	2305      	movs	r3, #5
 8001292:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8001296:	6822      	ldr	r2, [r4, #0]
 8001298:	6813      	ldr	r3, [r2, #0]
 800129a:	f023 0301 	bic.w	r3, r3, #1
 800129e:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 80012a0:	9b01      	ldr	r3, [sp, #4]
 80012a2:	3301      	adds	r3, #1
 80012a4:	9301      	str	r3, [sp, #4]
 80012a6:	429d      	cmp	r5, r3
 80012a8:	d304      	bcc.n	80012b4 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80012aa:	6823      	ldr	r3, [r4, #0]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f013 0f01 	tst.w	r3, #1
 80012b2:	d1f5      	bne.n	80012a0 <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 80012b4:	2300      	movs	r3, #0
 80012b6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80012ba:	2301      	movs	r3, #1
 80012bc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 80012c0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80012c2:	b10b      	cbz	r3, 80012c8 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 80012c4:	4620      	mov	r0, r4
 80012c6:	4798      	blx	r3
}
 80012c8:	b003      	add	sp, #12
 80012ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012cc:	20000008 	.word	0x20000008
 80012d0:	1b4e81b5 	.word	0x1b4e81b5

080012d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012d6:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80012d8:	2400      	movs	r4, #0
 80012da:	e037      	b.n	800134c <HAL_GPIO_Init+0x78>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80012dc:	2607      	movs	r6, #7
 80012de:	e000      	b.n	80012e2 <HAL_GPIO_Init+0xe>
 80012e0:	2600      	movs	r6, #0
 80012e2:	fa06 f60e 	lsl.w	r6, r6, lr
 80012e6:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 80012e8:	3302      	adds	r3, #2
 80012ea:	4e66      	ldr	r6, [pc, #408]	; (8001484 <HAL_GPIO_Init+0x1b0>)
 80012ec:	f846 2023 	str.w	r2, [r6, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012f0:	4b65      	ldr	r3, [pc, #404]	; (8001488 <HAL_GPIO_Init+0x1b4>)
 80012f2:	681a      	ldr	r2, [r3, #0]
        temp &= ~((uint32_t)iocurrent);
 80012f4:	43eb      	mvns	r3, r5
 80012f6:	ea02 0603 	and.w	r6, r2, r3
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012fa:	684f      	ldr	r7, [r1, #4]
 80012fc:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8001300:	d001      	beq.n	8001306 <HAL_GPIO_Init+0x32>
        {
          temp |= iocurrent;
 8001302:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->IMR = temp;
 8001306:	4a60      	ldr	r2, [pc, #384]	; (8001488 <HAL_GPIO_Init+0x1b4>)
 8001308:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 800130a:	6852      	ldr	r2, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 800130c:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001310:	684f      	ldr	r7, [r1, #4]
 8001312:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8001316:	d001      	beq.n	800131c <HAL_GPIO_Init+0x48>
        {
          temp |= iocurrent;
 8001318:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->EMR = temp;
 800131c:	4a5a      	ldr	r2, [pc, #360]	; (8001488 <HAL_GPIO_Init+0x1b4>)
 800131e:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001320:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001322:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001326:	684f      	ldr	r7, [r1, #4]
 8001328:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 800132c:	d001      	beq.n	8001332 <HAL_GPIO_Init+0x5e>
        {
          temp |= iocurrent;
 800132e:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->RTSR = temp;
 8001332:	4a55      	ldr	r2, [pc, #340]	; (8001488 <HAL_GPIO_Init+0x1b4>)
 8001334:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8001336:	68d2      	ldr	r2, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8001338:	4013      	ands	r3, r2
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800133a:	684e      	ldr	r6, [r1, #4]
 800133c:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8001340:	d001      	beq.n	8001346 <HAL_GPIO_Init+0x72>
        {
          temp |= iocurrent;
 8001342:	ea45 0302 	orr.w	r3, r5, r2
        }
        EXTI->FTSR = temp;
 8001346:	4a50      	ldr	r2, [pc, #320]	; (8001488 <HAL_GPIO_Init+0x1b4>)
 8001348:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800134a:	3401      	adds	r4, #1
 800134c:	2c0f      	cmp	r4, #15
 800134e:	f200 8097 	bhi.w	8001480 <HAL_GPIO_Init+0x1ac>
    ioposition = ((uint32_t)0x01) << position;
 8001352:	2301      	movs	r3, #1
 8001354:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001356:	680a      	ldr	r2, [r1, #0]
 8001358:	ea03 0502 	and.w	r5, r3, r2
    if(iocurrent == ioposition)
 800135c:	42ab      	cmp	r3, r5
 800135e:	d1f4      	bne.n	800134a <HAL_GPIO_Init+0x76>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001360:	684a      	ldr	r2, [r1, #4]
 8001362:	2a12      	cmp	r2, #18
 8001364:	bf18      	it	ne
 8001366:	2a02      	cmpne	r2, #2
 8001368:	d112      	bne.n	8001390 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3];
 800136a:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
 800136e:	f10e 0e08 	add.w	lr, lr, #8
 8001372:	f850 202e 	ldr.w	r2, [r0, lr, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001376:	f004 0607 	and.w	r6, r4, #7
 800137a:	00b6      	lsls	r6, r6, #2
 800137c:	270f      	movs	r7, #15
 800137e:	40b7      	lsls	r7, r6
 8001380:	ea22 0207 	bic.w	r2, r2, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001384:	690f      	ldr	r7, [r1, #16]
 8001386:	fa07 f606 	lsl.w	r6, r7, r6
 800138a:	4332      	orrs	r2, r6
        GPIOx->AFR[position >> 3] = temp;
 800138c:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
      temp = GPIOx->MODER;
 8001390:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001392:	ea4f 0e44 	mov.w	lr, r4, lsl #1
 8001396:	2203      	movs	r2, #3
 8001398:	fa02 f20e 	lsl.w	r2, r2, lr
 800139c:	43d2      	mvns	r2, r2
 800139e:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80013a0:	684f      	ldr	r7, [r1, #4]
 80013a2:	f007 0703 	and.w	r7, r7, #3
 80013a6:	fa07 f70e 	lsl.w	r7, r7, lr
 80013aa:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 80013ac:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013ae:	684e      	ldr	r6, [r1, #4]
 80013b0:	1e77      	subs	r7, r6, #1
 80013b2:	2e11      	cmp	r6, #17
 80013b4:	bf18      	it	ne
 80013b6:	2f01      	cmpne	r7, #1
 80013b8:	d901      	bls.n	80013be <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013ba:	2e12      	cmp	r6, #18
 80013bc:	d10f      	bne.n	80013de <HAL_GPIO_Init+0x10a>
        temp = GPIOx->OSPEEDR; 
 80013be:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80013c0:	4016      	ands	r6, r2
        temp |= (GPIO_Init->Speed << (position * 2));
 80013c2:	68cf      	ldr	r7, [r1, #12]
 80013c4:	fa07 f70e 	lsl.w	r7, r7, lr
 80013c8:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 80013ca:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80013cc:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013ce:	ea26 0303 	bic.w	r3, r6, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80013d2:	684e      	ldr	r6, [r1, #4]
 80013d4:	f3c6 1600 	ubfx	r6, r6, #4, #1
 80013d8:	40a6      	lsls	r6, r4
 80013da:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 80013dc:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 80013de:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80013e0:	401a      	ands	r2, r3
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80013e2:	688b      	ldr	r3, [r1, #8]
 80013e4:	fa03 f30e 	lsl.w	r3, r3, lr
 80013e8:	431a      	orrs	r2, r3
      GPIOx->PUPDR = temp;
 80013ea:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013ec:	684b      	ldr	r3, [r1, #4]
 80013ee:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80013f2:	d0aa      	beq.n	800134a <HAL_GPIO_Init+0x76>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f4:	4b25      	ldr	r3, [pc, #148]	; (800148c <HAL_GPIO_Init+0x1b8>)
 80013f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80013f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80013fc:	645a      	str	r2, [r3, #68]	; 0x44
 80013fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001400:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001404:	9301      	str	r3, [sp, #4]
 8001406:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8001408:	08a3      	lsrs	r3, r4, #2
 800140a:	1c9e      	adds	r6, r3, #2
 800140c:	4a1d      	ldr	r2, [pc, #116]	; (8001484 <HAL_GPIO_Init+0x1b0>)
 800140e:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001412:	f004 0603 	and.w	r6, r4, #3
 8001416:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 800141a:	260f      	movs	r6, #15
 800141c:	fa06 f60e 	lsl.w	r6, r6, lr
 8001420:	ea22 0206 	bic.w	r2, r2, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001424:	4f1a      	ldr	r7, [pc, #104]	; (8001490 <HAL_GPIO_Init+0x1bc>)
 8001426:	42b8      	cmp	r0, r7
 8001428:	f43f af5a 	beq.w	80012e0 <HAL_GPIO_Init+0xc>
 800142c:	4e19      	ldr	r6, [pc, #100]	; (8001494 <HAL_GPIO_Init+0x1c0>)
 800142e:	42b0      	cmp	r0, r6
 8001430:	d01a      	beq.n	8001468 <HAL_GPIO_Init+0x194>
 8001432:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001436:	42b0      	cmp	r0, r6
 8001438:	d018      	beq.n	800146c <HAL_GPIO_Init+0x198>
 800143a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800143e:	42b0      	cmp	r0, r6
 8001440:	d016      	beq.n	8001470 <HAL_GPIO_Init+0x19c>
 8001442:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001446:	42b0      	cmp	r0, r6
 8001448:	d014      	beq.n	8001474 <HAL_GPIO_Init+0x1a0>
 800144a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800144e:	42b0      	cmp	r0, r6
 8001450:	d012      	beq.n	8001478 <HAL_GPIO_Init+0x1a4>
 8001452:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001456:	42b0      	cmp	r0, r6
 8001458:	d010      	beq.n	800147c <HAL_GPIO_Init+0x1a8>
 800145a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800145e:	42b0      	cmp	r0, r6
 8001460:	f43f af3c 	beq.w	80012dc <HAL_GPIO_Init+0x8>
 8001464:	2608      	movs	r6, #8
 8001466:	e73c      	b.n	80012e2 <HAL_GPIO_Init+0xe>
 8001468:	2601      	movs	r6, #1
 800146a:	e73a      	b.n	80012e2 <HAL_GPIO_Init+0xe>
 800146c:	2602      	movs	r6, #2
 800146e:	e738      	b.n	80012e2 <HAL_GPIO_Init+0xe>
 8001470:	2603      	movs	r6, #3
 8001472:	e736      	b.n	80012e2 <HAL_GPIO_Init+0xe>
 8001474:	2604      	movs	r6, #4
 8001476:	e734      	b.n	80012e2 <HAL_GPIO_Init+0xe>
 8001478:	2605      	movs	r6, #5
 800147a:	e732      	b.n	80012e2 <HAL_GPIO_Init+0xe>
 800147c:	2606      	movs	r6, #6
 800147e:	e730      	b.n	80012e2 <HAL_GPIO_Init+0xe>
      }
    }
  }
}
 8001480:	b003      	add	sp, #12
 8001482:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001484:	40013800 	.word	0x40013800
 8001488:	40013c00 	.word	0x40013c00
 800148c:	40023800 	.word	0x40023800
 8001490:	40020000 	.word	0x40020000
 8001494:	40020400 	.word	0x40020400

08001498 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001498:	2800      	cmp	r0, #0
 800149a:	f000 81db 	beq.w	8001854 <HAL_RCC_OscConfig+0x3bc>
{
 800149e:	b570      	push	{r4, r5, r6, lr}
 80014a0:	b082      	sub	sp, #8
 80014a2:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014a4:	6803      	ldr	r3, [r0, #0]
 80014a6:	f013 0f01 	tst.w	r3, #1
 80014aa:	d03a      	beq.n	8001522 <HAL_RCC_OscConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014ac:	4ba2      	ldr	r3, [pc, #648]	; (8001738 <HAL_RCC_OscConfig+0x2a0>)
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	f003 030c 	and.w	r3, r3, #12
 80014b4:	2b04      	cmp	r3, #4
 80014b6:	d02b      	beq.n	8001510 <HAL_RCC_OscConfig+0x78>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014b8:	4b9f      	ldr	r3, [pc, #636]	; (8001738 <HAL_RCC_OscConfig+0x2a0>)
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	f003 030c 	and.w	r3, r3, #12
 80014c0:	2b08      	cmp	r3, #8
 80014c2:	d020      	beq.n	8001506 <HAL_RCC_OscConfig+0x6e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014c4:	6863      	ldr	r3, [r4, #4]
 80014c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014ca:	d050      	beq.n	800156e <HAL_RCC_OscConfig+0xd6>
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d154      	bne.n	800157a <HAL_RCC_OscConfig+0xe2>
 80014d0:	4b99      	ldr	r3, [pc, #612]	; (8001738 <HAL_RCC_OscConfig+0x2a0>)
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80014e0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014e2:	6863      	ldr	r3, [r4, #4]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d05f      	beq.n	80015a8 <HAL_RCC_OscConfig+0x110>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e8:	f7ff f860 	bl	80005ac <HAL_GetTick>
 80014ec:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ee:	4b92      	ldr	r3, [pc, #584]	; (8001738 <HAL_RCC_OscConfig+0x2a0>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80014f6:	d114      	bne.n	8001522 <HAL_RCC_OscConfig+0x8a>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014f8:	f7ff f858 	bl	80005ac <HAL_GetTick>
 80014fc:	1b40      	subs	r0, r0, r5
 80014fe:	2864      	cmp	r0, #100	; 0x64
 8001500:	d9f5      	bls.n	80014ee <HAL_RCC_OscConfig+0x56>
          {
            return HAL_TIMEOUT;
 8001502:	2003      	movs	r0, #3
 8001504:	e1ab      	b.n	800185e <HAL_RCC_OscConfig+0x3c6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001506:	4b8c      	ldr	r3, [pc, #560]	; (8001738 <HAL_RCC_OscConfig+0x2a0>)
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800150e:	d0d9      	beq.n	80014c4 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001510:	4b89      	ldr	r3, [pc, #548]	; (8001738 <HAL_RCC_OscConfig+0x2a0>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001518:	d003      	beq.n	8001522 <HAL_RCC_OscConfig+0x8a>
 800151a:	6863      	ldr	r3, [r4, #4]
 800151c:	2b00      	cmp	r3, #0
 800151e:	f000 819b 	beq.w	8001858 <HAL_RCC_OscConfig+0x3c0>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001522:	6823      	ldr	r3, [r4, #0]
 8001524:	f013 0f02 	tst.w	r3, #2
 8001528:	d064      	beq.n	80015f4 <HAL_RCC_OscConfig+0x15c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800152a:	4b83      	ldr	r3, [pc, #524]	; (8001738 <HAL_RCC_OscConfig+0x2a0>)
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	f013 0f0c 	tst.w	r3, #12
 8001532:	d04d      	beq.n	80015d0 <HAL_RCC_OscConfig+0x138>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001534:	4b80      	ldr	r3, [pc, #512]	; (8001738 <HAL_RCC_OscConfig+0x2a0>)
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	f003 030c 	and.w	r3, r3, #12
 800153c:	2b08      	cmp	r3, #8
 800153e:	d042      	beq.n	80015c6 <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001540:	68e3      	ldr	r3, [r4, #12]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d079      	beq.n	800163a <HAL_RCC_OscConfig+0x1a2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001546:	4a7c      	ldr	r2, [pc, #496]	; (8001738 <HAL_RCC_OscConfig+0x2a0>)
 8001548:	6813      	ldr	r3, [r2, #0]
 800154a:	f043 0301 	orr.w	r3, r3, #1
 800154e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001550:	f7ff f82c 	bl	80005ac <HAL_GetTick>
 8001554:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001556:	4b78      	ldr	r3, [pc, #480]	; (8001738 <HAL_RCC_OscConfig+0x2a0>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f013 0f02 	tst.w	r3, #2
 800155e:	d163      	bne.n	8001628 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001560:	f7ff f824 	bl	80005ac <HAL_GetTick>
 8001564:	1b40      	subs	r0, r0, r5
 8001566:	2802      	cmp	r0, #2
 8001568:	d9f5      	bls.n	8001556 <HAL_RCC_OscConfig+0xbe>
          {
            return HAL_TIMEOUT;
 800156a:	2003      	movs	r0, #3
 800156c:	e177      	b.n	800185e <HAL_RCC_OscConfig+0x3c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800156e:	4a72      	ldr	r2, [pc, #456]	; (8001738 <HAL_RCC_OscConfig+0x2a0>)
 8001570:	6813      	ldr	r3, [r2, #0]
 8001572:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001576:	6013      	str	r3, [r2, #0]
 8001578:	e7b3      	b.n	80014e2 <HAL_RCC_OscConfig+0x4a>
 800157a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800157e:	d009      	beq.n	8001594 <HAL_RCC_OscConfig+0xfc>
 8001580:	4b6d      	ldr	r3, [pc, #436]	; (8001738 <HAL_RCC_OscConfig+0x2a0>)
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	e7a6      	b.n	80014e2 <HAL_RCC_OscConfig+0x4a>
 8001594:	4b68      	ldr	r3, [pc, #416]	; (8001738 <HAL_RCC_OscConfig+0x2a0>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	e79c      	b.n	80014e2 <HAL_RCC_OscConfig+0x4a>
        tickstart = HAL_GetTick();
 80015a8:	f7ff f800 	bl	80005ac <HAL_GetTick>
 80015ac:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ae:	4b62      	ldr	r3, [pc, #392]	; (8001738 <HAL_RCC_OscConfig+0x2a0>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80015b6:	d0b4      	beq.n	8001522 <HAL_RCC_OscConfig+0x8a>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015b8:	f7fe fff8 	bl	80005ac <HAL_GetTick>
 80015bc:	1b40      	subs	r0, r0, r5
 80015be:	2864      	cmp	r0, #100	; 0x64
 80015c0:	d9f5      	bls.n	80015ae <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 80015c2:	2003      	movs	r0, #3
 80015c4:	e14b      	b.n	800185e <HAL_RCC_OscConfig+0x3c6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015c6:	4b5c      	ldr	r3, [pc, #368]	; (8001738 <HAL_RCC_OscConfig+0x2a0>)
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80015ce:	d1b7      	bne.n	8001540 <HAL_RCC_OscConfig+0xa8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015d0:	4b59      	ldr	r3, [pc, #356]	; (8001738 <HAL_RCC_OscConfig+0x2a0>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f013 0f02 	tst.w	r3, #2
 80015d8:	d004      	beq.n	80015e4 <HAL_RCC_OscConfig+0x14c>
 80015da:	68e3      	ldr	r3, [r4, #12]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d001      	beq.n	80015e4 <HAL_RCC_OscConfig+0x14c>
        return HAL_ERROR;
 80015e0:	2001      	movs	r0, #1
 80015e2:	e13c      	b.n	800185e <HAL_RCC_OscConfig+0x3c6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015e4:	4a54      	ldr	r2, [pc, #336]	; (8001738 <HAL_RCC_OscConfig+0x2a0>)
 80015e6:	6813      	ldr	r3, [r2, #0]
 80015e8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80015ec:	6921      	ldr	r1, [r4, #16]
 80015ee:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80015f2:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015f4:	6823      	ldr	r3, [r4, #0]
 80015f6:	f013 0f08 	tst.w	r3, #8
 80015fa:	d046      	beq.n	800168a <HAL_RCC_OscConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80015fc:	6963      	ldr	r3, [r4, #20]
 80015fe:	b383      	cbz	r3, 8001662 <HAL_RCC_OscConfig+0x1ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001600:	4a4d      	ldr	r2, [pc, #308]	; (8001738 <HAL_RCC_OscConfig+0x2a0>)
 8001602:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800160a:	f7fe ffcf 	bl	80005ac <HAL_GetTick>
 800160e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001610:	4b49      	ldr	r3, [pc, #292]	; (8001738 <HAL_RCC_OscConfig+0x2a0>)
 8001612:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001614:	f013 0f02 	tst.w	r3, #2
 8001618:	d137      	bne.n	800168a <HAL_RCC_OscConfig+0x1f2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800161a:	f7fe ffc7 	bl	80005ac <HAL_GetTick>
 800161e:	1b40      	subs	r0, r0, r5
 8001620:	2802      	cmp	r0, #2
 8001622:	d9f5      	bls.n	8001610 <HAL_RCC_OscConfig+0x178>
        {
          return HAL_TIMEOUT;
 8001624:	2003      	movs	r0, #3
 8001626:	e11a      	b.n	800185e <HAL_RCC_OscConfig+0x3c6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001628:	4a43      	ldr	r2, [pc, #268]	; (8001738 <HAL_RCC_OscConfig+0x2a0>)
 800162a:	6813      	ldr	r3, [r2, #0]
 800162c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001630:	6921      	ldr	r1, [r4, #16]
 8001632:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001636:	6013      	str	r3, [r2, #0]
 8001638:	e7dc      	b.n	80015f4 <HAL_RCC_OscConfig+0x15c>
        __HAL_RCC_HSI_DISABLE();
 800163a:	4a3f      	ldr	r2, [pc, #252]	; (8001738 <HAL_RCC_OscConfig+0x2a0>)
 800163c:	6813      	ldr	r3, [r2, #0]
 800163e:	f023 0301 	bic.w	r3, r3, #1
 8001642:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001644:	f7fe ffb2 	bl	80005ac <HAL_GetTick>
 8001648:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800164a:	4b3b      	ldr	r3, [pc, #236]	; (8001738 <HAL_RCC_OscConfig+0x2a0>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f013 0f02 	tst.w	r3, #2
 8001652:	d0cf      	beq.n	80015f4 <HAL_RCC_OscConfig+0x15c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001654:	f7fe ffaa 	bl	80005ac <HAL_GetTick>
 8001658:	1b40      	subs	r0, r0, r5
 800165a:	2802      	cmp	r0, #2
 800165c:	d9f5      	bls.n	800164a <HAL_RCC_OscConfig+0x1b2>
            return HAL_TIMEOUT;
 800165e:	2003      	movs	r0, #3
 8001660:	e0fd      	b.n	800185e <HAL_RCC_OscConfig+0x3c6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001662:	4a35      	ldr	r2, [pc, #212]	; (8001738 <HAL_RCC_OscConfig+0x2a0>)
 8001664:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8001666:	f023 0301 	bic.w	r3, r3, #1
 800166a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800166c:	f7fe ff9e 	bl	80005ac <HAL_GetTick>
 8001670:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001672:	4b31      	ldr	r3, [pc, #196]	; (8001738 <HAL_RCC_OscConfig+0x2a0>)
 8001674:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001676:	f013 0f02 	tst.w	r3, #2
 800167a:	d006      	beq.n	800168a <HAL_RCC_OscConfig+0x1f2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800167c:	f7fe ff96 	bl	80005ac <HAL_GetTick>
 8001680:	1b40      	subs	r0, r0, r5
 8001682:	2802      	cmp	r0, #2
 8001684:	d9f5      	bls.n	8001672 <HAL_RCC_OscConfig+0x1da>
        {
          return HAL_TIMEOUT;
 8001686:	2003      	movs	r0, #3
 8001688:	e0e9      	b.n	800185e <HAL_RCC_OscConfig+0x3c6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800168a:	6823      	ldr	r3, [r4, #0]
 800168c:	f013 0f04 	tst.w	r3, #4
 8001690:	d07e      	beq.n	8001790 <HAL_RCC_OscConfig+0x2f8>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001692:	4b29      	ldr	r3, [pc, #164]	; (8001738 <HAL_RCC_OscConfig+0x2a0>)
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800169a:	d131      	bne.n	8001700 <HAL_RCC_OscConfig+0x268>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800169c:	4b26      	ldr	r3, [pc, #152]	; (8001738 <HAL_RCC_OscConfig+0x2a0>)
 800169e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016a0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80016a4:	641a      	str	r2, [r3, #64]	; 0x40
 80016a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ac:	9301      	str	r3, [sp, #4]
 80016ae:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80016b0:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016b2:	4b22      	ldr	r3, [pc, #136]	; (800173c <HAL_RCC_OscConfig+0x2a4>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80016ba:	d023      	beq.n	8001704 <HAL_RCC_OscConfig+0x26c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016bc:	68a3      	ldr	r3, [r4, #8]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d034      	beq.n	800172c <HAL_RCC_OscConfig+0x294>
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d13c      	bne.n	8001740 <HAL_RCC_OscConfig+0x2a8>
 80016c6:	4b1c      	ldr	r3, [pc, #112]	; (8001738 <HAL_RCC_OscConfig+0x2a0>)
 80016c8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80016ca:	f022 0201 	bic.w	r2, r2, #1
 80016ce:	671a      	str	r2, [r3, #112]	; 0x70
 80016d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80016d2:	f022 0204 	bic.w	r2, r2, #4
 80016d6:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016d8:	68a3      	ldr	r3, [r4, #8]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d046      	beq.n	800176c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016de:	f7fe ff65 	bl	80005ac <HAL_GetTick>
 80016e2:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016e4:	4b14      	ldr	r3, [pc, #80]	; (8001738 <HAL_RCC_OscConfig+0x2a0>)
 80016e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016e8:	f013 0f02 	tst.w	r3, #2
 80016ec:	d14f      	bne.n	800178e <HAL_RCC_OscConfig+0x2f6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016ee:	f7fe ff5d 	bl	80005ac <HAL_GetTick>
 80016f2:	1b80      	subs	r0, r0, r6
 80016f4:	f241 3388 	movw	r3, #5000	; 0x1388
 80016f8:	4298      	cmp	r0, r3
 80016fa:	d9f3      	bls.n	80016e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016fc:	2003      	movs	r0, #3
 80016fe:	e0ae      	b.n	800185e <HAL_RCC_OscConfig+0x3c6>
  FlagStatus pwrclkchanged = RESET;
 8001700:	2500      	movs	r5, #0
 8001702:	e7d6      	b.n	80016b2 <HAL_RCC_OscConfig+0x21a>
      PWR->CR1 |= PWR_CR1_DBP;
 8001704:	4a0d      	ldr	r2, [pc, #52]	; (800173c <HAL_RCC_OscConfig+0x2a4>)
 8001706:	6813      	ldr	r3, [r2, #0]
 8001708:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800170c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800170e:	f7fe ff4d 	bl	80005ac <HAL_GetTick>
 8001712:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001714:	4b09      	ldr	r3, [pc, #36]	; (800173c <HAL_RCC_OscConfig+0x2a4>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f413 7f80 	tst.w	r3, #256	; 0x100
 800171c:	d1ce      	bne.n	80016bc <HAL_RCC_OscConfig+0x224>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800171e:	f7fe ff45 	bl	80005ac <HAL_GetTick>
 8001722:	1b80      	subs	r0, r0, r6
 8001724:	2864      	cmp	r0, #100	; 0x64
 8001726:	d9f5      	bls.n	8001714 <HAL_RCC_OscConfig+0x27c>
          return HAL_TIMEOUT;
 8001728:	2003      	movs	r0, #3
 800172a:	e098      	b.n	800185e <HAL_RCC_OscConfig+0x3c6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800172c:	4a02      	ldr	r2, [pc, #8]	; (8001738 <HAL_RCC_OscConfig+0x2a0>)
 800172e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001730:	f043 0301 	orr.w	r3, r3, #1
 8001734:	6713      	str	r3, [r2, #112]	; 0x70
 8001736:	e7cf      	b.n	80016d8 <HAL_RCC_OscConfig+0x240>
 8001738:	40023800 	.word	0x40023800
 800173c:	40007000 	.word	0x40007000
 8001740:	2b05      	cmp	r3, #5
 8001742:	d009      	beq.n	8001758 <HAL_RCC_OscConfig+0x2c0>
 8001744:	4b48      	ldr	r3, [pc, #288]	; (8001868 <HAL_RCC_OscConfig+0x3d0>)
 8001746:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001748:	f022 0201 	bic.w	r2, r2, #1
 800174c:	671a      	str	r2, [r3, #112]	; 0x70
 800174e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001750:	f022 0204 	bic.w	r2, r2, #4
 8001754:	671a      	str	r2, [r3, #112]	; 0x70
 8001756:	e7bf      	b.n	80016d8 <HAL_RCC_OscConfig+0x240>
 8001758:	4b43      	ldr	r3, [pc, #268]	; (8001868 <HAL_RCC_OscConfig+0x3d0>)
 800175a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800175c:	f042 0204 	orr.w	r2, r2, #4
 8001760:	671a      	str	r2, [r3, #112]	; 0x70
 8001762:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001764:	f042 0201 	orr.w	r2, r2, #1
 8001768:	671a      	str	r2, [r3, #112]	; 0x70
 800176a:	e7b5      	b.n	80016d8 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800176c:	f7fe ff1e 	bl	80005ac <HAL_GetTick>
 8001770:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001772:	4b3d      	ldr	r3, [pc, #244]	; (8001868 <HAL_RCC_OscConfig+0x3d0>)
 8001774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001776:	f013 0f02 	tst.w	r3, #2
 800177a:	d008      	beq.n	800178e <HAL_RCC_OscConfig+0x2f6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800177c:	f7fe ff16 	bl	80005ac <HAL_GetTick>
 8001780:	1b80      	subs	r0, r0, r6
 8001782:	f241 3388 	movw	r3, #5000	; 0x1388
 8001786:	4298      	cmp	r0, r3
 8001788:	d9f3      	bls.n	8001772 <HAL_RCC_OscConfig+0x2da>
        {
          return HAL_TIMEOUT;
 800178a:	2003      	movs	r0, #3
 800178c:	e067      	b.n	800185e <HAL_RCC_OscConfig+0x3c6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800178e:	b9f5      	cbnz	r5, 80017ce <HAL_RCC_OscConfig+0x336>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001790:	69a3      	ldr	r3, [r4, #24]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d062      	beq.n	800185c <HAL_RCC_OscConfig+0x3c4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001796:	4a34      	ldr	r2, [pc, #208]	; (8001868 <HAL_RCC_OscConfig+0x3d0>)
 8001798:	6892      	ldr	r2, [r2, #8]
 800179a:	f002 020c 	and.w	r2, r2, #12
 800179e:	2a08      	cmp	r2, #8
 80017a0:	d05f      	beq.n	8001862 <HAL_RCC_OscConfig+0x3ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d019      	beq.n	80017da <HAL_RCC_OscConfig+0x342>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017a6:	4a30      	ldr	r2, [pc, #192]	; (8001868 <HAL_RCC_OscConfig+0x3d0>)
 80017a8:	6813      	ldr	r3, [r2, #0]
 80017aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b0:	f7fe fefc 	bl	80005ac <HAL_GetTick>
 80017b4:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017b6:	4b2c      	ldr	r3, [pc, #176]	; (8001868 <HAL_RCC_OscConfig+0x3d0>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80017be:	d047      	beq.n	8001850 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017c0:	f7fe fef4 	bl	80005ac <HAL_GetTick>
 80017c4:	1b00      	subs	r0, r0, r4
 80017c6:	2802      	cmp	r0, #2
 80017c8:	d9f5      	bls.n	80017b6 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 80017ca:	2003      	movs	r0, #3
 80017cc:	e047      	b.n	800185e <HAL_RCC_OscConfig+0x3c6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80017ce:	4a26      	ldr	r2, [pc, #152]	; (8001868 <HAL_RCC_OscConfig+0x3d0>)
 80017d0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80017d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017d6:	6413      	str	r3, [r2, #64]	; 0x40
 80017d8:	e7da      	b.n	8001790 <HAL_RCC_OscConfig+0x2f8>
        __HAL_RCC_PLL_DISABLE();
 80017da:	4a23      	ldr	r2, [pc, #140]	; (8001868 <HAL_RCC_OscConfig+0x3d0>)
 80017dc:	6813      	ldr	r3, [r2, #0]
 80017de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017e2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80017e4:	f7fe fee2 	bl	80005ac <HAL_GetTick>
 80017e8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ea:	4b1f      	ldr	r3, [pc, #124]	; (8001868 <HAL_RCC_OscConfig+0x3d0>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80017f2:	d006      	beq.n	8001802 <HAL_RCC_OscConfig+0x36a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017f4:	f7fe feda 	bl	80005ac <HAL_GetTick>
 80017f8:	1b40      	subs	r0, r0, r5
 80017fa:	2802      	cmp	r0, #2
 80017fc:	d9f5      	bls.n	80017ea <HAL_RCC_OscConfig+0x352>
            return HAL_TIMEOUT;
 80017fe:	2003      	movs	r0, #3
 8001800:	e02d      	b.n	800185e <HAL_RCC_OscConfig+0x3c6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001802:	69e3      	ldr	r3, [r4, #28]
 8001804:	6a22      	ldr	r2, [r4, #32]
 8001806:	4313      	orrs	r3, r2
 8001808:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800180a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800180e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001810:	0852      	lsrs	r2, r2, #1
 8001812:	3a01      	subs	r2, #1
 8001814:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001818:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800181a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800181e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001822:	4a11      	ldr	r2, [pc, #68]	; (8001868 <HAL_RCC_OscConfig+0x3d0>)
 8001824:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001826:	6813      	ldr	r3, [r2, #0]
 8001828:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800182c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800182e:	f7fe febd 	bl	80005ac <HAL_GetTick>
 8001832:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001834:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <HAL_RCC_OscConfig+0x3d0>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800183c:	d106      	bne.n	800184c <HAL_RCC_OscConfig+0x3b4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800183e:	f7fe feb5 	bl	80005ac <HAL_GetTick>
 8001842:	1b00      	subs	r0, r0, r4
 8001844:	2802      	cmp	r0, #2
 8001846:	d9f5      	bls.n	8001834 <HAL_RCC_OscConfig+0x39c>
            return HAL_TIMEOUT;
 8001848:	2003      	movs	r0, #3
 800184a:	e008      	b.n	800185e <HAL_RCC_OscConfig+0x3c6>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 800184c:	2000      	movs	r0, #0
 800184e:	e006      	b.n	800185e <HAL_RCC_OscConfig+0x3c6>
 8001850:	2000      	movs	r0, #0
 8001852:	e004      	b.n	800185e <HAL_RCC_OscConfig+0x3c6>
    return HAL_ERROR;
 8001854:	2001      	movs	r0, #1
 8001856:	4770      	bx	lr
        return HAL_ERROR;
 8001858:	2001      	movs	r0, #1
 800185a:	e000      	b.n	800185e <HAL_RCC_OscConfig+0x3c6>
  return HAL_OK;
 800185c:	2000      	movs	r0, #0
}
 800185e:	b002      	add	sp, #8
 8001860:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001862:	2001      	movs	r0, #1
 8001864:	e7fb      	b.n	800185e <HAL_RCC_OscConfig+0x3c6>
 8001866:	bf00      	nop
 8001868:	40023800 	.word	0x40023800

0800186c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800186c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800186e:	4b25      	ldr	r3, [pc, #148]	; (8001904 <HAL_RCC_GetSysClockFreq+0x98>)
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	f003 030c 	and.w	r3, r3, #12
 8001876:	2b04      	cmp	r3, #4
 8001878:	d041      	beq.n	80018fe <HAL_RCC_GetSysClockFreq+0x92>
 800187a:	2b08      	cmp	r3, #8
 800187c:	d001      	beq.n	8001882 <HAL_RCC_GetSysClockFreq+0x16>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800187e:	4822      	ldr	r0, [pc, #136]	; (8001908 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001882:	4b20      	ldr	r3, [pc, #128]	; (8001904 <HAL_RCC_GetSysClockFreq+0x98>)
 8001884:	685a      	ldr	r2, [r3, #4]
 8001886:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001890:	d012      	beq.n	80018b8 <HAL_RCC_GetSysClockFreq+0x4c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001892:	4b1c      	ldr	r3, [pc, #112]	; (8001904 <HAL_RCC_GetSysClockFreq+0x98>)
 8001894:	6859      	ldr	r1, [r3, #4]
 8001896:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800189a:	2300      	movs	r3, #0
 800189c:	481b      	ldr	r0, [pc, #108]	; (800190c <HAL_RCC_GetSysClockFreq+0xa0>)
 800189e:	fba1 0100 	umull	r0, r1, r1, r0
 80018a2:	f7fe fcbd 	bl	8000220 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80018a6:	4b17      	ldr	r3, [pc, #92]	; (8001904 <HAL_RCC_GetSysClockFreq+0x98>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80018ae:	3301      	adds	r3, #1
 80018b0:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80018b2:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80018b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018b8:	4b12      	ldr	r3, [pc, #72]	; (8001904 <HAL_RCC_GetSysClockFreq+0x98>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80018c0:	461e      	mov	r6, r3
 80018c2:	2700      	movs	r7, #0
 80018c4:	015c      	lsls	r4, r3, #5
 80018c6:	2500      	movs	r5, #0
 80018c8:	1ae4      	subs	r4, r4, r3
 80018ca:	eb65 0507 	sbc.w	r5, r5, r7
 80018ce:	01a9      	lsls	r1, r5, #6
 80018d0:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 80018d4:	01a0      	lsls	r0, r4, #6
 80018d6:	1b00      	subs	r0, r0, r4
 80018d8:	eb61 0105 	sbc.w	r1, r1, r5
 80018dc:	00cb      	lsls	r3, r1, #3
 80018de:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80018e2:	00c4      	lsls	r4, r0, #3
 80018e4:	19a0      	adds	r0, r4, r6
 80018e6:	eb43 0107 	adc.w	r1, r3, r7
 80018ea:	028b      	lsls	r3, r1, #10
 80018ec:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 80018f0:	0284      	lsls	r4, r0, #10
 80018f2:	4620      	mov	r0, r4
 80018f4:	4619      	mov	r1, r3
 80018f6:	2300      	movs	r3, #0
 80018f8:	f7fe fc92 	bl	8000220 <__aeabi_uldivmod>
 80018fc:	e7d3      	b.n	80018a6 <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = HSE_VALUE;
 80018fe:	4803      	ldr	r0, [pc, #12]	; (800190c <HAL_RCC_GetSysClockFreq+0xa0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001900:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001902:	bf00      	nop
 8001904:	40023800 	.word	0x40023800
 8001908:	00f42400 	.word	0x00f42400
 800190c:	017d7840 	.word	0x017d7840

08001910 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001910:	2800      	cmp	r0, #0
 8001912:	f000 80a2 	beq.w	8001a5a <HAL_RCC_ClockConfig+0x14a>
{
 8001916:	b570      	push	{r4, r5, r6, lr}
 8001918:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800191a:	4b52      	ldr	r3, [pc, #328]	; (8001a64 <HAL_RCC_ClockConfig+0x154>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 030f 	and.w	r3, r3, #15
 8001922:	428b      	cmp	r3, r1
 8001924:	d20c      	bcs.n	8001940 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001926:	4a4f      	ldr	r2, [pc, #316]	; (8001a64 <HAL_RCC_ClockConfig+0x154>)
 8001928:	6813      	ldr	r3, [r2, #0]
 800192a:	f023 030f 	bic.w	r3, r3, #15
 800192e:	430b      	orrs	r3, r1
 8001930:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001932:	6813      	ldr	r3, [r2, #0]
 8001934:	f003 030f 	and.w	r3, r3, #15
 8001938:	4299      	cmp	r1, r3
 800193a:	d001      	beq.n	8001940 <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 800193c:	2001      	movs	r0, #1
 800193e:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001940:	6823      	ldr	r3, [r4, #0]
 8001942:	f013 0f02 	tst.w	r3, #2
 8001946:	d017      	beq.n	8001978 <HAL_RCC_ClockConfig+0x68>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001948:	f013 0f04 	tst.w	r3, #4
 800194c:	d004      	beq.n	8001958 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800194e:	4a46      	ldr	r2, [pc, #280]	; (8001a68 <HAL_RCC_ClockConfig+0x158>)
 8001950:	6893      	ldr	r3, [r2, #8]
 8001952:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001956:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001958:	6823      	ldr	r3, [r4, #0]
 800195a:	f013 0f08 	tst.w	r3, #8
 800195e:	d004      	beq.n	800196a <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001960:	4a41      	ldr	r2, [pc, #260]	; (8001a68 <HAL_RCC_ClockConfig+0x158>)
 8001962:	6893      	ldr	r3, [r2, #8]
 8001964:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001968:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800196a:	4a3f      	ldr	r2, [pc, #252]	; (8001a68 <HAL_RCC_ClockConfig+0x158>)
 800196c:	6893      	ldr	r3, [r2, #8]
 800196e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001972:	68a0      	ldr	r0, [r4, #8]
 8001974:	4303      	orrs	r3, r0
 8001976:	6093      	str	r3, [r2, #8]
 8001978:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800197a:	6823      	ldr	r3, [r4, #0]
 800197c:	f013 0f01 	tst.w	r3, #1
 8001980:	d031      	beq.n	80019e6 <HAL_RCC_ClockConfig+0xd6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001982:	6863      	ldr	r3, [r4, #4]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d020      	beq.n	80019ca <HAL_RCC_ClockConfig+0xba>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001988:	2b02      	cmp	r3, #2
 800198a:	d025      	beq.n	80019d8 <HAL_RCC_ClockConfig+0xc8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800198c:	4a36      	ldr	r2, [pc, #216]	; (8001a68 <HAL_RCC_ClockConfig+0x158>)
 800198e:	6812      	ldr	r2, [r2, #0]
 8001990:	f012 0f02 	tst.w	r2, #2
 8001994:	d063      	beq.n	8001a5e <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001996:	4934      	ldr	r1, [pc, #208]	; (8001a68 <HAL_RCC_ClockConfig+0x158>)
 8001998:	688a      	ldr	r2, [r1, #8]
 800199a:	f022 0203 	bic.w	r2, r2, #3
 800199e:	4313      	orrs	r3, r2
 80019a0:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80019a2:	f7fe fe03 	bl	80005ac <HAL_GetTick>
 80019a6:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019a8:	4b2f      	ldr	r3, [pc, #188]	; (8001a68 <HAL_RCC_ClockConfig+0x158>)
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f003 030c 	and.w	r3, r3, #12
 80019b0:	6862      	ldr	r2, [r4, #4]
 80019b2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80019b6:	d016      	beq.n	80019e6 <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019b8:	f7fe fdf8 	bl	80005ac <HAL_GetTick>
 80019bc:	1b80      	subs	r0, r0, r6
 80019be:	f241 3388 	movw	r3, #5000	; 0x1388
 80019c2:	4298      	cmp	r0, r3
 80019c4:	d9f0      	bls.n	80019a8 <HAL_RCC_ClockConfig+0x98>
        return HAL_TIMEOUT;
 80019c6:	2003      	movs	r0, #3
 80019c8:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ca:	4a27      	ldr	r2, [pc, #156]	; (8001a68 <HAL_RCC_ClockConfig+0x158>)
 80019cc:	6812      	ldr	r2, [r2, #0]
 80019ce:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80019d2:	d1e0      	bne.n	8001996 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 80019d4:	2001      	movs	r0, #1
 80019d6:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019d8:	4a23      	ldr	r2, [pc, #140]	; (8001a68 <HAL_RCC_ClockConfig+0x158>)
 80019da:	6812      	ldr	r2, [r2, #0]
 80019dc:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80019e0:	d1d9      	bne.n	8001996 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 80019e2:	2001      	movs	r0, #1
 80019e4:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019e6:	4b1f      	ldr	r3, [pc, #124]	; (8001a64 <HAL_RCC_ClockConfig+0x154>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 030f 	and.w	r3, r3, #15
 80019ee:	429d      	cmp	r5, r3
 80019f0:	d20c      	bcs.n	8001a0c <HAL_RCC_ClockConfig+0xfc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019f2:	4a1c      	ldr	r2, [pc, #112]	; (8001a64 <HAL_RCC_ClockConfig+0x154>)
 80019f4:	6813      	ldr	r3, [r2, #0]
 80019f6:	f023 030f 	bic.w	r3, r3, #15
 80019fa:	432b      	orrs	r3, r5
 80019fc:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019fe:	6813      	ldr	r3, [r2, #0]
 8001a00:	f003 030f 	and.w	r3, r3, #15
 8001a04:	429d      	cmp	r5, r3
 8001a06:	d001      	beq.n	8001a0c <HAL_RCC_ClockConfig+0xfc>
      return HAL_ERROR;
 8001a08:	2001      	movs	r0, #1
}
 8001a0a:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a0c:	6823      	ldr	r3, [r4, #0]
 8001a0e:	f013 0f04 	tst.w	r3, #4
 8001a12:	d006      	beq.n	8001a22 <HAL_RCC_ClockConfig+0x112>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a14:	4a14      	ldr	r2, [pc, #80]	; (8001a68 <HAL_RCC_ClockConfig+0x158>)
 8001a16:	6893      	ldr	r3, [r2, #8]
 8001a18:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001a1c:	68e1      	ldr	r1, [r4, #12]
 8001a1e:	430b      	orrs	r3, r1
 8001a20:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a22:	6823      	ldr	r3, [r4, #0]
 8001a24:	f013 0f08 	tst.w	r3, #8
 8001a28:	d007      	beq.n	8001a3a <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a2a:	4a0f      	ldr	r2, [pc, #60]	; (8001a68 <HAL_RCC_ClockConfig+0x158>)
 8001a2c:	6893      	ldr	r3, [r2, #8]
 8001a2e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001a32:	6921      	ldr	r1, [r4, #16]
 8001a34:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001a38:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a3a:	f7ff ff17 	bl	800186c <HAL_RCC_GetSysClockFreq>
 8001a3e:	4b0a      	ldr	r3, [pc, #40]	; (8001a68 <HAL_RCC_ClockConfig+0x158>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001a46:	4a09      	ldr	r2, [pc, #36]	; (8001a6c <HAL_RCC_ClockConfig+0x15c>)
 8001a48:	5cd3      	ldrb	r3, [r2, r3]
 8001a4a:	40d8      	lsrs	r0, r3
 8001a4c:	4b08      	ldr	r3, [pc, #32]	; (8001a70 <HAL_RCC_ClockConfig+0x160>)
 8001a4e:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001a50:	2000      	movs	r0, #0
 8001a52:	f7fe fd6d 	bl	8000530 <HAL_InitTick>
  return HAL_OK;
 8001a56:	2000      	movs	r0, #0
 8001a58:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001a5a:	2001      	movs	r0, #1
 8001a5c:	4770      	bx	lr
        return HAL_ERROR;
 8001a5e:	2001      	movs	r0, #1
 8001a60:	bd70      	pop	{r4, r5, r6, pc}
 8001a62:	bf00      	nop
 8001a64:	40023c00 	.word	0x40023c00
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	080039c8 	.word	0x080039c8
 8001a70:	20000008 	.word	0x20000008

08001a74 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001a74:	4b01      	ldr	r3, [pc, #4]	; (8001a7c <HAL_RCC_GetHCLKFreq+0x8>)
 8001a76:	6818      	ldr	r0, [r3, #0]
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	20000008 	.word	0x20000008

08001a80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a80:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a82:	f7ff fff7 	bl	8001a74 <HAL_RCC_GetHCLKFreq>
 8001a86:	4b04      	ldr	r3, [pc, #16]	; (8001a98 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001a8e:	4a03      	ldr	r2, [pc, #12]	; (8001a9c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001a90:	5cd3      	ldrb	r3, [r2, r3]
}
 8001a92:	40d8      	lsrs	r0, r3
 8001a94:	bd08      	pop	{r3, pc}
 8001a96:	bf00      	nop
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	080039d8 	.word	0x080039d8

08001aa0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001aa0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001aa2:	f7ff ffe7 	bl	8001a74 <HAL_RCC_GetHCLKFreq>
 8001aa6:	4b04      	ldr	r3, [pc, #16]	; (8001ab8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001aae:	4a03      	ldr	r2, [pc, #12]	; (8001abc <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001ab0:	5cd3      	ldrb	r3, [r2, r3]
}
 8001ab2:	40d8      	lsrs	r0, r3
 8001ab4:	bd08      	pop	{r3, pc}
 8001ab6:	bf00      	nop
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	080039d8 	.word	0x080039d8

08001ac0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001ac6:	6803      	ldr	r3, [r0, #0]
 8001ac8:	f013 0f01 	tst.w	r3, #1
 8001acc:	d00c      	beq.n	8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001ace:	4ba4      	ldr	r3, [pc, #656]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001ad0:	689a      	ldr	r2, [r3, #8]
 8001ad2:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8001ad6:	609a      	str	r2, [r3, #8]
 8001ad8:	689a      	ldr	r2, [r3, #8]
 8001ada:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001adc:	430a      	orrs	r2, r1
 8001ade:	609a      	str	r2, [r3, #8]
    
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001ae0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001ae2:	b1c3      	cbz	r3, 8001b16 <HAL_RCCEx_PeriphCLKConfig+0x56>
  uint32_t plli2sused = 0;
 8001ae4:	2700      	movs	r7, #0
 8001ae6:	e000      	b.n	8001aea <HAL_RCCEx_PeriphCLKConfig+0x2a>
 8001ae8:	2700      	movs	r7, #0
      plli2sused = 1; 
    }
  }
  
  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001aea:	6823      	ldr	r3, [r4, #0]
 8001aec:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001af0:	d015      	beq.n	8001b1e <HAL_RCCEx_PeriphCLKConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001af2:	4a9b      	ldr	r2, [pc, #620]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001af4:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001af8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001afc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001afe:	430b      	orrs	r3, r1
 8001b00:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001b04:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001b06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b0a:	d006      	beq.n	8001b1a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1; 
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	f000 8105 	beq.w	8001d1c <HAL_RCCEx_PeriphCLKConfig+0x25c>
  uint32_t pllsaiused = 0;
 8001b12:	2500      	movs	r5, #0
 8001b14:	e004      	b.n	8001b20 <HAL_RCCEx_PeriphCLKConfig+0x60>
      plli2sused = 1; 
 8001b16:	2701      	movs	r7, #1
 8001b18:	e7e7      	b.n	8001aea <HAL_RCCEx_PeriphCLKConfig+0x2a>
      plli2sused = 1; 
 8001b1a:	2701      	movs	r7, #1
 8001b1c:	e7f6      	b.n	8001b0c <HAL_RCCEx_PeriphCLKConfig+0x4c>
  uint32_t pllsaiused = 0;
 8001b1e:	2500      	movs	r5, #0
      pllsaiused = 1; 
    }
  }
  
  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001b20:	6823      	ldr	r3, [r4, #0]
 8001b22:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8001b26:	d00f      	beq.n	8001b48 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001b28:	4a8d      	ldr	r2, [pc, #564]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001b2a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001b2e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001b32:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001b34:	430b      	orrs	r3, r1
 8001b36:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001b3a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001b3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b40:	f000 80ee 	beq.w	8001d20 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      plli2sused = 1; 
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001b44:	b903      	cbnz	r3, 8001b48 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      pllsaiused = 1; 
 8001b46:	2501      	movs	r5, #1
    }
  }
  
  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001b48:	6823      	ldr	r3, [r4, #0]
 8001b4a:	f013 0f20 	tst.w	r3, #32
 8001b4e:	f040 80e9 	bne.w	8001d24 <HAL_RCCEx_PeriphCLKConfig+0x264>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001b52:	6823      	ldr	r3, [r4, #0]
 8001b54:	f013 0f10 	tst.w	r3, #16
 8001b58:	d00c      	beq.n	8001b74 <HAL_RCCEx_PeriphCLKConfig+0xb4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
    
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001b5a:	4b81      	ldr	r3, [pc, #516]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001b5c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001b60:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001b64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8001b68:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001b6c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
  
  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001b74:	6823      	ldr	r3, [r4, #0]
 8001b76:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8001b7a:	d008      	beq.n	8001b8e <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001b7c:	4a78      	ldr	r2, [pc, #480]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001b7e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001b82:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001b86:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8001b88:	430b      	orrs	r3, r1
 8001b8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001b8e:	6823      	ldr	r3, [r4, #0]
 8001b90:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8001b94:	d008      	beq.n	8001ba8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001b96:	4a72      	ldr	r2, [pc, #456]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001b98:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001b9c:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8001ba0:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8001ba2:	430b      	orrs	r3, r1
 8001ba4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001ba8:	6823      	ldr	r3, [r4, #0]
 8001baa:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001bae:	d008      	beq.n	8001bc2 <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001bb0:	4a6b      	ldr	r2, [pc, #428]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001bb2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001bb6:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001bba:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8001bbc:	430b      	orrs	r3, r1
 8001bbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001bc2:	6823      	ldr	r3, [r4, #0]
 8001bc4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001bc8:	d008      	beq.n	8001bdc <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001bca:	4a65      	ldr	r2, [pc, #404]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001bcc:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001bd0:	f023 0303 	bic.w	r3, r3, #3
 8001bd4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001bd6:	430b      	orrs	r3, r1
 8001bd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001bdc:	6823      	ldr	r3, [r4, #0]
 8001bde:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001be2:	d008      	beq.n	8001bf6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001be4:	4a5e      	ldr	r2, [pc, #376]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001be6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001bea:	f023 030c 	bic.w	r3, r3, #12
 8001bee:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001bf0:	430b      	orrs	r3, r1
 8001bf2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001bf6:	6823      	ldr	r3, [r4, #0]
 8001bf8:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001bfc:	d008      	beq.n	8001c10 <HAL_RCCEx_PeriphCLKConfig+0x150>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001bfe:	4a58      	ldr	r2, [pc, #352]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001c00:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001c04:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001c08:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001c0a:	430b      	orrs	r3, r1
 8001c0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001c10:	6823      	ldr	r3, [r4, #0]
 8001c12:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001c16:	d008      	beq.n	8001c2a <HAL_RCCEx_PeriphCLKConfig+0x16a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001c18:	4a51      	ldr	r2, [pc, #324]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001c1a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001c1e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001c22:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8001c24:	430b      	orrs	r3, r1
 8001c26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001c2a:	6823      	ldr	r3, [r4, #0]
 8001c2c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001c30:	d008      	beq.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001c32:	4a4b      	ldr	r2, [pc, #300]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001c34:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001c38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c3c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8001c3e:	430b      	orrs	r3, r1
 8001c40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001c44:	6823      	ldr	r3, [r4, #0]
 8001c46:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8001c4a:	d008      	beq.n	8001c5e <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
    
    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001c4c:	4a44      	ldr	r2, [pc, #272]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001c4e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001c52:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001c56:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8001c58:	430b      	orrs	r3, r1
 8001c5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001c5e:	6823      	ldr	r3, [r4, #0]
 8001c60:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8001c64:	d008      	beq.n	8001c78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
    
    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001c66:	4a3e      	ldr	r2, [pc, #248]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001c68:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001c6c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c70:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8001c72:	430b      	orrs	r3, r1
 8001c74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001c78:	6823      	ldr	r3, [r4, #0]
 8001c7a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8001c7e:	d008      	beq.n	8001c92 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
    
    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001c80:	4a37      	ldr	r2, [pc, #220]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001c82:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001c86:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c8a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8001c8c:	430b      	orrs	r3, r1
 8001c8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
  
  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001c92:	6823      	ldr	r3, [r4, #0]
 8001c94:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8001c98:	d00d      	beq.n	8001cb6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001c9a:	4a31      	ldr	r2, [pc, #196]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001c9c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001ca0:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8001ca4:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8001ca6:	430b      	orrs	r3, r1
 8001ca8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001cac:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8001cae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001cb2:	f000 80a1 	beq.w	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x338>
      pllsaiused = 1; 
    }
  }
  
  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001cb6:	6823      	ldr	r3, [r4, #0]
 8001cb8:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001cbc:	d008      	beq.n	8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    
    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001cbe:	4a28      	ldr	r2, [pc, #160]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001cc0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001cc4:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001cc8:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8001cca:	430b      	orrs	r3, r1
 8001ccc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   }
  
  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001cd0:	6823      	ldr	r3, [r4, #0]
 8001cd2:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8001cd6:	d008      	beq.n	8001cea <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    
    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001cd8:	4a21      	ldr	r2, [pc, #132]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001cda:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001cde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ce2:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8001ce4:	430b      	orrs	r3, r1
 8001ce6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
   
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8001cea:	6823      	ldr	r3, [r4, #0]
 8001cec:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8001cf0:	d008      	beq.n	8001d04 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
    
    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8001cf2:	4a1b      	ldr	r2, [pc, #108]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001cf4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001cf8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8001cfc:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8001cfe:	430b      	orrs	r3, r1
 8001d00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
  
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001d04:	2f00      	cmp	r7, #0
 8001d06:	d179      	bne.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8001d08:	6823      	ldr	r3, [r4, #0]
 8001d0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001d0e:	d075      	beq.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0x33c>
    }
  } 
  
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8001d10:	2d00      	cmp	r5, #0
 8001d12:	f040 80e4 	bne.w	8001ede <HAL_RCCEx_PeriphCLKConfig+0x41e>
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001d16:	2000      	movs	r0, #0
}
 8001d18:	b003      	add	sp, #12
 8001d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pllsaiused = 1; 
 8001d1c:	2501      	movs	r5, #1
 8001d1e:	e6ff      	b.n	8001b20 <HAL_RCCEx_PeriphCLKConfig+0x60>
      plli2sused = 1; 
 8001d20:	2701      	movs	r7, #1
 8001d22:	e70f      	b.n	8001b44 <HAL_RCCEx_PeriphCLKConfig+0x84>
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d24:	4b0e      	ldr	r3, [pc, #56]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001d26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d28:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001d2c:	641a      	str	r2, [r3, #64]	; 0x40
 8001d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d34:	9301      	str	r3, [sp, #4]
 8001d36:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8001d38:	4a0a      	ldr	r2, [pc, #40]	; (8001d64 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8001d3a:	6813      	ldr	r3, [r2, #0]
 8001d3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d40:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001d42:	f7fe fc33 	bl	80005ac <HAL_GetTick>
 8001d46:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001d48:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001d50:	d10a      	bne.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d52:	f7fe fc2b 	bl	80005ac <HAL_GetTick>
 8001d56:	1b80      	subs	r0, r0, r6
 8001d58:	2864      	cmp	r0, #100	; 0x64
 8001d5a:	d9f5      	bls.n	8001d48 <HAL_RCCEx_PeriphCLKConfig+0x288>
        return HAL_TIMEOUT;
 8001d5c:	2003      	movs	r0, #3
 8001d5e:	e7db      	b.n	8001d18 <HAL_RCCEx_PeriphCLKConfig+0x258>
 8001d60:	40023800 	.word	0x40023800
 8001d64:	40007000 	.word	0x40007000
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d68:	4b8e      	ldr	r3, [pc, #568]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d6c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001d70:	d015      	beq.n	8001d9e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8001d72:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001d74:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d010      	beq.n	8001d9e <HAL_RCCEx_PeriphCLKConfig+0x2de>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d7c:	4b89      	ldr	r3, [pc, #548]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d7e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001d80:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d84:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8001d86:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8001d8a:	6719      	str	r1, [r3, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d8c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8001d8e:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8001d92:	6719      	str	r1, [r3, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8001d94:	671a      	str	r2, [r3, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d98:	f013 0f01 	tst.w	r3, #1
 8001d9c:	d112      	bne.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x304>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d9e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001da0:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001da4:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001da8:	d01d      	beq.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x326>
 8001daa:	4a7e      	ldr	r2, [pc, #504]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001dac:	6893      	ldr	r3, [r2, #8]
 8001dae:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001db2:	6093      	str	r3, [r2, #8]
 8001db4:	497b      	ldr	r1, [pc, #492]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001db6:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8001db8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001dba:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	670b      	str	r3, [r1, #112]	; 0x70
 8001dc2:	e6c6      	b.n	8001b52 <HAL_RCCEx_PeriphCLKConfig+0x92>
        tickstart = HAL_GetTick();
 8001dc4:	f7fe fbf2 	bl	80005ac <HAL_GetTick>
 8001dc8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dca:	4b76      	ldr	r3, [pc, #472]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dce:	f013 0f02 	tst.w	r3, #2
 8001dd2:	d1e4      	bne.n	8001d9e <HAL_RCCEx_PeriphCLKConfig+0x2de>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dd4:	f7fe fbea 	bl	80005ac <HAL_GetTick>
 8001dd8:	1b80      	subs	r0, r0, r6
 8001dda:	f241 3388 	movw	r3, #5000	; 0x1388
 8001dde:	4298      	cmp	r0, r3
 8001de0:	d9f3      	bls.n	8001dca <HAL_RCCEx_PeriphCLKConfig+0x30a>
            return HAL_TIMEOUT;
 8001de2:	2003      	movs	r0, #3
 8001de4:	e798      	b.n	8001d18 <HAL_RCCEx_PeriphCLKConfig+0x258>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001de6:	486f      	ldr	r0, [pc, #444]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001de8:	6882      	ldr	r2, [r0, #8]
 8001dea:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8001dee:	496e      	ldr	r1, [pc, #440]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 8001df0:	4019      	ands	r1, r3
 8001df2:	430a      	orrs	r2, r1
 8001df4:	6082      	str	r2, [r0, #8]
 8001df6:	e7dd      	b.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      pllsaiused = 1; 
 8001df8:	2501      	movs	r5, #1
 8001dfa:	e75c      	b.n	8001cb6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    __HAL_RCC_PLLI2S_DISABLE();  
 8001dfc:	4a69      	ldr	r2, [pc, #420]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001dfe:	6813      	ldr	r3, [r2, #0]
 8001e00:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001e04:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001e06:	f7fe fbd1 	bl	80005ac <HAL_GetTick>
 8001e0a:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001e0c:	4b65      	ldr	r3, [pc, #404]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8001e14:	d006      	beq.n	8001e24 <HAL_RCCEx_PeriphCLKConfig+0x364>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001e16:	f7fe fbc9 	bl	80005ac <HAL_GetTick>
 8001e1a:	1b80      	subs	r0, r0, r6
 8001e1c:	2864      	cmp	r0, #100	; 0x64
 8001e1e:	d9f5      	bls.n	8001e0c <HAL_RCCEx_PeriphCLKConfig+0x34c>
        return HAL_TIMEOUT;
 8001e20:	2003      	movs	r0, #3
 8001e22:	e779      	b.n	8001d18 <HAL_RCCEx_PeriphCLKConfig+0x258>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001e24:	6823      	ldr	r3, [r4, #0]
 8001e26:	f013 0f01 	tst.w	r3, #1
 8001e2a:	d00e      	beq.n	8001e4a <HAL_RCCEx_PeriphCLKConfig+0x38a>
 8001e2c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001e2e:	b963      	cbnz	r3, 8001e4a <HAL_RCCEx_PeriphCLKConfig+0x38a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001e30:	4a5c      	ldr	r2, [pc, #368]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e32:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8001e36:	6861      	ldr	r1, [r4, #4]
 8001e38:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001e3c:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8001e40:	68a1      	ldr	r1, [r4, #8]
 8001e42:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8001e46:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001e4a:	6823      	ldr	r3, [r4, #0]
 8001e4c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001e50:	d003      	beq.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8001e52:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001e54:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8001e58:	d02a      	beq.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 8001e5a:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8001e5e:	d003      	beq.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 8001e60:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001e62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e66:	d023      	beq.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001e68:	6823      	ldr	r3, [r4, #0]
 8001e6a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001e6e:	d00a      	beq.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001e70:	6862      	ldr	r2, [r4, #4]
 8001e72:	68e3      	ldr	r3, [r4, #12]
 8001e74:	061b      	lsls	r3, r3, #24
 8001e76:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001e7a:	68a2      	ldr	r2, [r4, #8]
 8001e7c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001e80:	4a48      	ldr	r2, [pc, #288]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e82:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8001e86:	4a47      	ldr	r2, [pc, #284]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e88:	6813      	ldr	r3, [r2, #0]
 8001e8a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001e8e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001e90:	f7fe fb8c 	bl	80005ac <HAL_GetTick>
 8001e94:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001e96:	4b43      	ldr	r3, [pc, #268]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8001e9e:	f47f af37 	bne.w	8001d10 <HAL_RCCEx_PeriphCLKConfig+0x250>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001ea2:	f7fe fb83 	bl	80005ac <HAL_GetTick>
 8001ea6:	1b80      	subs	r0, r0, r6
 8001ea8:	2864      	cmp	r0, #100	; 0x64
 8001eaa:	d9f4      	bls.n	8001e96 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
        return HAL_TIMEOUT;
 8001eac:	2003      	movs	r0, #3
 8001eae:	e733      	b.n	8001d18 <HAL_RCCEx_PeriphCLKConfig+0x258>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001eb0:	4a3c      	ldr	r2, [pc, #240]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001eb2:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8001eb6:	6860      	ldr	r0, [r4, #4]
 8001eb8:	68e3      	ldr	r3, [r4, #12]
 8001eba:	061b      	lsls	r3, r3, #24
 8001ebc:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001ec0:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8001ec4:	430b      	orrs	r3, r1
 8001ec6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
 8001eca:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001ece:	f023 031f 	bic.w	r3, r3, #31
 8001ed2:	69e1      	ldr	r1, [r4, #28]
 8001ed4:	3901      	subs	r1, #1
 8001ed6:	430b      	orrs	r3, r1
 8001ed8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001edc:	e7c4      	b.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    __HAL_RCC_PLLSAI_DISABLE(); 
 8001ede:	4a31      	ldr	r2, [pc, #196]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ee0:	6813      	ldr	r3, [r2, #0]
 8001ee2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ee6:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001ee8:	f7fe fb60 	bl	80005ac <HAL_GetTick>
 8001eec:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001eee:	4b2d      	ldr	r3, [pc, #180]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8001ef6:	d006      	beq.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x446>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001ef8:	f7fe fb58 	bl	80005ac <HAL_GetTick>
 8001efc:	1b40      	subs	r0, r0, r5
 8001efe:	2864      	cmp	r0, #100	; 0x64
 8001f00:	d9f5      	bls.n	8001eee <HAL_RCCEx_PeriphCLKConfig+0x42e>
        return HAL_TIMEOUT;
 8001f02:	2003      	movs	r0, #3
 8001f04:	e708      	b.n	8001d18 <HAL_RCCEx_PeriphCLKConfig+0x258>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001f06:	6823      	ldr	r3, [r4, #0]
 8001f08:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001f0c:	d001      	beq.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8001f0e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001f10:	b122      	cbz	r2, 8001f1c <HAL_RCCEx_PeriphCLKConfig+0x45c>
 8001f12:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8001f16:	d018      	beq.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x48a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001f18:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001f1a:	b9b3      	cbnz	r3, 8001f4a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001f1c:	4a21      	ldr	r2, [pc, #132]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f1e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8001f22:	6921      	ldr	r1, [r4, #16]
 8001f24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f28:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8001f2c:	6961      	ldr	r1, [r4, #20]
 8001f2e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001f32:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001f36:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001f3a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8001f3e:	6a21      	ldr	r1, [r4, #32]
 8001f40:	3901      	subs	r1, #1
 8001f42:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001f46:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8001f4a:	6823      	ldr	r3, [r4, #0]
 8001f4c:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8001f50:	d003      	beq.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0x49a>
 8001f52:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8001f54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f58:	d013      	beq.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    __HAL_RCC_PLLSAI_ENABLE();
 8001f5a:	4a12      	ldr	r2, [pc, #72]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f5c:	6813      	ldr	r3, [r2, #0]
 8001f5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f62:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001f64:	f7fe fb22 	bl	80005ac <HAL_GetTick>
 8001f68:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001f6a:	4b0e      	ldr	r3, [pc, #56]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8001f72:	d114      	bne.n	8001f9e <HAL_RCCEx_PeriphCLKConfig+0x4de>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001f74:	f7fe fb1a 	bl	80005ac <HAL_GetTick>
 8001f78:	1b00      	subs	r0, r0, r4
 8001f7a:	2864      	cmp	r0, #100	; 0x64
 8001f7c:	d9f5      	bls.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
        return HAL_TIMEOUT;
 8001f7e:	2003      	movs	r0, #3
 8001f80:	e6ca      	b.n	8001d18 <HAL_RCCEx_PeriphCLKConfig+0x258>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001f82:	4908      	ldr	r1, [pc, #32]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f84:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8001f88:	6920      	ldr	r0, [r4, #16]
 8001f8a:	69a3      	ldr	r3, [r4, #24]
 8001f8c:	041b      	lsls	r3, r3, #16
 8001f8e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001f92:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8001f96:	4313      	orrs	r3, r2
 8001f98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001f9c:	e7dd      	b.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0x49a>
  return HAL_OK;
 8001f9e:	2000      	movs	r0, #0
 8001fa0:	e6ba      	b.n	8001d18 <HAL_RCCEx_PeriphCLKConfig+0x258>
 8001fa2:	bf00      	nop
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	0ffffcff 	.word	0x0ffffcff

08001fac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001fac:	b410      	push	{r4}
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001fae:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001fb0:	6a04      	ldr	r4, [r0, #32]
 8001fb2:	f024 0401 	bic.w	r4, r4, #1
 8001fb6:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001fb8:	6984      	ldr	r4, [r0, #24]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001fba:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
 8001fbe:	ea44 1202 	orr.w	r2, r4, r2, lsl #4
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001fc2:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8001fc6:	430b      	orrs	r3, r1
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001fc8:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001fca:	6203      	str	r3, [r0, #32]
}
 8001fcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001fd0:	4770      	bx	lr

08001fd2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001fd2:	b410      	push	{r4}
uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001fd4:	6a03      	ldr	r3, [r0, #32]
 8001fd6:	f023 0310 	bic.w	r3, r3, #16
 8001fda:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001fdc:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8001fde:	6a03      	ldr	r3, [r0, #32]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001fe0:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12);
 8001fe4:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001fe8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4);
 8001fec:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001ff0:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001ff2:	6203      	str	r3, [r0, #32]
}
 8001ff4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001ff8:	4770      	bx	lr

08001ffa <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001ffa:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001ffc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002000:	f041 0107 	orr.w	r1, r1, #7
 8002004:	430b      	orrs	r3, r1
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8002006:	6083      	str	r3, [r0, #8]
 8002008:	4770      	bx	lr

0800200a <HAL_TIM_PWM_MspInit>:
{
 800200a:	4770      	bx	lr

0800200c <TIM_Base_SetConfig>:
{
 800200c:	b470      	push	{r4, r5, r6}
  tmpcr1 = TIMx->CR1;
 800200e:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002010:	4a47      	ldr	r2, [pc, #284]	; (8002130 <TIM_Base_SetConfig+0x124>)
 8002012:	4290      	cmp	r0, r2
 8002014:	bf14      	ite	ne
 8002016:	2200      	movne	r2, #0
 8002018:	2201      	moveq	r2, #1
 800201a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800201e:	bf14      	ite	ne
 8002020:	4614      	movne	r4, r2
 8002022:	f042 0401 	orreq.w	r4, r2, #1
 8002026:	b9d4      	cbnz	r4, 800205e <TIM_Base_SetConfig+0x52>
 8002028:	4d42      	ldr	r5, [pc, #264]	; (8002134 <TIM_Base_SetConfig+0x128>)
 800202a:	42a8      	cmp	r0, r5
 800202c:	bf14      	ite	ne
 800202e:	2500      	movne	r5, #0
 8002030:	2501      	moveq	r5, #1
 8002032:	4e41      	ldr	r6, [pc, #260]	; (8002138 <TIM_Base_SetConfig+0x12c>)
 8002034:	42b0      	cmp	r0, r6
 8002036:	d054      	beq.n	80020e2 <TIM_Base_SetConfig+0xd6>
 8002038:	2d00      	cmp	r5, #0
 800203a:	d152      	bne.n	80020e2 <TIM_Base_SetConfig+0xd6>
 800203c:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8002040:	f505 3582 	add.w	r5, r5, #66560	; 0x10400
 8002044:	42a8      	cmp	r0, r5
 8002046:	bf14      	ite	ne
 8002048:	2500      	movne	r5, #0
 800204a:	2501      	moveq	r5, #1
 800204c:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8002050:	42b0      	cmp	r0, r6
 8002052:	d002      	beq.n	800205a <TIM_Base_SetConfig+0x4e>
 8002054:	b90d      	cbnz	r5, 800205a <TIM_Base_SetConfig+0x4e>
 8002056:	2500      	movs	r5, #0
 8002058:	e002      	b.n	8002060 <TIM_Base_SetConfig+0x54>
 800205a:	2501      	movs	r5, #1
 800205c:	e000      	b.n	8002060 <TIM_Base_SetConfig+0x54>
 800205e:	2501      	movs	r5, #1
 8002060:	b11d      	cbz	r5, 800206a <TIM_Base_SetConfig+0x5e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002066:	684d      	ldr	r5, [r1, #4]
 8002068:	432b      	orrs	r3, r5
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800206a:	2c00      	cmp	r4, #0
 800206c:	d13d      	bne.n	80020ea <TIM_Base_SetConfig+0xde>
 800206e:	4c31      	ldr	r4, [pc, #196]	; (8002134 <TIM_Base_SetConfig+0x128>)
 8002070:	42a0      	cmp	r0, r4
 8002072:	bf14      	ite	ne
 8002074:	2400      	movne	r4, #0
 8002076:	2401      	moveq	r4, #1
 8002078:	4d2f      	ldr	r5, [pc, #188]	; (8002138 <TIM_Base_SetConfig+0x12c>)
 800207a:	42a8      	cmp	r0, r5
 800207c:	d050      	beq.n	8002120 <TIM_Base_SetConfig+0x114>
 800207e:	2c00      	cmp	r4, #0
 8002080:	d14e      	bne.n	8002120 <TIM_Base_SetConfig+0x114>
 8002082:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8002086:	f504 3482 	add.w	r4, r4, #66560	; 0x10400
 800208a:	42a0      	cmp	r0, r4
 800208c:	bf14      	ite	ne
 800208e:	2400      	movne	r4, #0
 8002090:	2401      	moveq	r4, #1
 8002092:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002096:	42a8      	cmp	r0, r5
 8002098:	d044      	beq.n	8002124 <TIM_Base_SetConfig+0x118>
 800209a:	2c00      	cmp	r4, #0
 800209c:	d142      	bne.n	8002124 <TIM_Base_SetConfig+0x118>
 800209e:	4c27      	ldr	r4, [pc, #156]	; (800213c <TIM_Base_SetConfig+0x130>)
 80020a0:	42a0      	cmp	r0, r4
 80020a2:	bf14      	ite	ne
 80020a4:	2400      	movne	r4, #0
 80020a6:	2401      	moveq	r4, #1
 80020a8:	f505 359a 	add.w	r5, r5, #78848	; 0x13400
 80020ac:	42a8      	cmp	r0, r5
 80020ae:	d03b      	beq.n	8002128 <TIM_Base_SetConfig+0x11c>
 80020b0:	2c00      	cmp	r4, #0
 80020b2:	d139      	bne.n	8002128 <TIM_Base_SetConfig+0x11c>
 80020b4:	4c22      	ldr	r4, [pc, #136]	; (8002140 <TIM_Base_SetConfig+0x134>)
 80020b6:	42a0      	cmp	r0, r4
 80020b8:	bf14      	ite	ne
 80020ba:	2400      	movne	r4, #0
 80020bc:	2401      	moveq	r4, #1
 80020be:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80020c2:	42a8      	cmp	r0, r5
 80020c4:	d032      	beq.n	800212c <TIM_Base_SetConfig+0x120>
 80020c6:	2c00      	cmp	r4, #0
 80020c8:	d130      	bne.n	800212c <TIM_Base_SetConfig+0x120>
 80020ca:	4c1e      	ldr	r4, [pc, #120]	; (8002144 <TIM_Base_SetConfig+0x138>)
 80020cc:	42a0      	cmp	r0, r4
 80020ce:	bf14      	ite	ne
 80020d0:	2400      	movne	r4, #0
 80020d2:	2401      	moveq	r4, #1
 80020d4:	f5a5 3596 	sub.w	r5, r5, #76800	; 0x12c00
 80020d8:	42a8      	cmp	r0, r5
 80020da:	d004      	beq.n	80020e6 <TIM_Base_SetConfig+0xda>
 80020dc:	b91c      	cbnz	r4, 80020e6 <TIM_Base_SetConfig+0xda>
 80020de:	2400      	movs	r4, #0
 80020e0:	e004      	b.n	80020ec <TIM_Base_SetConfig+0xe0>
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80020e2:	2501      	movs	r5, #1
 80020e4:	e7bc      	b.n	8002060 <TIM_Base_SetConfig+0x54>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80020e6:	2401      	movs	r4, #1
 80020e8:	e000      	b.n	80020ec <TIM_Base_SetConfig+0xe0>
 80020ea:	2401      	movs	r4, #1
 80020ec:	b11c      	cbz	r4, 80020f6 <TIM_Base_SetConfig+0xea>
    tmpcr1 &= ~TIM_CR1_CKD;
 80020ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020f2:	68cc      	ldr	r4, [r1, #12]
 80020f4:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80020fa:	694c      	ldr	r4, [r1, #20]
 80020fc:	4323      	orrs	r3, r4
  TIMx->CR1 = tmpcr1;
 80020fe:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002100:	688b      	ldr	r3, [r1, #8]
 8002102:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002104:	680b      	ldr	r3, [r1, #0]
 8002106:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8002108:	4b0f      	ldr	r3, [pc, #60]	; (8002148 <TIM_Base_SetConfig+0x13c>)
 800210a:	4298      	cmp	r0, r3
 800210c:	bf08      	it	eq
 800210e:	f042 0201 	orreq.w	r2, r2, #1
 8002112:	b10a      	cbz	r2, 8002118 <TIM_Base_SetConfig+0x10c>
    TIMx->RCR = Structure->RepetitionCounter;
 8002114:	690b      	ldr	r3, [r1, #16]
 8002116:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002118:	2301      	movs	r3, #1
 800211a:	6143      	str	r3, [r0, #20]
}
 800211c:	bc70      	pop	{r4, r5, r6}
 800211e:	4770      	bx	lr
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8002120:	2401      	movs	r4, #1
 8002122:	e7e3      	b.n	80020ec <TIM_Base_SetConfig+0xe0>
 8002124:	2401      	movs	r4, #1
 8002126:	e7e1      	b.n	80020ec <TIM_Base_SetConfig+0xe0>
 8002128:	2401      	movs	r4, #1
 800212a:	e7df      	b.n	80020ec <TIM_Base_SetConfig+0xe0>
 800212c:	2401      	movs	r4, #1
 800212e:	e7dd      	b.n	80020ec <TIM_Base_SetConfig+0xe0>
 8002130:	40010000 	.word	0x40010000
 8002134:	40000800 	.word	0x40000800
 8002138:	40000400 	.word	0x40000400
 800213c:	40014400 	.word	0x40014400
 8002140:	40001800 	.word	0x40001800
 8002144:	40002000 	.word	0x40002000
 8002148:	40010400 	.word	0x40010400

0800214c <HAL_TIM_Base_Init>:
  if(htim == NULL)
 800214c:	b1a8      	cbz	r0, 800217a <HAL_TIM_Base_Init+0x2e>
{ 
 800214e:	b510      	push	{r4, lr}
 8002150:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 8002152:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002156:	b15b      	cbz	r3, 8002170 <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 8002158:	2302      	movs	r3, #2
 800215a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800215e:	1d21      	adds	r1, r4, #4
 8002160:	6820      	ldr	r0, [r4, #0]
 8002162:	f7ff ff53 	bl	800200c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002166:	2301      	movs	r3, #1
 8002168:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800216c:	2000      	movs	r0, #0
 800216e:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002170:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002174:	f001 f94a 	bl	800340c <HAL_TIM_Base_MspInit>
 8002178:	e7ee      	b.n	8002158 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800217a:	2001      	movs	r0, #1
 800217c:	4770      	bx	lr

0800217e <HAL_TIM_PWM_Init>:
  if(htim == NULL)
 800217e:	b1a8      	cbz	r0, 80021ac <HAL_TIM_PWM_Init+0x2e>
{
 8002180:	b510      	push	{r4, lr}
 8002182:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 8002184:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002188:	b15b      	cbz	r3, 80021a2 <HAL_TIM_PWM_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;  
 800218a:	2302      	movs	r3, #2
 800218c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002190:	1d21      	adds	r1, r4, #4
 8002192:	6820      	ldr	r0, [r4, #0]
 8002194:	f7ff ff3a 	bl	800200c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002198:	2301      	movs	r3, #1
 800219a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800219e:	2000      	movs	r0, #0
 80021a0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80021a2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80021a6:	f7ff ff30 	bl	800200a <HAL_TIM_PWM_MspInit>
 80021aa:	e7ee      	b.n	800218a <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 80021ac:	2001      	movs	r0, #1
 80021ae:	4770      	bx	lr

080021b0 <TIM_OC1_SetConfig>:
{
 80021b0:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021b2:	6a03      	ldr	r3, [r0, #32]
 80021b4:	f023 0301 	bic.w	r3, r3, #1
 80021b8:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80021ba:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 80021bc:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80021be:	6985      	ldr	r5, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80021c0:	4a10      	ldr	r2, [pc, #64]	; (8002204 <TIM_OC1_SetConfig+0x54>)
 80021c2:	402a      	ands	r2, r5
  tmpccmrx |= OC_Config->OCMode;
 80021c4:	680d      	ldr	r5, [r1, #0]
 80021c6:	432a      	orrs	r2, r5
  tmpccer &= ~TIM_CCER_CC1P;
 80021c8:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80021cc:	688d      	ldr	r5, [r1, #8]
 80021ce:	432b      	orrs	r3, r5
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80021d0:	4d0d      	ldr	r5, [pc, #52]	; (8002208 <TIM_OC1_SetConfig+0x58>)
 80021d2:	4e0e      	ldr	r6, [pc, #56]	; (800220c <TIM_OC1_SetConfig+0x5c>)
 80021d4:	42a8      	cmp	r0, r5
 80021d6:	bf18      	it	ne
 80021d8:	42b0      	cmpne	r0, r6
 80021da:	d10b      	bne.n	80021f4 <TIM_OC1_SetConfig+0x44>
    tmpccer &= ~TIM_CCER_CC1NP;
 80021dc:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80021e0:	68cd      	ldr	r5, [r1, #12]
 80021e2:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80021e4:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80021e8:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 80021ec:	694d      	ldr	r5, [r1, #20]
 80021ee:	432c      	orrs	r4, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 80021f0:	698d      	ldr	r5, [r1, #24]
 80021f2:	432c      	orrs	r4, r5
  TIMx->CR2 = tmpcr2;
 80021f4:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80021f6:	6182      	str	r2, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 80021f8:	684a      	ldr	r2, [r1, #4]
 80021fa:	6342      	str	r2, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;  
 80021fc:	6203      	str	r3, [r0, #32]
} 
 80021fe:	bc70      	pop	{r4, r5, r6}
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	fffeff8c 	.word	0xfffeff8c
 8002208:	40010400 	.word	0x40010400
 800220c:	40010000 	.word	0x40010000

08002210 <TIM_OC2_SetConfig>:
{
 8002210:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002212:	6a03      	ldr	r3, [r0, #32]
 8002214:	f023 0310 	bic.w	r3, r3, #16
 8002218:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800221a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 800221c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800221e:	6985      	ldr	r5, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002220:	4a12      	ldr	r2, [pc, #72]	; (800226c <TIM_OC2_SetConfig+0x5c>)
 8002222:	402a      	ands	r2, r5
  tmpccmrx |= (OC_Config->OCMode << 8);
 8002224:	680d      	ldr	r5, [r1, #0]
 8002226:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 800222a:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4);
 800222e:	688d      	ldr	r5, [r1, #8]
 8002230:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002234:	4d0e      	ldr	r5, [pc, #56]	; (8002270 <TIM_OC2_SetConfig+0x60>)
 8002236:	4e0f      	ldr	r6, [pc, #60]	; (8002274 <TIM_OC2_SetConfig+0x64>)
 8002238:	42a8      	cmp	r0, r5
 800223a:	bf18      	it	ne
 800223c:	42b0      	cmpne	r0, r6
 800223e:	d10e      	bne.n	800225e <TIM_OC2_SetConfig+0x4e>
    tmpccer &= ~TIM_CCER_CC2NP;
 8002240:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8002244:	68cd      	ldr	r5, [r1, #12]
 8002246:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800224a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800224e:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8002252:	694d      	ldr	r5, [r1, #20]
 8002254:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8002258:	698d      	ldr	r5, [r1, #24]
 800225a:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 800225e:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002260:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002262:	684a      	ldr	r2, [r1, #4]
 8002264:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002266:	6203      	str	r3, [r0, #32]
}
 8002268:	bc70      	pop	{r4, r5, r6}
 800226a:	4770      	bx	lr
 800226c:	feff8cff 	.word	0xfeff8cff
 8002270:	40010400 	.word	0x40010400
 8002274:	40010000 	.word	0x40010000

08002278 <TIM_OC3_SetConfig>:
{
 8002278:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800227a:	6a03      	ldr	r3, [r0, #32]
 800227c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002280:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002282:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8002284:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8002286:	69c5      	ldr	r5, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8002288:	4a12      	ldr	r2, [pc, #72]	; (80022d4 <TIM_OC3_SetConfig+0x5c>)
 800228a:	402a      	ands	r2, r5
  tmpccmrx |= OC_Config->OCMode;
 800228c:	680d      	ldr	r5, [r1, #0]
 800228e:	432a      	orrs	r2, r5
  tmpccer &= ~TIM_CCER_CC3P;
 8002290:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8);
 8002294:	688d      	ldr	r5, [r1, #8]
 8002296:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800229a:	4d0f      	ldr	r5, [pc, #60]	; (80022d8 <TIM_OC3_SetConfig+0x60>)
 800229c:	4e0f      	ldr	r6, [pc, #60]	; (80022dc <TIM_OC3_SetConfig+0x64>)
 800229e:	42a8      	cmp	r0, r5
 80022a0:	bf18      	it	ne
 80022a2:	42b0      	cmpne	r0, r6
 80022a4:	d10e      	bne.n	80022c4 <TIM_OC3_SetConfig+0x4c>
    tmpccer &= ~TIM_CCER_CC3NP;
 80022a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8);
 80022aa:	68cd      	ldr	r5, [r1, #12]
 80022ac:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 80022b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80022b4:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 80022b8:	694d      	ldr	r5, [r1, #20]
 80022ba:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 80022be:	698d      	ldr	r5, [r1, #24]
 80022c0:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  TIMx->CR2 = tmpcr2;
 80022c4:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 80022c6:	61c2      	str	r2, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80022c8:	684a      	ldr	r2, [r1, #4]
 80022ca:	63c2      	str	r2, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 80022cc:	6203      	str	r3, [r0, #32]
}
 80022ce:	bc70      	pop	{r4, r5, r6}
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	fffeff8c 	.word	0xfffeff8c
 80022d8:	40010400 	.word	0x40010400
 80022dc:	40010000 	.word	0x40010000

080022e0 <TIM_OC4_SetConfig>:
{
 80022e0:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80022e2:	6a03      	ldr	r3, [r0, #32]
 80022e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80022e8:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80022ea:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 80022ec:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 80022ee:	69c5      	ldr	r5, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80022f0:	4a0d      	ldr	r2, [pc, #52]	; (8002328 <TIM_OC4_SetConfig+0x48>)
 80022f2:	402a      	ands	r2, r5
  tmpccmrx |= (OC_Config->OCMode << 8);
 80022f4:	680d      	ldr	r5, [r1, #0]
 80022f6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC4P;
 80022fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12);
 80022fe:	688d      	ldr	r5, [r1, #8]
 8002300:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002304:	4d09      	ldr	r5, [pc, #36]	; (800232c <TIM_OC4_SetConfig+0x4c>)
 8002306:	4e0a      	ldr	r6, [pc, #40]	; (8002330 <TIM_OC4_SetConfig+0x50>)
 8002308:	42a8      	cmp	r0, r5
 800230a:	bf18      	it	ne
 800230c:	42b0      	cmpne	r0, r6
 800230e:	d104      	bne.n	800231a <TIM_OC4_SetConfig+0x3a>
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002310:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8002314:	694d      	ldr	r5, [r1, #20]
 8002316:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  TIMx->CR2 = tmpcr2;
 800231a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 800231c:	61c2      	str	r2, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 800231e:	684a      	ldr	r2, [r1, #4]
 8002320:	6402      	str	r2, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8002322:	6203      	str	r3, [r0, #32]
}
 8002324:	bc70      	pop	{r4, r5, r6}
 8002326:	4770      	bx	lr
 8002328:	feff8cff 	.word	0xfeff8cff
 800232c:	40010400 	.word	0x40010400
 8002330:	40010000 	.word	0x40010000

08002334 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002334:	b410      	push	{r4}
  uint32_t tmpsmcr = 0;

  tmpsmcr = TIMx->SMCR;
 8002336:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002338:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800233c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8002340:	4319      	orrs	r1, r3
 8002342:	430c      	orrs	r4, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002344:	6084      	str	r4, [r0, #8]
} 
 8002346:	f85d 4b04 	ldr.w	r4, [sp], #4
 800234a:	4770      	bx	lr

0800234c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800234c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002350:	2b01      	cmp	r3, #1
 8002352:	d07d      	beq.n	8002450 <HAL_TIM_ConfigClockSource+0x104>
{
 8002354:	b510      	push	{r4, lr}
 8002356:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002358:	2301      	movs	r3, #1
 800235a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800235e:	2302      	movs	r3, #2
 8002360:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002364:	6802      	ldr	r2, [r0, #0]
 8002366:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002368:	4b3a      	ldr	r3, [pc, #232]	; (8002454 <HAL_TIM_ConfigClockSource+0x108>)
 800236a:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 800236c:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800236e:	680b      	ldr	r3, [r1, #0]
 8002370:	2b40      	cmp	r3, #64	; 0x40
 8002372:	d059      	beq.n	8002428 <HAL_TIM_ConfigClockSource+0xdc>
 8002374:	d910      	bls.n	8002398 <HAL_TIM_ConfigClockSource+0x4c>
 8002376:	2b70      	cmp	r3, #112	; 0x70
 8002378:	d03e      	beq.n	80023f8 <HAL_TIM_ConfigClockSource+0xac>
 800237a:	d81f      	bhi.n	80023bc <HAL_TIM_ConfigClockSource+0x70>
 800237c:	2b50      	cmp	r3, #80	; 0x50
 800237e:	d049      	beq.n	8002414 <HAL_TIM_ConfigClockSource+0xc8>
 8002380:	2b60      	cmp	r3, #96	; 0x60
 8002382:	d132      	bne.n	80023ea <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8002384:	68ca      	ldr	r2, [r1, #12]
 8002386:	6849      	ldr	r1, [r1, #4]
 8002388:	6820      	ldr	r0, [r4, #0]
 800238a:	f7ff fe22 	bl	8001fd2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800238e:	2160      	movs	r1, #96	; 0x60
 8002390:	6820      	ldr	r0, [r4, #0]
 8002392:	f7ff fe32 	bl	8001ffa <TIM_ITRx_SetConfig>
    break;
 8002396:	e028      	b.n	80023ea <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8002398:	2b10      	cmp	r3, #16
 800239a:	d04f      	beq.n	800243c <HAL_TIM_ConfigClockSource+0xf0>
 800239c:	d908      	bls.n	80023b0 <HAL_TIM_ConfigClockSource+0x64>
 800239e:	2b20      	cmp	r3, #32
 80023a0:	d051      	beq.n	8002446 <HAL_TIM_ConfigClockSource+0xfa>
 80023a2:	2b30      	cmp	r3, #48	; 0x30
 80023a4:	d121      	bne.n	80023ea <HAL_TIM_ConfigClockSource+0x9e>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 80023a6:	2130      	movs	r1, #48	; 0x30
 80023a8:	6820      	ldr	r0, [r4, #0]
 80023aa:	f7ff fe26 	bl	8001ffa <TIM_ITRx_SetConfig>
    break;
 80023ae:	e01c      	b.n	80023ea <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 80023b0:	b9db      	cbnz	r3, 80023ea <HAL_TIM_ConfigClockSource+0x9e>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 80023b2:	2100      	movs	r1, #0
 80023b4:	6820      	ldr	r0, [r4, #0]
 80023b6:	f7ff fe20 	bl	8001ffa <TIM_ITRx_SetConfig>
    break;
 80023ba:	e016      	b.n	80023ea <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 80023bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023c0:	d00e      	beq.n	80023e0 <HAL_TIM_ConfigClockSource+0x94>
 80023c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023c6:	d110      	bne.n	80023ea <HAL_TIM_ConfigClockSource+0x9e>
      TIM_ETR_SetConfig(htim->Instance, 
 80023c8:	68cb      	ldr	r3, [r1, #12]
 80023ca:	684a      	ldr	r2, [r1, #4]
 80023cc:	6889      	ldr	r1, [r1, #8]
 80023ce:	6820      	ldr	r0, [r4, #0]
 80023d0:	f7ff ffb0 	bl	8002334 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80023d4:	6822      	ldr	r2, [r4, #0]
 80023d6:	6893      	ldr	r3, [r2, #8]
 80023d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023dc:	6093      	str	r3, [r2, #8]
    break;
 80023de:	e004      	b.n	80023ea <HAL_TIM_ConfigClockSource+0x9e>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80023e0:	6822      	ldr	r2, [r4, #0]
 80023e2:	6891      	ldr	r1, [r2, #8]
 80023e4:	4b1c      	ldr	r3, [pc, #112]	; (8002458 <HAL_TIM_ConfigClockSource+0x10c>)
 80023e6:	400b      	ands	r3, r1
 80023e8:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 80023ea:	2301      	movs	r3, #1
 80023ec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80023f0:	2000      	movs	r0, #0
 80023f2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 80023f6:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance, 
 80023f8:	68cb      	ldr	r3, [r1, #12]
 80023fa:	684a      	ldr	r2, [r1, #4]
 80023fc:	6889      	ldr	r1, [r1, #8]
 80023fe:	6820      	ldr	r0, [r4, #0]
 8002400:	f7ff ff98 	bl	8002334 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002404:	6822      	ldr	r2, [r4, #0]
 8002406:	6891      	ldr	r1, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002408:	4b14      	ldr	r3, [pc, #80]	; (800245c <HAL_TIM_ConfigClockSource+0x110>)
 800240a:	400b      	ands	r3, r1
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800240c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8002410:	6093      	str	r3, [r2, #8]
    break;
 8002412:	e7ea      	b.n	80023ea <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8002414:	68ca      	ldr	r2, [r1, #12]
 8002416:	6849      	ldr	r1, [r1, #4]
 8002418:	6820      	ldr	r0, [r4, #0]
 800241a:	f7ff fdc7 	bl	8001fac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800241e:	2150      	movs	r1, #80	; 0x50
 8002420:	6820      	ldr	r0, [r4, #0]
 8002422:	f7ff fdea 	bl	8001ffa <TIM_ITRx_SetConfig>
    break;
 8002426:	e7e0      	b.n	80023ea <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8002428:	68ca      	ldr	r2, [r1, #12]
 800242a:	6849      	ldr	r1, [r1, #4]
 800242c:	6820      	ldr	r0, [r4, #0]
 800242e:	f7ff fdbd 	bl	8001fac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002432:	2140      	movs	r1, #64	; 0x40
 8002434:	6820      	ldr	r0, [r4, #0]
 8002436:	f7ff fde0 	bl	8001ffa <TIM_ITRx_SetConfig>
    break;
 800243a:	e7d6      	b.n	80023ea <HAL_TIM_ConfigClockSource+0x9e>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 800243c:	2110      	movs	r1, #16
 800243e:	6820      	ldr	r0, [r4, #0]
 8002440:	f7ff fddb 	bl	8001ffa <TIM_ITRx_SetConfig>
    break;
 8002444:	e7d1      	b.n	80023ea <HAL_TIM_ConfigClockSource+0x9e>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8002446:	2120      	movs	r1, #32
 8002448:	6820      	ldr	r0, [r4, #0]
 800244a:	f7ff fdd6 	bl	8001ffa <TIM_ITRx_SetConfig>
    break;
 800244e:	e7cc      	b.n	80023ea <HAL_TIM_ConfigClockSource+0x9e>
  __HAL_LOCK(htim);
 8002450:	2002      	movs	r0, #2
 8002452:	4770      	bx	lr
 8002454:	fffe0088 	.word	0xfffe0088
 8002458:	fffefff8 	.word	0xfffefff8
 800245c:	fffeff88 	.word	0xfffeff88

08002460 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002460:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8002462:	2301      	movs	r3, #1
 8002464:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002468:	6a03      	ldr	r3, [r0, #32]
 800246a:	ea23 0304 	bic.w	r3, r3, r4
 800246e:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8002470:	6a03      	ldr	r3, [r0, #32]
 8002472:	408a      	lsls	r2, r1
 8002474:	4313      	orrs	r3, r2
 8002476:	6203      	str	r3, [r0, #32]
}
 8002478:	f85d 4b04 	ldr.w	r4, [sp], #4
 800247c:	4770      	bx	lr
	...

08002480 <HAL_TIM_PWM_Start>:
{
 8002480:	b510      	push	{r4, lr}
 8002482:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002484:	2201      	movs	r2, #1
 8002486:	6800      	ldr	r0, [r0, #0]
 8002488:	f7ff ffea 	bl	8002460 <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 800248c:	6823      	ldr	r3, [r4, #0]
 800248e:	4a08      	ldr	r2, [pc, #32]	; (80024b0 <HAL_TIM_PWM_Start+0x30>)
 8002490:	4908      	ldr	r1, [pc, #32]	; (80024b4 <HAL_TIM_PWM_Start+0x34>)
 8002492:	4293      	cmp	r3, r2
 8002494:	bf18      	it	ne
 8002496:	428b      	cmpne	r3, r1
 8002498:	d103      	bne.n	80024a2 <HAL_TIM_PWM_Start+0x22>
    __HAL_TIM_MOE_ENABLE(htim);
 800249a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800249c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024a0:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 80024a2:	6822      	ldr	r2, [r4, #0]
 80024a4:	6813      	ldr	r3, [r2, #0]
 80024a6:	f043 0301 	orr.w	r3, r3, #1
 80024aa:	6013      	str	r3, [r2, #0]
} 
 80024ac:	2000      	movs	r0, #0
 80024ae:	bd10      	pop	{r4, pc}
 80024b0:	40010400 	.word	0x40010400
 80024b4:	40010000 	.word	0x40010000

080024b8 <TIM_OC5_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80024b8:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80024ba:	6a03      	ldr	r3, [r0, #32]
 80024bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024c0:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024c2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80024c4:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80024c6:	6d45      	ldr	r5, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80024c8:	4a0d      	ldr	r2, [pc, #52]	; (8002500 <TIM_OC5_SetConfig+0x48>)
 80024ca:	402a      	ands	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80024cc:	680d      	ldr	r5, [r1, #0]
 80024ce:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80024d0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);
 80024d4:	688d      	ldr	r5, [r1, #8]
 80024d6:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80024da:	4d0a      	ldr	r5, [pc, #40]	; (8002504 <TIM_OC5_SetConfig+0x4c>)
 80024dc:	4e0a      	ldr	r6, [pc, #40]	; (8002508 <TIM_OC5_SetConfig+0x50>)
 80024de:	42a8      	cmp	r0, r5
 80024e0:	bf18      	it	ne
 80024e2:	42b0      	cmpne	r0, r6
 80024e4:	d104      	bne.n	80024f0 <TIM_OC5_SetConfig+0x38>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80024e6:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 80024ea:	694d      	ldr	r5, [r1, #20]
 80024ec:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024f0:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80024f2:	6542      	str	r2, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80024f4:	684a      	ldr	r2, [r1, #4]
 80024f6:	6582      	str	r2, [r0, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80024f8:	6203      	str	r3, [r0, #32]
}
 80024fa:	bc70      	pop	{r4, r5, r6}
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	fffeff8f 	.word	0xfffeff8f
 8002504:	40010400 	.word	0x40010400
 8002508:	40010000 	.word	0x40010000

0800250c <TIM_OC6_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800250c:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800250e:	6a03      	ldr	r3, [r0, #32]
 8002510:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002514:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002516:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8002518:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800251a:	6d45      	ldr	r5, [r0, #84]	; 0x54
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800251c:	4a0d      	ldr	r2, [pc, #52]	; (8002554 <TIM_OC6_SetConfig+0x48>)
 800251e:	402a      	ands	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8002520:	680d      	ldr	r5, [r1, #0]
 8002522:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002526:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 800252a:	688d      	ldr	r5, [r1, #8]
 800252c:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002530:	4d09      	ldr	r5, [pc, #36]	; (8002558 <TIM_OC6_SetConfig+0x4c>)
 8002532:	4e0a      	ldr	r6, [pc, #40]	; (800255c <TIM_OC6_SetConfig+0x50>)
 8002534:	42a8      	cmp	r0, r5
 8002536:	bf18      	it	ne
 8002538:	42b0      	cmpne	r0, r6
 800253a:	d104      	bne.n	8002546 <TIM_OC6_SetConfig+0x3a>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800253c:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 8002540:	694d      	ldr	r5, [r1, #20]
 8002542:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002546:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002548:	6542      	str	r2, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800254a:	684a      	ldr	r2, [r1, #4]
 800254c:	65c2      	str	r2, [r0, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800254e:	6203      	str	r3, [r0, #32]
}
 8002550:	bc70      	pop	{r4, r5, r6}
 8002552:	4770      	bx	lr
 8002554:	feff8fff 	.word	0xfeff8fff
 8002558:	40010400 	.word	0x40010400
 800255c:	40010000 	.word	0x40010000

08002560 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 8002560:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002564:	2b01      	cmp	r3, #1
 8002566:	d021      	beq.n	80025ac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
{
 8002568:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 800256a:	2301      	movs	r3, #1
 800256c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  tmpcr2 = htim->Instance->CR2;
 8002570:	6804      	ldr	r4, [r0, #0]
 8002572:	6863      	ldr	r3, [r4, #4]
  tmpsmcr = htim->Instance->SMCR;
 8002574:	68a2      	ldr	r2, [r4, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002576:	4d0e      	ldr	r5, [pc, #56]	; (80025b0 <HAL_TIMEx_MasterConfigSynchronization+0x50>)
 8002578:	4e0e      	ldr	r6, [pc, #56]	; (80025b4 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 800257a:	42ac      	cmp	r4, r5
 800257c:	bf18      	it	ne
 800257e:	42b4      	cmpne	r4, r6
 8002580:	d103      	bne.n	800258a <HAL_TIMEx_MasterConfigSynchronization+0x2a>
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002582:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002586:	684d      	ldr	r5, [r1, #4]
 8002588:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 800258a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800258e:	680d      	ldr	r5, [r1, #0]
 8002590:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002592:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002596:	6889      	ldr	r1, [r1, #8]
 8002598:	430a      	orrs	r2, r1
  htim->Instance->CR2 = tmpcr2;
 800259a:	6063      	str	r3, [r4, #4]
  htim->Instance->SMCR = tmpsmcr;
 800259c:	6803      	ldr	r3, [r0, #0]
 800259e:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(htim);
 80025a0:	2300      	movs	r3, #0
 80025a2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80025a6:	4618      	mov	r0, r3
} 
 80025a8:	bc70      	pop	{r4, r5, r6}
 80025aa:	4770      	bx	lr
  __HAL_LOCK(htim);
 80025ac:	2002      	movs	r0, #2
 80025ae:	4770      	bx	lr
 80025b0:	40010400 	.word	0x40010400
 80025b4:	40010000 	.word	0x40010000

080025b8 <HAL_TIM_PWM_ConfigChannel>:
{
 80025b8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80025ba:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80025be:	2b01      	cmp	r3, #1
 80025c0:	f000 8092 	beq.w	80026e8 <HAL_TIM_PWM_ConfigChannel+0x130>
 80025c4:	460d      	mov	r5, r1
 80025c6:	4604      	mov	r4, r0
 80025c8:	2301      	movs	r3, #1
 80025ca:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80025ce:	2302      	movs	r3, #2
 80025d0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 80025d4:	2a14      	cmp	r2, #20
 80025d6:	d81e      	bhi.n	8002616 <HAL_TIM_PWM_ConfigChannel+0x5e>
 80025d8:	e8df f002 	tbb	[pc, r2]
 80025dc:	1d1d1d0b 	.word	0x1d1d1d0b
 80025e0:	1d1d1d24 	.word	0x1d1d1d24
 80025e4:	1d1d1d38 	.word	0x1d1d1d38
 80025e8:	1d1d1d4b 	.word	0x1d1d1d4b
 80025ec:	1d1d1d5f 	.word	0x1d1d1d5f
 80025f0:	72          	.byte	0x72
 80025f1:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80025f2:	6800      	ldr	r0, [r0, #0]
 80025f4:	f7ff fddc 	bl	80021b0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80025f8:	6822      	ldr	r2, [r4, #0]
 80025fa:	6993      	ldr	r3, [r2, #24]
 80025fc:	f043 0308 	orr.w	r3, r3, #8
 8002600:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002602:	6822      	ldr	r2, [r4, #0]
 8002604:	6993      	ldr	r3, [r2, #24]
 8002606:	f023 0304 	bic.w	r3, r3, #4
 800260a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800260c:	6822      	ldr	r2, [r4, #0]
 800260e:	6993      	ldr	r3, [r2, #24]
 8002610:	6929      	ldr	r1, [r5, #16]
 8002612:	430b      	orrs	r3, r1
 8002614:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 8002616:	2301      	movs	r3, #1
 8002618:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800261c:	2000      	movs	r0, #0
 800261e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8002622:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002624:	6800      	ldr	r0, [r0, #0]
 8002626:	f7ff fdf3 	bl	8002210 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800262a:	6822      	ldr	r2, [r4, #0]
 800262c:	6993      	ldr	r3, [r2, #24]
 800262e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002632:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002634:	6822      	ldr	r2, [r4, #0]
 8002636:	6993      	ldr	r3, [r2, #24]
 8002638:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800263c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 800263e:	6822      	ldr	r2, [r4, #0]
 8002640:	6993      	ldr	r3, [r2, #24]
 8002642:	6929      	ldr	r1, [r5, #16]
 8002644:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002648:	6193      	str	r3, [r2, #24]
    break;
 800264a:	e7e4      	b.n	8002616 <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800264c:	6800      	ldr	r0, [r0, #0]
 800264e:	f7ff fe13 	bl	8002278 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002652:	6822      	ldr	r2, [r4, #0]
 8002654:	69d3      	ldr	r3, [r2, #28]
 8002656:	f043 0308 	orr.w	r3, r3, #8
 800265a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800265c:	6822      	ldr	r2, [r4, #0]
 800265e:	69d3      	ldr	r3, [r2, #28]
 8002660:	f023 0304 	bic.w	r3, r3, #4
 8002664:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8002666:	6822      	ldr	r2, [r4, #0]
 8002668:	69d3      	ldr	r3, [r2, #28]
 800266a:	6929      	ldr	r1, [r5, #16]
 800266c:	430b      	orrs	r3, r1
 800266e:	61d3      	str	r3, [r2, #28]
    break;
 8002670:	e7d1      	b.n	8002616 <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002672:	6800      	ldr	r0, [r0, #0]
 8002674:	f7ff fe34 	bl	80022e0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002678:	6822      	ldr	r2, [r4, #0]
 800267a:	69d3      	ldr	r3, [r2, #28]
 800267c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002680:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002682:	6822      	ldr	r2, [r4, #0]
 8002684:	69d3      	ldr	r3, [r2, #28]
 8002686:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800268a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 800268c:	6822      	ldr	r2, [r4, #0]
 800268e:	69d3      	ldr	r3, [r2, #28]
 8002690:	6929      	ldr	r1, [r5, #16]
 8002692:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002696:	61d3      	str	r3, [r2, #28]
    break;
 8002698:	e7bd      	b.n	8002616 <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800269a:	6800      	ldr	r0, [r0, #0]
 800269c:	f7ff ff0c 	bl	80024b8 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80026a0:	6822      	ldr	r2, [r4, #0]
 80026a2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80026a4:	f043 0308 	orr.w	r3, r3, #8
 80026a8:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80026aa:	6822      	ldr	r2, [r4, #0]
 80026ac:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80026ae:	f023 0304 	bic.w	r3, r3, #4
 80026b2:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 80026b4:	6822      	ldr	r2, [r4, #0]
 80026b6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80026b8:	6929      	ldr	r1, [r5, #16]
 80026ba:	430b      	orrs	r3, r1
 80026bc:	6553      	str	r3, [r2, #84]	; 0x54
    break;
 80026be:	e7aa      	b.n	8002616 <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80026c0:	6800      	ldr	r0, [r0, #0]
 80026c2:	f7ff ff23 	bl	800250c <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80026c6:	6822      	ldr	r2, [r4, #0]
 80026c8:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80026ca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80026ce:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80026d0:	6822      	ldr	r2, [r4, #0]
 80026d2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80026d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80026d8:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 80026da:	6822      	ldr	r2, [r4, #0]
 80026dc:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80026de:	6929      	ldr	r1, [r5, #16]
 80026e0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80026e4:	6553      	str	r3, [r2, #84]	; 0x54
    break;
 80026e6:	e796      	b.n	8002616 <HAL_TIM_PWM_ConfigChannel+0x5e>
  __HAL_LOCK(htim);
 80026e8:	2002      	movs	r0, #2
}
 80026ea:	bd38      	pop	{r3, r4, r5, pc}

080026ec <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80026ec:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b21      	cmp	r3, #33	; 0x21
 80026f4:	d001      	beq.n	80026fa <UART_Transmit_IT+0xe>
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 80026f6:	2002      	movs	r0, #2
  }
}
 80026f8:	4770      	bx	lr
    if(huart->TxXferCount == 0U)
 80026fa:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 80026fe:	b29b      	uxth	r3, r3
 8002700:	b193      	cbz	r3, 8002728 <UART_Transmit_IT+0x3c>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002702:	6883      	ldr	r3, [r0, #8]
 8002704:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002708:	d01a      	beq.n	8002740 <UART_Transmit_IT+0x54>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 800270a:	6802      	ldr	r2, [r0, #0]
 800270c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800270e:	1c59      	adds	r1, r3, #1
 8002710:	64c1      	str	r1, [r0, #76]	; 0x4c
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8002716:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 800271a:	b29b      	uxth	r3, r3
 800271c:	3b01      	subs	r3, #1
 800271e:	b29b      	uxth	r3, r3
 8002720:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
      return HAL_OK;
 8002724:	2000      	movs	r0, #0
 8002726:	4770      	bx	lr
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002728:	6802      	ldr	r2, [r0, #0]
 800272a:	6813      	ldr	r3, [r2, #0]
 800272c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002730:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002732:	6802      	ldr	r2, [r0, #0]
 8002734:	6813      	ldr	r3, [r2, #0]
 8002736:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800273a:	6013      	str	r3, [r2, #0]
      return HAL_OK;
 800273c:	2000      	movs	r0, #0
 800273e:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002740:	6903      	ldr	r3, [r0, #16]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d1e1      	bne.n	800270a <UART_Transmit_IT+0x1e>
        tmp = (uint16_t*) huart->pTxBuffPtr;
 8002746:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002748:	6802      	ldr	r2, [r0, #0]
 800274a:	881b      	ldrh	r3, [r3, #0]
 800274c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002750:	6293      	str	r3, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8002752:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002754:	3302      	adds	r3, #2
 8002756:	64c3      	str	r3, [r0, #76]	; 0x4c
 8002758:	e7dd      	b.n	8002716 <UART_Transmit_IT+0x2a>

0800275a <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800275a:	6802      	ldr	r2, [r0, #0]
 800275c:	6813      	ldr	r3, [r2, #0]
 800275e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002762:	6013      	str	r3, [r2, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002764:	2320      	movs	r3, #32
 8002766:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800276a:	4770      	bx	lr

0800276c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800276c:	6802      	ldr	r2, [r0, #0]
 800276e:	6813      	ldr	r3, [r2, #0]
 8002770:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002774:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002776:	6802      	ldr	r2, [r0, #0]
 8002778:	6893      	ldr	r3, [r2, #8]
 800277a:	f023 0301 	bic.w	r3, r3, #1
 800277e:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002780:	2320      	movs	r3, #32
 8002782:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
 8002786:	4770      	bx	lr

08002788 <HAL_UART_Transmit_DMA>:
{
 8002788:	b538      	push	{r3, r4, r5, lr}
  if(huart->gState == HAL_UART_STATE_READY)
 800278a:	f890 4069 	ldrb.w	r4, [r0, #105]	; 0x69
 800278e:	b2e4      	uxtb	r4, r4
 8002790:	2c20      	cmp	r4, #32
 8002792:	d001      	beq.n	8002798 <HAL_UART_Transmit_DMA+0x10>
    return HAL_BUSY;
 8002794:	2002      	movs	r0, #2
 8002796:	bd38      	pop	{r3, r4, r5, pc}
    if((pData == NULL ) || (Size == 0U))
 8002798:	2a00      	cmp	r2, #0
 800279a:	bf18      	it	ne
 800279c:	2900      	cmpne	r1, #0
 800279e:	d030      	beq.n	8002802 <HAL_UART_Transmit_DMA+0x7a>
    __HAL_LOCK(huart);
 80027a0:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d101      	bne.n	80027ac <HAL_UART_Transmit_DMA+0x24>
 80027a8:	2002      	movs	r0, #2
}
 80027aa:	bd38      	pop	{r3, r4, r5, pc}
 80027ac:	4613      	mov	r3, r2
 80027ae:	4604      	mov	r4, r0
    __HAL_LOCK(huart);
 80027b0:	2201      	movs	r2, #1
 80027b2:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    huart->pTxBuffPtr = pData;
 80027b6:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize = Size;
 80027b8:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
    huart->TxXferCount = Size;
 80027bc:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027c0:	2500      	movs	r5, #0
 80027c2:	66c5      	str	r5, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027c4:	2221      	movs	r2, #33	; 0x21
 80027c6:	f880 2069 	strb.w	r2, [r0, #105]	; 0x69
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80027ca:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80027cc:	480e      	ldr	r0, [pc, #56]	; (8002808 <HAL_UART_Transmit_DMA+0x80>)
 80027ce:	63d0      	str	r0, [r2, #60]	; 0x3c
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80027d0:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80027d2:	480e      	ldr	r0, [pc, #56]	; (800280c <HAL_UART_Transmit_DMA+0x84>)
 80027d4:	6410      	str	r0, [r2, #64]	; 0x40
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80027d6:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80027d8:	480d      	ldr	r0, [pc, #52]	; (8002810 <HAL_UART_Transmit_DMA+0x88>)
 80027da:	64d0      	str	r0, [r2, #76]	; 0x4c
    huart->hdmatx->XferAbortCallback = NULL;
 80027dc:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80027de:	6515      	str	r5, [r2, #80]	; 0x50
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->TDR, Size);
 80027e0:	6822      	ldr	r2, [r4, #0]
 80027e2:	3228      	adds	r2, #40	; 0x28
 80027e4:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80027e6:	f7fe fc39 	bl	800105c <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_IT(huart, UART_FLAG_TC);
 80027ea:	6823      	ldr	r3, [r4, #0]
 80027ec:	2240      	movs	r2, #64	; 0x40
 80027ee:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 80027f0:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80027f4:	6822      	ldr	r2, [r4, #0]
 80027f6:	6893      	ldr	r3, [r2, #8]
 80027f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027fc:	6093      	str	r3, [r2, #8]
    return HAL_OK;
 80027fe:	4628      	mov	r0, r5
 8002800:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8002802:	2001      	movs	r0, #1
 8002804:	bd38      	pop	{r3, r4, r5, pc}
 8002806:	bf00      	nop
 8002808:	08002879 	.word	0x08002879
 800280c:	080028c7 	.word	0x080028c7
 8002810:	08002959 	.word	0x08002959

08002814 <UART_WaitOnFlagUntilTimeout>:
{
 8002814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002818:	4605      	mov	r5, r0
 800281a:	460f      	mov	r7, r1
 800281c:	4616      	mov	r6, r2
 800281e:	4698      	mov	r8, r3
 8002820:	9c06      	ldr	r4, [sp, #24]
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002822:	682b      	ldr	r3, [r5, #0]
 8002824:	69db      	ldr	r3, [r3, #28]
 8002826:	ea37 0303 	bics.w	r3, r7, r3
 800282a:	bf0c      	ite	eq
 800282c:	2301      	moveq	r3, #1
 800282e:	2300      	movne	r3, #0
 8002830:	42b3      	cmp	r3, r6
 8002832:	d11e      	bne.n	8002872 <UART_WaitOnFlagUntilTimeout+0x5e>
    if(Timeout != HAL_MAX_DELAY)
 8002834:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002838:	d0f3      	beq.n	8002822 <UART_WaitOnFlagUntilTimeout+0xe>
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 800283a:	b12c      	cbz	r4, 8002848 <UART_WaitOnFlagUntilTimeout+0x34>
 800283c:	f7fd feb6 	bl	80005ac <HAL_GetTick>
 8002840:	eba0 0008 	sub.w	r0, r0, r8
 8002844:	4284      	cmp	r4, r0
 8002846:	d8ec      	bhi.n	8002822 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002848:	682a      	ldr	r2, [r5, #0]
 800284a:	6813      	ldr	r3, [r2, #0]
 800284c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002850:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002852:	682a      	ldr	r2, [r5, #0]
 8002854:	6893      	ldr	r3, [r2, #8]
 8002856:	f023 0301 	bic.w	r3, r3, #1
 800285a:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 800285c:	2320      	movs	r3, #32
 800285e:	f885 3069 	strb.w	r3, [r5, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8002862:	f885 306a 	strb.w	r3, [r5, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8002866:	2300      	movs	r3, #0
 8002868:	f885 3068 	strb.w	r3, [r5, #104]	; 0x68
        return HAL_TIMEOUT;
 800286c:	2003      	movs	r0, #3
 800286e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 8002872:	2000      	movs	r0, #0
}
 8002874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002878 <UART_DMATransmitCplt>:
{
 8002878:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800287a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800287c:	6802      	ldr	r2, [r0, #0]
 800287e:	6812      	ldr	r2, [r2, #0]
 8002880:	f412 7f80 	tst.w	r2, #256	; 0x100
 8002884:	d10d      	bne.n	80028a2 <UART_DMATransmitCplt+0x2a>
    huart->TxXferCount = 0U;
 8002886:	2200      	movs	r2, #0
 8002888:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800288c:	6819      	ldr	r1, [r3, #0]
 800288e:	688a      	ldr	r2, [r1, #8]
 8002890:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002894:	608a      	str	r2, [r1, #8]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	6813      	ldr	r3, [r2, #0]
 800289a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800289e:	6013      	str	r3, [r2, #0]
 80028a0:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 80028a2:	4618      	mov	r0, r3
 80028a4:	f000 fc18 	bl	80030d8 <HAL_UART_TxCpltCallback>
 80028a8:	bd08      	pop	{r3, pc}

080028aa <UART_EndTransmit_IT>:
{
 80028aa:	b508      	push	{r3, lr}
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80028ac:	6801      	ldr	r1, [r0, #0]
 80028ae:	680b      	ldr	r3, [r1, #0]
 80028b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028b4:	600b      	str	r3, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 80028b6:	2320      	movs	r3, #32
 80028b8:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
  HAL_UART_TxCpltCallback(huart);
 80028bc:	f000 fc0c 	bl	80030d8 <HAL_UART_TxCpltCallback>
}
 80028c0:	2000      	movs	r0, #0
 80028c2:	bd08      	pop	{r3, pc}

080028c4 <HAL_UART_TxHalfCpltCallback>:
{
 80028c4:	4770      	bx	lr

080028c6 <UART_DMATxHalfCplt>:
{
 80028c6:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 80028c8:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80028ca:	f7ff fffb 	bl	80028c4 <HAL_UART_TxHalfCpltCallback>
 80028ce:	bd08      	pop	{r3, pc}

080028d0 <HAL_UART_RxCpltCallback>:
{
 80028d0:	4770      	bx	lr

080028d2 <UART_Receive_IT>:
{
 80028d2:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 80028d4:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80028d8:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b22      	cmp	r3, #34	; 0x22
 80028e0:	d006      	beq.n	80028f0 <UART_Receive_IT+0x1e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80028e2:	6802      	ldr	r2, [r0, #0]
 80028e4:	6993      	ldr	r3, [r2, #24]
 80028e6:	f043 0308 	orr.w	r3, r3, #8
 80028ea:	6193      	str	r3, [r2, #24]
    return HAL_BUSY;
 80028ec:	2002      	movs	r0, #2
 80028ee:	bd08      	pop	{r3, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028f0:	6883      	ldr	r3, [r0, #8]
 80028f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028f6:	d011      	beq.n	800291c <UART_Receive_IT+0x4a>
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80028f8:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80028fa:	1c59      	adds	r1, r3, #1
 80028fc:	6541      	str	r1, [r0, #84]	; 0x54
 80028fe:	6801      	ldr	r1, [r0, #0]
 8002900:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8002902:	b2d2      	uxtb	r2, r2
 8002904:	400a      	ands	r2, r1
 8002906:	701a      	strb	r2, [r3, #0]
    if(--huart->RxXferCount == 0)
 8002908:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 800290c:	b29b      	uxth	r3, r3
 800290e:	3b01      	subs	r3, #1
 8002910:	b29b      	uxth	r3, r3
 8002912:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 8002916:	b16b      	cbz	r3, 8002934 <UART_Receive_IT+0x62>
    return HAL_OK;
 8002918:	2000      	movs	r0, #0
}
 800291a:	bd08      	pop	{r3, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800291c:	6903      	ldr	r3, [r0, #16]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1ea      	bne.n	80028f8 <UART_Receive_IT+0x26>
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 8002922:	6d43      	ldr	r3, [r0, #84]	; 0x54
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8002924:	6801      	ldr	r1, [r0, #0]
 8002926:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8002928:	400a      	ands	r2, r1
 800292a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr +=2;
 800292c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800292e:	3302      	adds	r3, #2
 8002930:	6543      	str	r3, [r0, #84]	; 0x54
 8002932:	e7e9      	b.n	8002908 <UART_Receive_IT+0x36>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002934:	6802      	ldr	r2, [r0, #0]
 8002936:	6813      	ldr	r3, [r2, #0]
 8002938:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800293c:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800293e:	6802      	ldr	r2, [r0, #0]
 8002940:	6893      	ldr	r3, [r2, #8]
 8002942:	f023 0301 	bic.w	r3, r3, #1
 8002946:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8002948:	2320      	movs	r3, #32
 800294a:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
      HAL_UART_RxCpltCallback(huart);
 800294e:	f7ff ffbf 	bl	80028d0 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8002952:	2000      	movs	r0, #0
 8002954:	bd08      	pop	{r3, pc}

08002956 <HAL_UART_ErrorCallback>:
{
 8002956:	4770      	bx	lr

08002958 <UART_DMAError>:
{
 8002958:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800295a:	6b84      	ldr	r4, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 800295c:	2300      	movs	r3, #0
 800295e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8002962:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
  if (  (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002966:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 800296a:	b2db      	uxtb	r3, r3
 800296c:	2b21      	cmp	r3, #33	; 0x21
 800296e:	d00c      	beq.n	800298a <UART_DMAError+0x32>
  if (  (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002970:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b22      	cmp	r3, #34	; 0x22
 8002978:	d010      	beq.n	800299c <UART_DMAError+0x44>
  SET_BIT(huart->ErrorCode, HAL_UART_ERROR_DMA);
 800297a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800297c:	f043 0310 	orr.w	r3, r3, #16
 8002980:	66e3      	str	r3, [r4, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 8002982:	4620      	mov	r0, r4
 8002984:	f7ff ffe7 	bl	8002956 <HAL_UART_ErrorCallback>
 8002988:	bd10      	pop	{r4, pc}
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) )
 800298a:	6823      	ldr	r3, [r4, #0]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002992:	d0ed      	beq.n	8002970 <UART_DMAError+0x18>
    UART_EndTxTransfer(huart);
 8002994:	4620      	mov	r0, r4
 8002996:	f7ff fee0 	bl	800275a <UART_EndTxTransfer>
 800299a:	e7e9      	b.n	8002970 <UART_DMAError+0x18>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) )
 800299c:	6823      	ldr	r3, [r4, #0]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80029a4:	d0e9      	beq.n	800297a <UART_DMAError+0x22>
    UART_EndRxTransfer(huart);
 80029a6:	4620      	mov	r0, r4
 80029a8:	f7ff fee0 	bl	800276c <UART_EndRxTransfer>
 80029ac:	e7e5      	b.n	800297a <UART_DMAError+0x22>
	...

080029b0 <HAL_UART_IRQHandler>:
{
 80029b0:	b538      	push	{r3, r4, r5, lr}
 80029b2:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80029b4:	6802      	ldr	r2, [r0, #0]
 80029b6:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80029b8:	6810      	ldr	r0, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80029ba:	6891      	ldr	r1, [r2, #8]
  if (errorflags == RESET)
 80029bc:	f013 050f 	ands.w	r5, r3, #15
 80029c0:	d105      	bne.n	80029ce <HAL_UART_IRQHandler+0x1e>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80029c2:	f013 0f20 	tst.w	r3, #32
 80029c6:	d002      	beq.n	80029ce <HAL_UART_IRQHandler+0x1e>
 80029c8:	f010 0f20 	tst.w	r0, #32
 80029cc:	d15f      	bne.n	8002a8e <HAL_UART_IRQHandler+0xde>
  if(   (errorflags != RESET)
 80029ce:	2d00      	cmp	r5, #0
 80029d0:	d073      	beq.n	8002aba <HAL_UART_IRQHandler+0x10a>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 80029d2:	f011 0101 	ands.w	r1, r1, #1
 80029d6:	d102      	bne.n	80029de <HAL_UART_IRQHandler+0x2e>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 80029d8:	f410 7f90 	tst.w	r0, #288	; 0x120
 80029dc:	d06d      	beq.n	8002aba <HAL_UART_IRQHandler+0x10a>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80029de:	f013 0f01 	tst.w	r3, #1
 80029e2:	d007      	beq.n	80029f4 <HAL_UART_IRQHandler+0x44>
 80029e4:	f410 7f80 	tst.w	r0, #256	; 0x100
 80029e8:	d004      	beq.n	80029f4 <HAL_UART_IRQHandler+0x44>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 80029ea:	2501      	movs	r5, #1
 80029ec:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80029ee:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80029f0:	432a      	orrs	r2, r5
 80029f2:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80029f4:	f013 0f02 	tst.w	r3, #2
 80029f8:	d007      	beq.n	8002a0a <HAL_UART_IRQHandler+0x5a>
 80029fa:	b131      	cbz	r1, 8002a0a <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 80029fc:	6822      	ldr	r2, [r4, #0]
 80029fe:	2502      	movs	r5, #2
 8002a00:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a02:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002a04:	f042 0204 	orr.w	r2, r2, #4
 8002a08:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a0a:	f013 0f04 	tst.w	r3, #4
 8002a0e:	d007      	beq.n	8002a20 <HAL_UART_IRQHandler+0x70>
 8002a10:	b131      	cbz	r1, 8002a20 <HAL_UART_IRQHandler+0x70>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8002a12:	6822      	ldr	r2, [r4, #0]
 8002a14:	2504      	movs	r5, #4
 8002a16:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a18:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002a1a:	f042 0202 	orr.w	r2, r2, #2
 8002a1e:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8002a20:	f013 0f08 	tst.w	r3, #8
 8002a24:	d009      	beq.n	8002a3a <HAL_UART_IRQHandler+0x8a>
 8002a26:	f010 0f20 	tst.w	r0, #32
 8002a2a:	d100      	bne.n	8002a2e <HAL_UART_IRQHandler+0x7e>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002a2c:	b129      	cbz	r1, 8002a3a <HAL_UART_IRQHandler+0x8a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8002a2e:	6822      	ldr	r2, [r4, #0]
 8002a30:	2108      	movs	r1, #8
 8002a32:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a34:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002a36:	430a      	orrs	r2, r1
 8002a38:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a3a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002a3c:	2a00      	cmp	r2, #0
 8002a3e:	d048      	beq.n	8002ad2 <HAL_UART_IRQHandler+0x122>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a40:	f013 0f20 	tst.w	r3, #32
 8002a44:	d002      	beq.n	8002a4c <HAL_UART_IRQHandler+0x9c>
 8002a46:	f010 0f20 	tst.w	r0, #32
 8002a4a:	d124      	bne.n	8002a96 <HAL_UART_IRQHandler+0xe6>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002a4c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8002a4e:	f013 0f08 	tst.w	r3, #8
 8002a52:	d104      	bne.n	8002a5e <HAL_UART_IRQHandler+0xae>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8002a54:	6823      	ldr	r3, [r4, #0]
 8002a56:	689b      	ldr	r3, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002a58:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002a5c:	d027      	beq.n	8002aae <HAL_UART_IRQHandler+0xfe>
        UART_EndRxTransfer(huart);
 8002a5e:	4620      	mov	r0, r4
 8002a60:	f7ff fe84 	bl	800276c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a64:	6823      	ldr	r3, [r4, #0]
 8002a66:	689a      	ldr	r2, [r3, #8]
 8002a68:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002a6c:	d01b      	beq.n	8002aa6 <HAL_UART_IRQHandler+0xf6>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a6e:	689a      	ldr	r2, [r3, #8]
 8002a70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a74:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8002a76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002a78:	b18b      	cbz	r3, 8002a9e <HAL_UART_IRQHandler+0xee>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002a7a:	4a1a      	ldr	r2, [pc, #104]	; (8002ae4 <HAL_UART_IRQHandler+0x134>)
 8002a7c:	651a      	str	r2, [r3, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a7e:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8002a80:	f7fe fb26 	bl	80010d0 <HAL_DMA_Abort_IT>
 8002a84:	b328      	cbz	r0, 8002ad2 <HAL_UART_IRQHandler+0x122>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a86:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8002a88:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002a8a:	4798      	blx	r3
 8002a8c:	bd38      	pop	{r3, r4, r5, pc}
      UART_Receive_IT(huart);
 8002a8e:	4620      	mov	r0, r4
 8002a90:	f7ff ff1f 	bl	80028d2 <UART_Receive_IT>
      return;
 8002a94:	bd38      	pop	{r3, r4, r5, pc}
        UART_Receive_IT(huart);
 8002a96:	4620      	mov	r0, r4
 8002a98:	f7ff ff1b 	bl	80028d2 <UART_Receive_IT>
 8002a9c:	e7d6      	b.n	8002a4c <HAL_UART_IRQHandler+0x9c>
            HAL_UART_ErrorCallback(huart);
 8002a9e:	4620      	mov	r0, r4
 8002aa0:	f7ff ff59 	bl	8002956 <HAL_UART_ErrorCallback>
 8002aa4:	bd38      	pop	{r3, r4, r5, pc}
          HAL_UART_ErrorCallback(huart);
 8002aa6:	4620      	mov	r0, r4
 8002aa8:	f7ff ff55 	bl	8002956 <HAL_UART_ErrorCallback>
 8002aac:	bd38      	pop	{r3, r4, r5, pc}
        HAL_UART_ErrorCallback(huart);
 8002aae:	4620      	mov	r0, r4
 8002ab0:	f7ff ff51 	bl	8002956 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	66e3      	str	r3, [r4, #108]	; 0x6c
 8002ab8:	bd38      	pop	{r3, r4, r5, pc}
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002aba:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002abe:	d002      	beq.n	8002ac6 <HAL_UART_IRQHandler+0x116>
 8002ac0:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002ac4:	d106      	bne.n	8002ad4 <HAL_UART_IRQHandler+0x124>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002ac6:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002aca:	d002      	beq.n	8002ad2 <HAL_UART_IRQHandler+0x122>
 8002acc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002ad0:	d104      	bne.n	8002adc <HAL_UART_IRQHandler+0x12c>
 8002ad2:	bd38      	pop	{r3, r4, r5, pc}
    UART_Transmit_IT(huart);
 8002ad4:	4620      	mov	r0, r4
 8002ad6:	f7ff fe09 	bl	80026ec <UART_Transmit_IT>
    return;
 8002ada:	bd38      	pop	{r3, r4, r5, pc}
    UART_EndTransmit_IT(huart);
 8002adc:	4620      	mov	r0, r4
 8002ade:	f7ff fee4 	bl	80028aa <UART_EndTransmit_IT>
    return;
 8002ae2:	e7f6      	b.n	8002ad2 <HAL_UART_IRQHandler+0x122>
 8002ae4:	08002ae9 	.word	0x08002ae9

08002ae8 <UART_DMAAbortOnError>:
{
 8002ae8:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8002aea:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8002aec:	2300      	movs	r3, #0
 8002aee:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8002af2:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 8002af6:	f7ff ff2e 	bl	8002956 <HAL_UART_ErrorCallback>
 8002afa:	bd08      	pop	{r3, pc}

08002afc <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002afc:	b538      	push	{r3, r4, r5, lr}
 8002afe:	4604      	mov	r4, r0
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b00:	6883      	ldr	r3, [r0, #8]
 8002b02:	6902      	ldr	r2, [r0, #16]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	6942      	ldr	r2, [r0, #20]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	69c2      	ldr	r2, [r0, #28]
 8002b0c:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002b0e:	6801      	ldr	r1, [r0, #0]
 8002b10:	6808      	ldr	r0, [r1, #0]
 8002b12:	4aa0      	ldr	r2, [pc, #640]	; (8002d94 <UART_SetConfig+0x298>)
 8002b14:	4002      	ands	r2, r0
 8002b16:	4313      	orrs	r3, r2
 8002b18:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b1a:	6822      	ldr	r2, [r4, #0]
 8002b1c:	6853      	ldr	r3, [r2, #4]
 8002b1e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b22:	68e1      	ldr	r1, [r4, #12]
 8002b24:	430b      	orrs	r3, r1
 8002b26:	6053      	str	r3, [r2, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002b28:	69a3      	ldr	r3, [r4, #24]
 8002b2a:	6a22      	ldr	r2, [r4, #32]
 8002b2c:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002b2e:	6821      	ldr	r1, [r4, #0]
 8002b30:	688a      	ldr	r2, [r1, #8]
 8002b32:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8002b36:	4313      	orrs	r3, r2
 8002b38:	608b      	str	r3, [r1, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b3a:	6825      	ldr	r5, [r4, #0]
 8002b3c:	4b96      	ldr	r3, [pc, #600]	; (8002d98 <UART_SetConfig+0x29c>)
 8002b3e:	429d      	cmp	r5, r3
 8002b40:	d02b      	beq.n	8002b9a <UART_SetConfig+0x9e>
 8002b42:	4b96      	ldr	r3, [pc, #600]	; (8002d9c <UART_SetConfig+0x2a0>)
 8002b44:	429d      	cmp	r5, r3
 8002b46:	d03c      	beq.n	8002bc2 <UART_SetConfig+0xc6>
 8002b48:	4b95      	ldr	r3, [pc, #596]	; (8002da0 <UART_SetConfig+0x2a4>)
 8002b4a:	429d      	cmp	r5, r3
 8002b4c:	d052      	beq.n	8002bf4 <UART_SetConfig+0xf8>
 8002b4e:	4b95      	ldr	r3, [pc, #596]	; (8002da4 <UART_SetConfig+0x2a8>)
 8002b50:	429d      	cmp	r5, r3
 8002b52:	d067      	beq.n	8002c24 <UART_SetConfig+0x128>
 8002b54:	4b94      	ldr	r3, [pc, #592]	; (8002da8 <UART_SetConfig+0x2ac>)
 8002b56:	429d      	cmp	r5, r3
 8002b58:	d07c      	beq.n	8002c54 <UART_SetConfig+0x158>
 8002b5a:	4b94      	ldr	r3, [pc, #592]	; (8002dac <UART_SetConfig+0x2b0>)
 8002b5c:	429d      	cmp	r5, r3
 8002b5e:	f000 8094 	beq.w	8002c8a <UART_SetConfig+0x18e>
 8002b62:	4b93      	ldr	r3, [pc, #588]	; (8002db0 <UART_SetConfig+0x2b4>)
 8002b64:	429d      	cmp	r5, r3
 8002b66:	f000 80ab 	beq.w	8002cc0 <UART_SetConfig+0x1c4>
 8002b6a:	4b92      	ldr	r3, [pc, #584]	; (8002db4 <UART_SetConfig+0x2b8>)
 8002b6c:	429d      	cmp	r5, r3
 8002b6e:	f000 80c2 	beq.w	8002cf6 <UART_SetConfig+0x1fa>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002b72:	2310      	movs	r3, #16

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b74:	69e2      	ldr	r2, [r4, #28]
 8002b76:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002b7a:	f000 80db 	beq.w	8002d34 <UART_SetConfig+0x238>
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
  }
  else
  {
    switch (clocksource)
 8002b7e:	2b08      	cmp	r3, #8
 8002b80:	f200 8168 	bhi.w	8002e54 <UART_SetConfig+0x358>
 8002b84:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002b88:	013c0131 	.word	0x013c0131
 8002b8c:	01660147 	.word	0x01660147
 8002b90:	01660151 	.word	0x01660151
 8002b94:	01660166 	.word	0x01660166
 8002b98:	015c      	.short	0x015c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b9a:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8002b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ba2:	f003 0303 	and.w	r3, r3, #3
 8002ba6:	2b03      	cmp	r3, #3
 8002ba8:	d803      	bhi.n	8002bb2 <UART_SetConfig+0xb6>
 8002baa:	e8df f003 	tbb	[pc, r3]
 8002bae:	06bf      	.short	0x06bf
 8002bb0:	0804      	.short	0x0804
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002bb2:	2310      	movs	r3, #16
 8002bb4:	e7de      	b.n	8002b74 <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	e7dc      	b.n	8002b74 <UART_SetConfig+0x78>
 8002bba:	2304      	movs	r3, #4
 8002bbc:	e7da      	b.n	8002b74 <UART_SetConfig+0x78>
 8002bbe:	2308      	movs	r3, #8
 8002bc0:	e7d8      	b.n	8002b74 <UART_SetConfig+0x78>
 8002bc2:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bca:	f003 030c 	and.w	r3, r3, #12
 8002bce:	2b0c      	cmp	r3, #12
 8002bd0:	d808      	bhi.n	8002be4 <UART_SetConfig+0xe8>
 8002bd2:	e8df f003 	tbb	[pc, r3]
 8002bd6:	07ad      	.short	0x07ad
 8002bd8:	070b0707 	.word	0x070b0707
 8002bdc:	07090707 	.word	0x07090707
 8002be0:	0707      	.short	0x0707
 8002be2:	0d          	.byte	0x0d
 8002be3:	00          	.byte	0x00
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002be4:	2310      	movs	r3, #16
 8002be6:	e7c5      	b.n	8002b74 <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002be8:	2302      	movs	r3, #2
 8002bea:	e7c3      	b.n	8002b74 <UART_SetConfig+0x78>
 8002bec:	2304      	movs	r3, #4
 8002bee:	e7c1      	b.n	8002b74 <UART_SetConfig+0x78>
 8002bf0:	2308      	movs	r3, #8
 8002bf2:	e7bf      	b.n	8002b74 <UART_SetConfig+0x78>
 8002bf4:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 8002bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bfc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002c00:	2b10      	cmp	r3, #16
 8002c02:	d00d      	beq.n	8002c20 <UART_SetConfig+0x124>
 8002c04:	d905      	bls.n	8002c12 <UART_SetConfig+0x116>
 8002c06:	2b20      	cmp	r3, #32
 8002c08:	d008      	beq.n	8002c1c <UART_SetConfig+0x120>
 8002c0a:	2b30      	cmp	r3, #48	; 0x30
 8002c0c:	d104      	bne.n	8002c18 <UART_SetConfig+0x11c>
 8002c0e:	2308      	movs	r3, #8
 8002c10:	e7b0      	b.n	8002b74 <UART_SetConfig+0x78>
 8002c12:	b90b      	cbnz	r3, 8002c18 <UART_SetConfig+0x11c>
 8002c14:	2300      	movs	r3, #0
 8002c16:	e7ad      	b.n	8002b74 <UART_SetConfig+0x78>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002c18:	2310      	movs	r3, #16
 8002c1a:	e7ab      	b.n	8002b74 <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	e7a9      	b.n	8002b74 <UART_SetConfig+0x78>
 8002c20:	2304      	movs	r3, #4
 8002c22:	e7a7      	b.n	8002b74 <UART_SetConfig+0x78>
 8002c24:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8002c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c2c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002c30:	2b40      	cmp	r3, #64	; 0x40
 8002c32:	d00d      	beq.n	8002c50 <UART_SetConfig+0x154>
 8002c34:	d905      	bls.n	8002c42 <UART_SetConfig+0x146>
 8002c36:	2b80      	cmp	r3, #128	; 0x80
 8002c38:	d008      	beq.n	8002c4c <UART_SetConfig+0x150>
 8002c3a:	2bc0      	cmp	r3, #192	; 0xc0
 8002c3c:	d104      	bne.n	8002c48 <UART_SetConfig+0x14c>
 8002c3e:	2308      	movs	r3, #8
 8002c40:	e798      	b.n	8002b74 <UART_SetConfig+0x78>
 8002c42:	b90b      	cbnz	r3, 8002c48 <UART_SetConfig+0x14c>
 8002c44:	2300      	movs	r3, #0
 8002c46:	e795      	b.n	8002b74 <UART_SetConfig+0x78>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002c48:	2310      	movs	r3, #16
 8002c4a:	e793      	b.n	8002b74 <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	e791      	b.n	8002b74 <UART_SetConfig+0x78>
 8002c50:	2304      	movs	r3, #4
 8002c52:	e78f      	b.n	8002b74 <UART_SetConfig+0x78>
 8002c54:	f503 33f4 	add.w	r3, r3, #124928	; 0x1e800
 8002c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c64:	d00f      	beq.n	8002c86 <UART_SetConfig+0x18a>
 8002c66:	d907      	bls.n	8002c78 <UART_SetConfig+0x17c>
 8002c68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c6c:	d009      	beq.n	8002c82 <UART_SetConfig+0x186>
 8002c6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c72:	d104      	bne.n	8002c7e <UART_SetConfig+0x182>
 8002c74:	2308      	movs	r3, #8
 8002c76:	e77d      	b.n	8002b74 <UART_SetConfig+0x78>
 8002c78:	b90b      	cbnz	r3, 8002c7e <UART_SetConfig+0x182>
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	e77a      	b.n	8002b74 <UART_SetConfig+0x78>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002c7e:	2310      	movs	r3, #16
 8002c80:	e778      	b.n	8002b74 <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c82:	2302      	movs	r3, #2
 8002c84:	e776      	b.n	8002b74 <UART_SetConfig+0x78>
 8002c86:	2304      	movs	r3, #4
 8002c88:	e774      	b.n	8002b74 <UART_SetConfig+0x78>
 8002c8a:	f503 3392 	add.w	r3, r3, #74752	; 0x12400
 8002c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c92:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002c96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c9a:	d00f      	beq.n	8002cbc <UART_SetConfig+0x1c0>
 8002c9c:	d907      	bls.n	8002cae <UART_SetConfig+0x1b2>
 8002c9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ca2:	d009      	beq.n	8002cb8 <UART_SetConfig+0x1bc>
 8002ca4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ca8:	d104      	bne.n	8002cb4 <UART_SetConfig+0x1b8>
 8002caa:	2308      	movs	r3, #8
 8002cac:	e762      	b.n	8002b74 <UART_SetConfig+0x78>
 8002cae:	b90b      	cbnz	r3, 8002cb4 <UART_SetConfig+0x1b8>
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e75f      	b.n	8002b74 <UART_SetConfig+0x78>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002cb4:	2310      	movs	r3, #16
 8002cb6:	e75d      	b.n	8002b74 <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002cb8:	2302      	movs	r3, #2
 8002cba:	e75b      	b.n	8002b74 <UART_SetConfig+0x78>
 8002cbc:	2304      	movs	r3, #4
 8002cbe:	e759      	b.n	8002b74 <UART_SetConfig+0x78>
 8002cc0:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 8002cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002ccc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cd0:	d00f      	beq.n	8002cf2 <UART_SetConfig+0x1f6>
 8002cd2:	d907      	bls.n	8002ce4 <UART_SetConfig+0x1e8>
 8002cd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cd8:	d009      	beq.n	8002cee <UART_SetConfig+0x1f2>
 8002cda:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002cde:	d104      	bne.n	8002cea <UART_SetConfig+0x1ee>
 8002ce0:	2308      	movs	r3, #8
 8002ce2:	e747      	b.n	8002b74 <UART_SetConfig+0x78>
 8002ce4:	b90b      	cbnz	r3, 8002cea <UART_SetConfig+0x1ee>
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	e744      	b.n	8002b74 <UART_SetConfig+0x78>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002cea:	2310      	movs	r3, #16
 8002cec:	e742      	b.n	8002b74 <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002cee:	2302      	movs	r3, #2
 8002cf0:	e740      	b.n	8002b74 <UART_SetConfig+0x78>
 8002cf2:	2304      	movs	r3, #4
 8002cf4:	e73e      	b.n	8002b74 <UART_SetConfig+0x78>
 8002cf6:	f503 33de 	add.w	r3, r3, #113664	; 0x1bc00
 8002cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cfe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002d02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d06:	d00f      	beq.n	8002d28 <UART_SetConfig+0x22c>
 8002d08:	d907      	bls.n	8002d1a <UART_SetConfig+0x21e>
 8002d0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d0e:	d009      	beq.n	8002d24 <UART_SetConfig+0x228>
 8002d10:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002d14:	d104      	bne.n	8002d20 <UART_SetConfig+0x224>
 8002d16:	2308      	movs	r3, #8
 8002d18:	e72c      	b.n	8002b74 <UART_SetConfig+0x78>
 8002d1a:	b90b      	cbnz	r3, 8002d20 <UART_SetConfig+0x224>
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	e729      	b.n	8002b74 <UART_SetConfig+0x78>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002d20:	2310      	movs	r3, #16
 8002d22:	e727      	b.n	8002b74 <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d24:	2302      	movs	r3, #2
 8002d26:	e725      	b.n	8002b74 <UART_SetConfig+0x78>
 8002d28:	2304      	movs	r3, #4
 8002d2a:	e723      	b.n	8002b74 <UART_SetConfig+0x78>
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e721      	b.n	8002b74 <UART_SetConfig+0x78>
 8002d30:	2300      	movs	r3, #0
 8002d32:	e71f      	b.n	8002b74 <UART_SetConfig+0x78>
    switch (clocksource)
 8002d34:	2b08      	cmp	r3, #8
 8002d36:	d855      	bhi.n	8002de4 <UART_SetConfig+0x2e8>
 8002d38:	e8df f003 	tbb	[pc, r3]
 8002d3c:	54221705 	.word	0x54221705
 8002d40:	54545440 	.word	0x54545440
 8002d44:	4b          	.byte	0x4b
 8002d45:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002d46:	f7fe fe9b 	bl	8001a80 <HAL_RCC_GetPCLK1Freq>
 8002d4a:	6862      	ldr	r2, [r4, #4]
 8002d4c:	0853      	lsrs	r3, r2, #1
 8002d4e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8002d52:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d56:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d58:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 8002d5a:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d5e:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8002d62:	4313      	orrs	r3, r2
    huart->Instance->BRR = brrtemp;
 8002d64:	6822      	ldr	r2, [r4, #0]
 8002d66:	60d3      	str	r3, [r2, #12]
 8002d68:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002d6a:	f7fe fe99 	bl	8001aa0 <HAL_RCC_GetPCLK2Freq>
 8002d6e:	6862      	ldr	r2, [r4, #4]
 8002d70:	0853      	lsrs	r3, r2, #1
 8002d72:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8002d76:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d7a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d7c:	2000      	movs	r0, #0
      break;
 8002d7e:	e7ec      	b.n	8002d5a <UART_SetConfig+0x25e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002d80:	6862      	ldr	r2, [r4, #4]
 8002d82:	4b0d      	ldr	r3, [pc, #52]	; (8002db8 <UART_SetConfig+0x2bc>)
 8002d84:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8002d88:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d8c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d8e:	2000      	movs	r0, #0
      break;
 8002d90:	e7e3      	b.n	8002d5a <UART_SetConfig+0x25e>
 8002d92:	bf00      	nop
 8002d94:	efff69f3 	.word	0xefff69f3
 8002d98:	40011000 	.word	0x40011000
 8002d9c:	40004400 	.word	0x40004400
 8002da0:	40004800 	.word	0x40004800
 8002da4:	40004c00 	.word	0x40004c00
 8002da8:	40005000 	.word	0x40005000
 8002dac:	40011400 	.word	0x40011400
 8002db0:	40007800 	.word	0x40007800
 8002db4:	40007c00 	.word	0x40007c00
 8002db8:	01e84800 	.word	0x01e84800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002dbc:	f7fe fd56 	bl	800186c <HAL_RCC_GetSysClockFreq>
 8002dc0:	6862      	ldr	r2, [r4, #4]
 8002dc2:	0853      	lsrs	r3, r2, #1
 8002dc4:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8002dc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8002dcc:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002dce:	2000      	movs	r0, #0
      break;
 8002dd0:	e7c3      	b.n	8002d5a <UART_SetConfig+0x25e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002dd2:	6862      	ldr	r2, [r4, #4]
 8002dd4:	0853      	lsrs	r3, r2, #1
 8002dd6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002dda:	fbb3 f3f2 	udiv	r3, r3, r2
 8002dde:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002de0:	2000      	movs	r0, #0
      break;
 8002de2:	e7ba      	b.n	8002d5a <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 8002de4:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8002de6:	2300      	movs	r3, #0
 8002de8:	e7b7      	b.n	8002d5a <UART_SetConfig+0x25e>
    {
    case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002dea:	f7fe fe49 	bl	8001a80 <HAL_RCC_GetPCLK1Freq>
 8002dee:	6863      	ldr	r3, [r4, #4]
 8002df0:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002df4:	fbb0 f0f3 	udiv	r0, r0, r3
 8002df8:	b280      	uxth	r0, r0
 8002dfa:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002dfc:	2000      	movs	r0, #0
      break;
 8002dfe:	bd38      	pop	{r3, r4, r5, pc}
    case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002e00:	f7fe fe4e 	bl	8001aa0 <HAL_RCC_GetPCLK2Freq>
 8002e04:	6863      	ldr	r3, [r4, #4]
 8002e06:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002e0a:	fbb0 f0f3 	udiv	r0, r0, r3
 8002e0e:	b280      	uxth	r0, r0
 8002e10:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e12:	2000      	movs	r0, #0
      break;
 8002e14:	bd38      	pop	{r3, r4, r5, pc}
    case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002e16:	6862      	ldr	r2, [r4, #4]
 8002e18:	4b0f      	ldr	r3, [pc, #60]	; (8002e58 <UART_SetConfig+0x35c>)
 8002e1a:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8002e1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e26:	2000      	movs	r0, #0
      break;
 8002e28:	bd38      	pop	{r3, r4, r5, pc}
    case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002e2a:	f7fe fd1f 	bl	800186c <HAL_RCC_GetSysClockFreq>
 8002e2e:	6863      	ldr	r3, [r4, #4]
 8002e30:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002e34:	fbb0 f0f3 	udiv	r0, r0, r3
 8002e38:	b280      	uxth	r0, r0
 8002e3a:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e3c:	2000      	movs	r0, #0
      break;
 8002e3e:	bd38      	pop	{r3, r4, r5, pc}
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002e40:	6862      	ldr	r2, [r4, #4]
 8002e42:	0853      	lsrs	r3, r2, #1
 8002e44:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002e48:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e50:	2000      	movs	r0, #0
      break;
 8002e52:	bd38      	pop	{r3, r4, r5, pc}
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8002e54:	2001      	movs	r0, #1
    }
  }

  return ret;

}
 8002e56:	bd38      	pop	{r3, r4, r5, pc}
 8002e58:	00f42400 	.word	0x00f42400

08002e5c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e5c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002e5e:	f013 0f01 	tst.w	r3, #1
 8002e62:	d006      	beq.n	8002e72 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e64:	6802      	ldr	r2, [r0, #0]
 8002e66:	6853      	ldr	r3, [r2, #4]
 8002e68:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002e6c:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8002e6e:	430b      	orrs	r3, r1
 8002e70:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e72:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002e74:	f013 0f02 	tst.w	r3, #2
 8002e78:	d006      	beq.n	8002e88 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e7a:	6802      	ldr	r2, [r0, #0]
 8002e7c:	6853      	ldr	r3, [r2, #4]
 8002e7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e82:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8002e84:	430b      	orrs	r3, r1
 8002e86:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e88:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002e8a:	f013 0f04 	tst.w	r3, #4
 8002e8e:	d006      	beq.n	8002e9e <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e90:	6802      	ldr	r2, [r0, #0]
 8002e92:	6853      	ldr	r3, [r2, #4]
 8002e94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e98:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8002e9a:	430b      	orrs	r3, r1
 8002e9c:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e9e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002ea0:	f013 0f08 	tst.w	r3, #8
 8002ea4:	d006      	beq.n	8002eb4 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ea6:	6802      	ldr	r2, [r0, #0]
 8002ea8:	6853      	ldr	r3, [r2, #4]
 8002eaa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002eae:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8002eb0:	430b      	orrs	r3, r1
 8002eb2:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002eb4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002eb6:	f013 0f10 	tst.w	r3, #16
 8002eba:	d006      	beq.n	8002eca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ebc:	6802      	ldr	r2, [r0, #0]
 8002ebe:	6893      	ldr	r3, [r2, #8]
 8002ec0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ec4:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8002ec6:	430b      	orrs	r3, r1
 8002ec8:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002eca:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002ecc:	f013 0f20 	tst.w	r3, #32
 8002ed0:	d006      	beq.n	8002ee0 <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002ed2:	6802      	ldr	r2, [r0, #0]
 8002ed4:	6893      	ldr	r3, [r2, #8]
 8002ed6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002eda:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002edc:	430b      	orrs	r3, r1
 8002ede:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002ee0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002ee2:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002ee6:	d00a      	beq.n	8002efe <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ee8:	6802      	ldr	r2, [r0, #0]
 8002eea:	6853      	ldr	r3, [r2, #4]
 8002eec:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002ef0:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002ef2:	430b      	orrs	r3, r1
 8002ef4:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002ef6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002ef8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002efc:	d00b      	beq.n	8002f16 <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002efe:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002f00:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002f04:	d006      	beq.n	8002f14 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f06:	6802      	ldr	r2, [r0, #0]
 8002f08:	6853      	ldr	r3, [r2, #4]
 8002f0a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002f0e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002f10:	430b      	orrs	r3, r1
 8002f12:	6053      	str	r3, [r2, #4]
 8002f14:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f16:	6802      	ldr	r2, [r0, #0]
 8002f18:	6853      	ldr	r3, [r2, #4]
 8002f1a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002f1e:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8002f20:	430b      	orrs	r3, r1
 8002f22:	6053      	str	r3, [r2, #4]
 8002f24:	e7eb      	b.n	8002efe <UART_AdvFeatureConfig+0xa2>

08002f26 <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f26:	b510      	push	{r4, lr}
 8002f28:	b082      	sub	sp, #8
 8002f2a:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002f30:	f7fd fb3c 	bl	80005ac <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f34:	6822      	ldr	r2, [r4, #0]
 8002f36:	6812      	ldr	r2, [r2, #0]
 8002f38:	f012 0f08 	tst.w	r2, #8
 8002f3c:	d109      	bne.n	8002f52 <UART_CheckIdleState+0x2c>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 8002f3e:	2320      	movs	r3, #32
 8002f40:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  huart->RxState= HAL_UART_STATE_READY;
 8002f44:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002f48:	2000      	movs	r0, #0
 8002f4a:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68

  return HAL_OK;
}
 8002f4e:	b002      	add	sp, #8
 8002f50:	bd10      	pop	{r4, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f52:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002f56:	9300      	str	r3, [sp, #0]
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002f60:	4620      	mov	r0, r4
 8002f62:	f7ff fc57 	bl	8002814 <UART_WaitOnFlagUntilTimeout>
 8002f66:	2800      	cmp	r0, #0
 8002f68:	d0e9      	beq.n	8002f3e <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8002f6a:	2003      	movs	r0, #3
 8002f6c:	e7ef      	b.n	8002f4e <UART_CheckIdleState+0x28>

08002f6e <HAL_UART_Init>:
  if(huart == NULL)
 8002f6e:	b378      	cbz	r0, 8002fd0 <HAL_UART_Init+0x62>
{
 8002f70:	b510      	push	{r4, lr}
 8002f72:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 8002f74:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002f78:	b30b      	cbz	r3, 8002fbe <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8002f7a:	2324      	movs	r3, #36	; 0x24
 8002f7c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8002f80:	6822      	ldr	r2, [r4, #0]
 8002f82:	6813      	ldr	r3, [r2, #0]
 8002f84:	f023 0301 	bic.w	r3, r3, #1
 8002f88:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f8a:	4620      	mov	r0, r4
 8002f8c:	f7ff fdb6 	bl	8002afc <UART_SetConfig>
 8002f90:	2801      	cmp	r0, #1
 8002f92:	d01f      	beq.n	8002fd4 <HAL_UART_Init+0x66>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002f96:	b9bb      	cbnz	r3, 8002fc8 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f98:	6822      	ldr	r2, [r4, #0]
 8002f9a:	6853      	ldr	r3, [r2, #4]
 8002f9c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002fa0:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fa2:	6822      	ldr	r2, [r4, #0]
 8002fa4:	6893      	ldr	r3, [r2, #8]
 8002fa6:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002faa:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8002fac:	6822      	ldr	r2, [r4, #0]
 8002fae:	6813      	ldr	r3, [r2, #0]
 8002fb0:	f043 0301 	orr.w	r3, r3, #1
 8002fb4:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8002fb6:	4620      	mov	r0, r4
 8002fb8:	f7ff ffb5 	bl	8002f26 <UART_CheckIdleState>
 8002fbc:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002fbe:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8002fc2:	f000 fac1 	bl	8003548 <HAL_UART_MspInit>
 8002fc6:	e7d8      	b.n	8002f7a <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8002fc8:	4620      	mov	r0, r4
 8002fca:	f7ff ff47 	bl	8002e5c <UART_AdvFeatureConfig>
 8002fce:	e7e3      	b.n	8002f98 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8002fd0:	2001      	movs	r0, #1
 8002fd2:	4770      	bx	lr
}
 8002fd4:	bd10      	pop	{r4, pc}
	...

08002fd8 <MX_GPIO_Init>:
	  HAL_TIM_PWM_Start(htim, channel);
}
/** Pinout Configuration
*/
static void MX_GPIO_Init(void)
{
 8002fd8:	b084      	sub	sp, #16

  /* GPIO Ports Clock Enable */
 __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fda:	4b13      	ldr	r3, [pc, #76]	; (8003028 <MX_GPIO_Init+0x50>)
 8002fdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fde:	f042 0201 	orr.w	r2, r2, #1
 8002fe2:	631a      	str	r2, [r3, #48]	; 0x30
 8002fe4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fe6:	f002 0201 	and.w	r2, r2, #1
 8002fea:	9200      	str	r2, [sp, #0]
 8002fec:	9a00      	ldr	r2, [sp, #0]
 __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ff0:	f042 0208 	orr.w	r2, r2, #8
 8002ff4:	631a      	str	r2, [r3, #48]	; 0x30
 8002ff6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ff8:	f002 0208 	and.w	r2, r2, #8
 8002ffc:	9201      	str	r2, [sp, #4]
 8002ffe:	9a01      	ldr	r2, [sp, #4]
 __HAL_RCC_GPIOC_CLK_ENABLE();
 8003000:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003002:	f042 0204 	orr.w	r2, r2, #4
 8003006:	631a      	str	r2, [r3, #48]	; 0x30
 8003008:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800300a:	f002 0204 	and.w	r2, r2, #4
 800300e:	9202      	str	r2, [sp, #8]
 8003010:	9a02      	ldr	r2, [sp, #8]
 __HAL_RCC_GPIOE_CLK_ENABLE();
 8003012:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003014:	f042 0210 	orr.w	r2, r2, #16
 8003018:	631a      	str	r2, [r3, #48]	; 0x30
 800301a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301c:	f003 0310 	and.w	r3, r3, #16
 8003020:	9303      	str	r3, [sp, #12]
 8003022:	9b03      	ldr	r3, [sp, #12]

}
 8003024:	b004      	add	sp, #16
 8003026:	4770      	bx	lr
 8003028:	40023800 	.word	0x40023800

0800302c <MX_DMA_Init>:
{
 800302c:	b500      	push	{lr}
 800302e:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003030:	4b0e      	ldr	r3, [pc, #56]	; (800306c <MX_DMA_Init+0x40>)
 8003032:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003034:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8003038:	631a      	str	r2, [r3, #48]	; 0x30
 800303a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003040:	9301      	str	r3, [sp, #4]
 8003042:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8003044:	2200      	movs	r2, #0
 8003046:	4611      	mov	r1, r2
 8003048:	200d      	movs	r0, #13
 800304a:	f7fd febd 	bl	8000dc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800304e:	200d      	movs	r0, #13
 8003050:	f7fd feea 	bl	8000e28 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8003054:	2200      	movs	r2, #0
 8003056:	4611      	mov	r1, r2
 8003058:	200f      	movs	r0, #15
 800305a:	f7fd feb5 	bl	8000dc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800305e:	200f      	movs	r0, #15
 8003060:	f7fd fee2 	bl	8000e28 <HAL_NVIC_EnableIRQ>
}
 8003064:	b003      	add	sp, #12
 8003066:	f85d fb04 	ldr.w	pc, [sp], #4
 800306a:	bf00      	nop
 800306c:	40023800 	.word	0x40023800

08003070 <ADC_read_adc_val_poll>:
uint32_t ADC_read_adc_val_poll(ADC_HandleTypeDef* hadc) {
 8003070:	b530      	push	{r4, r5, lr}
 8003072:	b085      	sub	sp, #20
 8003074:	4604      	mov	r4, r0
    sConfig.Channel = ADC_CHANNEL_3;
 8003076:	2303      	movs	r3, #3
 8003078:	9300      	str	r3, [sp, #0]
    sConfig.Rank = 1;
 800307a:	2301      	movs	r3, #1
 800307c:	9301      	str	r3, [sp, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800307e:	2307      	movs	r3, #7
 8003080:	9302      	str	r3, [sp, #8]
    sConfig.Offset = 0;
 8003082:	2300      	movs	r3, #0
 8003084:	9303      	str	r3, [sp, #12]
    HAL_ADC_ConfigChannel(hadc, &sConfig);
 8003086:	4669      	mov	r1, sp
 8003088:	f7fd fdb4 	bl	8000bf4 <HAL_ADC_ConfigChannel>
    HAL_ADC_Start(hadc);
 800308c:	4620      	mov	r0, r4
 800308e:	f7fd fb69 	bl	8000764 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(hadc, 1000);
 8003092:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003096:	4620      	mov	r0, r4
 8003098:	f7fd fc00 	bl	800089c <HAL_ADC_PollForConversion>
    uint32_t result = HAL_ADC_GetValue(hadc);
 800309c:	4620      	mov	r0, r4
 800309e:	f7fd fd03 	bl	8000aa8 <HAL_ADC_GetValue>
 80030a2:	4605      	mov	r5, r0
    HAL_ADC_Stop(hadc);
 80030a4:	4620      	mov	r0, r4
 80030a6:	f7fd fbd9 	bl	800085c <HAL_ADC_Stop>
}
 80030aa:	4628      	mov	r0, r5
 80030ac:	b005      	add	sp, #20
 80030ae:	bd30      	pop	{r4, r5, pc}

080030b0 <ADC_start_adc_conversion_IT>:
void ADC_start_adc_conversion_IT(ADC_HandleTypeDef* hadc) {
 80030b0:	b510      	push	{r4, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	4604      	mov	r4, r0
    sConfig.Channel = ADC_CHANNEL_3;
 80030b6:	2303      	movs	r3, #3
 80030b8:	9300      	str	r3, [sp, #0]
    sConfig.Rank = 1;
 80030ba:	2301      	movs	r3, #1
 80030bc:	9301      	str	r3, [sp, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80030be:	2307      	movs	r3, #7
 80030c0:	9302      	str	r3, [sp, #8]
    sConfig.Offset = 0;
 80030c2:	2300      	movs	r3, #0
 80030c4:	9303      	str	r3, [sp, #12]
    HAL_ADC_ConfigChannel(hadc, &sConfig);
 80030c6:	4669      	mov	r1, sp
 80030c8:	f7fd fd94 	bl	8000bf4 <HAL_ADC_ConfigChannel>
    HAL_ADC_Start_IT(hadc);
 80030cc:	4620      	mov	r0, r4
 80030ce:	f7fd fc41 	bl	8000954 <HAL_ADC_Start_IT>
}
 80030d2:	b004      	add	sp, #16
 80030d4:	bd10      	pop	{r4, pc}
	...

080030d8 <HAL_UART_TxCpltCallback>:
  HAL_TIM_MspPostInit(&htim4);

}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart)
{
 80030d8:	b508      	push	{r3, lr}
	if(huart == &huart4) {
 80030da:	4b03      	ldr	r3, [pc, #12]	; (80030e8 <HAL_UART_TxCpltCallback+0x10>)
 80030dc:	4283      	cmp	r3, r0
 80030de:	d000      	beq.n	80030e2 <HAL_UART_TxCpltCallback+0xa>
 80030e0:	bd08      	pop	{r3, pc}
		uart_debug_callback();
 80030e2:	f000 fbb1 	bl	8003848 <uart_debug_callback>
	}
}
 80030e6:	e7fb      	b.n	80030e0 <HAL_UART_TxCpltCallback+0x8>
 80030e8:	20000130 	.word	0x20000130

080030ec <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
	if(hadc ==&hadc1)
 80030ec:	4b06      	ldr	r3, [pc, #24]	; (8003108 <HAL_ADC_ConvCpltCallback+0x1c>)
 80030ee:	4298      	cmp	r0, r3
 80030f0:	d000      	beq.n	80030f4 <HAL_ADC_ConvCpltCallback+0x8>
 80030f2:	4770      	bx	lr
{
 80030f4:	b510      	push	{r4, lr}
 80030f6:	4604      	mov	r4, r0
	{
		// saving this value to the global adc_result variable
		// only for test purposes
		adc_result = HAL_ADC_GetValue(hadc);
 80030f8:	f7fd fcd6 	bl	8000aa8 <HAL_ADC_GetValue>
 80030fc:	4b03      	ldr	r3, [pc, #12]	; (800310c <HAL_ADC_ConvCpltCallback+0x20>)
 80030fe:	6018      	str	r0, [r3, #0]
        // stops the ADC because we are not operating in continuous conversion mode
		HAL_ADC_Stop_IT(hadc);
 8003100:	4620      	mov	r0, r4
 8003102:	f7fd fcab 	bl	8000a5c <HAL_ADC_Stop_IT>
 8003106:	bd10      	pop	{r4, pc}
 8003108:	200000e8 	.word	0x200000e8
 800310c:	20000030 	.word	0x20000030

08003110 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8003110:	e7fe      	b.n	8003110 <_Error_Handler>
	...

08003114 <MX_ADC1_Init>:
{
 8003114:	b500      	push	{lr}
 8003116:	b085      	sub	sp, #20
  hadc1.Instance = ADC1;
 8003118:	4819      	ldr	r0, [pc, #100]	; (8003180 <MX_ADC1_Init+0x6c>)
 800311a:	4b1a      	ldr	r3, [pc, #104]	; (8003184 <MX_ADC1_Init+0x70>)
 800311c:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800311e:	2300      	movs	r3, #0
 8003120:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003122:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8003124:	6103      	str	r3, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003126:	6183      	str	r3, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003128:	6203      	str	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800312a:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800312c:	4a16      	ldr	r2, [pc, #88]	; (8003188 <MX_ADC1_Init+0x74>)
 800312e:	6282      	str	r2, [r0, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003130:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003132:	2201      	movs	r2, #1
 8003134:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003136:	6303      	str	r3, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003138:	6142      	str	r2, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800313a:	f7fd fae9 	bl	8000710 <HAL_ADC_Init>
 800313e:	b9a8      	cbnz	r0, 800316c <MX_ADC1_Init+0x58>
  sConfig.Channel = ADC_CHANNEL_3;
 8003140:	2303      	movs	r3, #3
 8003142:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003144:	2301      	movs	r3, #1
 8003146:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003148:	2300      	movs	r3, #0
 800314a:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800314c:	4669      	mov	r1, sp
 800314e:	480c      	ldr	r0, [pc, #48]	; (8003180 <MX_ADC1_Init+0x6c>)
 8003150:	f7fd fd50 	bl	8000bf4 <HAL_ADC_ConfigChannel>
 8003154:	b978      	cbnz	r0, 8003176 <MX_ADC1_Init+0x62>
  HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003156:	2200      	movs	r2, #0
 8003158:	4611      	mov	r1, r2
 800315a:	2012      	movs	r0, #18
 800315c:	f7fd fe34 	bl	8000dc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003160:	2012      	movs	r0, #18
 8003162:	f7fd fe61 	bl	8000e28 <HAL_NVIC_EnableIRQ>
}
 8003166:	b005      	add	sp, #20
 8003168:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 800316c:	f240 110b 	movw	r1, #267	; 0x10b
 8003170:	4806      	ldr	r0, [pc, #24]	; (800318c <MX_ADC1_Init+0x78>)
 8003172:	f7ff ffcd 	bl	8003110 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8003176:	f240 1115 	movw	r1, #277	; 0x115
 800317a:	4804      	ldr	r0, [pc, #16]	; (800318c <MX_ADC1_Init+0x78>)
 800317c:	f7ff ffc8 	bl	8003110 <_Error_Handler>
 8003180:	200000e8 	.word	0x200000e8
 8003184:	40012000 	.word	0x40012000
 8003188:	0f000001 	.word	0x0f000001
 800318c:	08003974 	.word	0x08003974

08003190 <MX_TIM4_Init>:
{
 8003190:	b500      	push	{lr}
 8003192:	b08f      	sub	sp, #60	; 0x3c
  htim4.Instance = TIM4;
 8003194:	4827      	ldr	r0, [pc, #156]	; (8003234 <MX_TIM4_Init+0xa4>)
 8003196:	4b28      	ldr	r3, [pc, #160]	; (8003238 <MX_TIM4_Init+0xa8>)
 8003198:	6003      	str	r3, [r0, #0]
  htim4.Init.Prescaler = 512;
 800319a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800319e:	6043      	str	r3, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031a0:	2300      	movs	r3, #0
 80031a2:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 4095;
 80031a4:	f640 72ff 	movw	r2, #4095	; 0xfff
 80031a8:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031aa:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031ac:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80031ae:	f7fe ffcd 	bl	800214c <HAL_TIM_Base_Init>
 80031b2:	bb28      	cbnz	r0, 8003200 <MX_TIM4_Init+0x70>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80031b4:	a90e      	add	r1, sp, #56	; 0x38
 80031b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031ba:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80031be:	481d      	ldr	r0, [pc, #116]	; (8003234 <MX_TIM4_Init+0xa4>)
 80031c0:	f7ff f8c4 	bl	800234c <HAL_TIM_ConfigClockSource>
 80031c4:	bb08      	cbnz	r0, 800320a <MX_TIM4_Init+0x7a>
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80031c6:	481b      	ldr	r0, [pc, #108]	; (8003234 <MX_TIM4_Init+0xa4>)
 80031c8:	f7fe ffd9 	bl	800217e <HAL_TIM_PWM_Init>
 80031cc:	bb10      	cbnz	r0, 8003214 <MX_TIM4_Init+0x84>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031ce:	2300      	movs	r3, #0
 80031d0:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031d2:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80031d4:	a907      	add	r1, sp, #28
 80031d6:	4817      	ldr	r0, [pc, #92]	; (8003234 <MX_TIM4_Init+0xa4>)
 80031d8:	f7ff f9c2 	bl	8002560 <HAL_TIMEx_MasterConfigSynchronization>
 80031dc:	b9f8      	cbnz	r0, 800321e <MX_TIM4_Init+0x8e>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80031de:	2360      	movs	r3, #96	; 0x60
 80031e0:	9300      	str	r3, [sp, #0]
  sConfigOC.Pulse = 0;
 80031e2:	2200      	movs	r2, #0
 80031e4:	9201      	str	r2, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80031e6:	9202      	str	r2, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80031e8:	9204      	str	r2, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80031ea:	4669      	mov	r1, sp
 80031ec:	4811      	ldr	r0, [pc, #68]	; (8003234 <MX_TIM4_Init+0xa4>)
 80031ee:	f7ff f9e3 	bl	80025b8 <HAL_TIM_PWM_ConfigChannel>
 80031f2:	b9c8      	cbnz	r0, 8003228 <MX_TIM4_Init+0x98>
  HAL_TIM_MspPostInit(&htim4);
 80031f4:	480f      	ldr	r0, [pc, #60]	; (8003234 <MX_TIM4_Init+0xa4>)
 80031f6:	f000 f98b 	bl	8003510 <HAL_TIM_MspPostInit>
}
 80031fa:	b00f      	add	sp, #60	; 0x3c
 80031fc:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8003200:	f44f 71c1 	mov.w	r1, #386	; 0x182
 8003204:	480d      	ldr	r0, [pc, #52]	; (800323c <MX_TIM4_Init+0xac>)
 8003206:	f7ff ff83 	bl	8003110 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 800320a:	f44f 71c4 	mov.w	r1, #392	; 0x188
 800320e:	480b      	ldr	r0, [pc, #44]	; (800323c <MX_TIM4_Init+0xac>)
 8003210:	f7ff ff7e 	bl	8003110 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8003214:	f240 118d 	movw	r1, #397	; 0x18d
 8003218:	4808      	ldr	r0, [pc, #32]	; (800323c <MX_TIM4_Init+0xac>)
 800321a:	f7ff ff79 	bl	8003110 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 800321e:	f44f 71ca 	mov.w	r1, #404	; 0x194
 8003222:	4806      	ldr	r0, [pc, #24]	; (800323c <MX_TIM4_Init+0xac>)
 8003224:	f7ff ff74 	bl	8003110 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8003228:	f240 119d 	movw	r1, #413	; 0x19d
 800322c:	4803      	ldr	r0, [pc, #12]	; (800323c <MX_TIM4_Init+0xac>)
 800322e:	f7ff ff6f 	bl	8003110 <_Error_Handler>
 8003232:	bf00      	nop
 8003234:	200000a8 	.word	0x200000a8
 8003238:	40000800 	.word	0x40000800
 800323c:	08003974 	.word	0x08003974

08003240 <MX_UART4_Init>:
{
 8003240:	b508      	push	{r3, lr}
  huart4.Instance = UART4;
 8003242:	4810      	ldr	r0, [pc, #64]	; (8003284 <MX_UART4_Init+0x44>)
 8003244:	4b10      	ldr	r3, [pc, #64]	; (8003288 <MX_UART4_Init+0x48>)
 8003246:	6003      	str	r3, [r0, #0]
  huart4.Init.BaudRate = 115200;
 8003248:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800324c:	6043      	str	r3, [r0, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800324e:	2300      	movs	r3, #0
 8003250:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003252:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003254:	6103      	str	r3, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003256:	220c      	movs	r2, #12
 8003258:	6142      	str	r2, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800325a:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800325c:	61c3      	str	r3, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800325e:	6203      	str	r3, [r0, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003260:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003262:	f7ff fe84 	bl	8002f6e <HAL_UART_Init>
 8003266:	b940      	cbnz	r0, 800327a <MX_UART4_Init+0x3a>
  HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8003268:	2200      	movs	r2, #0
 800326a:	4611      	mov	r1, r2
 800326c:	2034      	movs	r0, #52	; 0x34
 800326e:	f7fd fdab 	bl	8000dc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003272:	2034      	movs	r0, #52	; 0x34
 8003274:	f7fd fdd8 	bl	8000e28 <HAL_NVIC_EnableIRQ>
 8003278:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 800327a:	21dc      	movs	r1, #220	; 0xdc
 800327c:	4803      	ldr	r0, [pc, #12]	; (800328c <MX_UART4_Init+0x4c>)
 800327e:	f7ff ff47 	bl	8003110 <_Error_Handler>
 8003282:	bf00      	nop
 8003284:	20000130 	.word	0x20000130
 8003288:	40004c00 	.word	0x40004c00
 800328c:	08003974 	.word	0x08003974

08003290 <SystemClock_Config>:
{
 8003290:	b500      	push	{lr}
 8003292:	b0b5      	sub	sp, #212	; 0xd4
  __HAL_RCC_PWR_CLK_ENABLE();
 8003294:	4b2a      	ldr	r3, [pc, #168]	; (8003340 <SystemClock_Config+0xb0>)
 8003296:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003298:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800329c:	641a      	str	r2, [r3, #64]	; 0x40
 800329e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032a4:	9301      	str	r3, [sp, #4]
 80032a6:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80032a8:	4a26      	ldr	r2, [pc, #152]	; (8003344 <SystemClock_Config+0xb4>)
 80032aa:	6813      	ldr	r3, [r2, #0]
 80032ac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80032b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032b4:	6013      	str	r3, [r2, #0]
 80032b6:	6813      	ldr	r3, [r2, #0]
 80032b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80032bc:	9302      	str	r3, [sp, #8]
 80032be:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80032c0:	2302      	movs	r3, #2
 80032c2:	9328      	str	r3, [sp, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80032c4:	2301      	movs	r3, #1
 80032c6:	932b      	str	r3, [sp, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80032c8:	2310      	movs	r3, #16
 80032ca:	932c      	str	r3, [sp, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80032cc:	2300      	movs	r3, #0
 80032ce:	932e      	str	r3, [sp, #184]	; 0xb8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80032d0:	a828      	add	r0, sp, #160	; 0xa0
 80032d2:	f7fe f8e1 	bl	8001498 <HAL_RCC_OscConfig>
 80032d6:	bb38      	cbnz	r0, 8003328 <SystemClock_Config+0x98>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80032d8:	230f      	movs	r3, #15
 80032da:	9323      	str	r3, [sp, #140]	; 0x8c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80032dc:	2100      	movs	r1, #0
 80032de:	9124      	str	r1, [sp, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80032e0:	9125      	str	r1, [sp, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80032e2:	9126      	str	r1, [sp, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80032e4:	9127      	str	r1, [sp, #156]	; 0x9c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80032e6:	a823      	add	r0, sp, #140	; 0x8c
 80032e8:	f7fe fb12 	bl	8001910 <HAL_RCC_ClockConfig>
 80032ec:	bb00      	cbnz	r0, 8003330 <SystemClock_Config+0xa0>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80032ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032f2:	9303      	str	r3, [sp, #12]
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80032f4:	2300      	movs	r3, #0
 80032f6:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80032f8:	a803      	add	r0, sp, #12
 80032fa:	f7fe fbe1 	bl	8001ac0 <HAL_RCCEx_PeriphCLKConfig>
 80032fe:	b9d8      	cbnz	r0, 8003338 <SystemClock_Config+0xa8>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8003300:	f7fe fbb8 	bl	8001a74 <HAL_RCC_GetHCLKFreq>
 8003304:	4b10      	ldr	r3, [pc, #64]	; (8003348 <SystemClock_Config+0xb8>)
 8003306:	fba3 3000 	umull	r3, r0, r3, r0
 800330a:	0980      	lsrs	r0, r0, #6
 800330c:	f7fd fd98 	bl	8000e40 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003310:	2004      	movs	r0, #4
 8003312:	f7fd fdab 	bl	8000e6c <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003316:	2200      	movs	r2, #0
 8003318:	4611      	mov	r1, r2
 800331a:	f04f 30ff 	mov.w	r0, #4294967295
 800331e:	f7fd fd53 	bl	8000dc8 <HAL_NVIC_SetPriority>
}
 8003322:	b035      	add	sp, #212	; 0xd4
 8003324:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8003328:	21a8      	movs	r1, #168	; 0xa8
 800332a:	4808      	ldr	r0, [pc, #32]	; (800334c <SystemClock_Config+0xbc>)
 800332c:	f7ff fef0 	bl	8003110 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8003330:	21b6      	movs	r1, #182	; 0xb6
 8003332:	4806      	ldr	r0, [pc, #24]	; (800334c <SystemClock_Config+0xbc>)
 8003334:	f7ff feec 	bl	8003110 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8003338:	21bd      	movs	r1, #189	; 0xbd
 800333a:	4804      	ldr	r0, [pc, #16]	; (800334c <SystemClock_Config+0xbc>)
 800333c:	f7ff fee8 	bl	8003110 <_Error_Handler>
 8003340:	40023800 	.word	0x40023800
 8003344:	40007000 	.word	0x40007000
 8003348:	10624dd3 	.word	0x10624dd3
 800334c:	08003974 	.word	0x08003974

08003350 <set_timer_duty_cycle>:
{
 8003350:	b530      	push	{r4, r5, lr}
 8003352:	b089      	sub	sp, #36	; 0x24
 8003354:	4604      	mov	r4, r0
 8003356:	4615      	mov	r5, r2
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003358:	2360      	movs	r3, #96	; 0x60
 800335a:	9301      	str	r3, [sp, #4]
	  sConfigOC.Pulse = pulse;
 800335c:	9102      	str	r1, [sp, #8]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800335e:	2302      	movs	r3, #2
 8003360:	9303      	str	r3, [sp, #12]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003362:	2300      	movs	r3, #0
 8003364:	9305      	str	r3, [sp, #20]
	  if (HAL_TIM_PWM_ConfigChannel(htim, &sConfigOC, channel) != HAL_OK)
 8003366:	a901      	add	r1, sp, #4
 8003368:	f7ff f926 	bl	80025b8 <HAL_TIM_PWM_ConfigChannel>
 800336c:	b928      	cbnz	r0, 800337a <set_timer_duty_cycle+0x2a>
	  HAL_TIM_PWM_Start(htim, channel);
 800336e:	4629      	mov	r1, r5
 8003370:	4620      	mov	r0, r4
 8003372:	f7ff f885 	bl	8002480 <HAL_TIM_PWM_Start>
}
 8003376:	b009      	add	sp, #36	; 0x24
 8003378:	bd30      	pop	{r4, r5, pc}
	    _Error_Handler(__FILE__, __LINE__);
 800337a:	f240 115f 	movw	r1, #351	; 0x15f
 800337e:	4801      	ldr	r0, [pc, #4]	; (8003384 <set_timer_duty_cycle+0x34>)
 8003380:	f7ff fec6 	bl	8003110 <_Error_Handler>
 8003384:	08003974 	.word	0x08003974

08003388 <main>:
{
 8003388:	b538      	push	{r3, r4, r5, lr}
  HAL_Init();
 800338a:	f7fd f8f7 	bl	800057c <HAL_Init>
  SystemClock_Config();
 800338e:	f7ff ff7f 	bl	8003290 <SystemClock_Config>
  MX_GPIO_Init();
 8003392:	f7ff fe21 	bl	8002fd8 <MX_GPIO_Init>
  MX_DMA_Init();
 8003396:	f7ff fe49 	bl	800302c <MX_DMA_Init>
  MX_ADC1_Init();
 800339a:	f7ff febb 	bl	8003114 <MX_ADC1_Init>
  MX_TIM4_Init();
 800339e:	f7ff fef7 	bl	8003190 <MX_TIM4_Init>
  MX_UART4_Init();
 80033a2:	f7ff ff4d 	bl	8003240 <MX_UART4_Init>
  uart_debug_init(&huart4);
 80033a6:	4813      	ldr	r0, [pc, #76]	; (80033f4 <main+0x6c>)
 80033a8:	f000 f9b4 	bl	8003714 <uart_debug_init>
  uart_debug_send_line("UART ALIVE Butts butts!!\n");
 80033ac:	4812      	ldr	r0, [pc, #72]	; (80033f8 <main+0x70>)
 80033ae:	f000 fa31 	bl	8003814 <uart_debug_send_line>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80033b2:	4c12      	ldr	r4, [pc, #72]	; (80033fc <main+0x74>)
 80033b4:	2100      	movs	r1, #0
 80033b6:	4620      	mov	r0, r4
 80033b8:	f7ff f862 	bl	8002480 <HAL_TIM_PWM_Start>
  set_timer_duty_cycle(&htim4, pulse, TIM_CHANNEL_1);
 80033bc:	2200      	movs	r2, #0
 80033be:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80033c2:	4620      	mov	r0, r4
 80033c4:	f7ff ffc4 	bl	8003350 <set_timer_duty_cycle>
	  adc_result = ADC_read_adc_val_poll(&hadc1);
 80033c8:	4d0d      	ldr	r5, [pc, #52]	; (8003400 <main+0x78>)
 80033ca:	4628      	mov	r0, r5
 80033cc:	f7ff fe50 	bl	8003070 <ADC_read_adc_val_poll>
 80033d0:	4c0c      	ldr	r4, [pc, #48]	; (8003404 <main+0x7c>)
 80033d2:	6020      	str	r0, [r4, #0]
	  ADC_start_adc_conversion_IT(&hadc1);
 80033d4:	4628      	mov	r0, r5
 80033d6:	f7ff fe6b 	bl	80030b0 <ADC_start_adc_conversion_IT>
	  uart_debug_send_string("ADC Val: ");
 80033da:	480b      	ldr	r0, [pc, #44]	; (8003408 <main+0x80>)
 80033dc:	f000 fa28 	bl	8003830 <uart_debug_send_string>
	  uart_debug_print_uint32(adc_result);
 80033e0:	6820      	ldr	r0, [r4, #0]
 80033e2:	f000 f9ed 	bl	80037c0 <uart_debug_print_uint32>
	  uart_debug_newline();
 80033e6:	f000 fa09 	bl	80037fc <uart_debug_newline>
      HAL_Delay(200);
 80033ea:	20c8      	movs	r0, #200	; 0xc8
 80033ec:	f7fd f8e4 	bl	80005b8 <HAL_Delay>
 80033f0:	e7ea      	b.n	80033c8 <main+0x40>
 80033f2:	bf00      	nop
 80033f4:	20000130 	.word	0x20000130
 80033f8:	08003984 	.word	0x08003984
 80033fc:	200000a8 	.word	0x200000a8
 8003400:	200000e8 	.word	0x200000e8
 8003404:	20000030 	.word	0x20000030
 8003408:	080039a0 	.word	0x080039a0

0800340c <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM4)
 800340c:	6802      	ldr	r2, [r0, #0]
 800340e:	4b09      	ldr	r3, [pc, #36]	; (8003434 <HAL_TIM_Base_MspInit+0x28>)
 8003410:	429a      	cmp	r2, r3
 8003412:	d000      	beq.n	8003416 <HAL_TIM_Base_MspInit+0xa>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003414:	4770      	bx	lr
{
 8003416:	b082      	sub	sp, #8
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003418:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 800341c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800341e:	f042 0204 	orr.w	r2, r2, #4
 8003422:	641a      	str	r2, [r3, #64]	; 0x40
 8003424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003426:	f003 0304 	and.w	r3, r3, #4
 800342a:	9301      	str	r3, [sp, #4]
 800342c:	9b01      	ldr	r3, [sp, #4]
}
 800342e:	b002      	add	sp, #8
 8003430:	e7f0      	b.n	8003414 <HAL_TIM_Base_MspInit+0x8>
 8003432:	bf00      	nop
 8003434:	40000800 	.word	0x40000800

08003438 <HAL_ADC_MspInit>:
}
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8003438:	6802      	ldr	r2, [r0, #0]
 800343a:	4b0f      	ldr	r3, [pc, #60]	; (8003478 <HAL_ADC_MspInit+0x40>)
 800343c:	429a      	cmp	r2, r3
 800343e:	d000      	beq.n	8003442 <HAL_ADC_MspInit+0xa>
 8003440:	4770      	bx	lr
{
 8003442:	b500      	push	{lr}
 8003444:	b087      	sub	sp, #28
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003446:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 800344a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800344c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003450:	645a      	str	r2, [r3, #68]	; 0x44
 8003452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003458:	9300      	str	r3, [sp, #0]
 800345a:	9b00      	ldr	r3, [sp, #0]

    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800345c:	2301      	movs	r3, #1
 800345e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003460:	2303      	movs	r3, #3
 8003462:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003464:	2300      	movs	r3, #0
 8003466:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003468:	a901      	add	r1, sp, #4
 800346a:	4804      	ldr	r0, [pc, #16]	; (800347c <HAL_ADC_MspInit+0x44>)
 800346c:	f7fd ff32 	bl	80012d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003470:	b007      	add	sp, #28
 8003472:	f85d fb04 	ldr.w	pc, [sp], #4
 8003476:	bf00      	nop
 8003478:	40012000 	.word	0x40012000
 800347c:	40020000 	.word	0x40020000

08003480 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003480:	b500      	push	{lr}
 8003482:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003484:	4b21      	ldr	r3, [pc, #132]	; (800350c <HAL_MspInit+0x8c>)
 8003486:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003488:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800348c:	641a      	str	r2, [r3, #64]	; 0x40
 800348e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003490:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8003494:	9200      	str	r2, [sp, #0]
 8003496:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003498:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800349a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800349e:	645a      	str	r2, [r3, #68]	; 0x44
 80034a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034a6:	9301      	str	r3, [sp, #4]
 80034a8:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034aa:	2003      	movs	r0, #3
 80034ac:	f7fd fc7a 	bl	8000da4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80034b0:	2200      	movs	r2, #0
 80034b2:	4611      	mov	r1, r2
 80034b4:	f06f 000b 	mvn.w	r0, #11
 80034b8:	f7fd fc86 	bl	8000dc8 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80034bc:	2200      	movs	r2, #0
 80034be:	4611      	mov	r1, r2
 80034c0:	f06f 000a 	mvn.w	r0, #10
 80034c4:	f7fd fc80 	bl	8000dc8 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80034c8:	2200      	movs	r2, #0
 80034ca:	4611      	mov	r1, r2
 80034cc:	f06f 0009 	mvn.w	r0, #9
 80034d0:	f7fd fc7a 	bl	8000dc8 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80034d4:	2200      	movs	r2, #0
 80034d6:	4611      	mov	r1, r2
 80034d8:	f06f 0004 	mvn.w	r0, #4
 80034dc:	f7fd fc74 	bl	8000dc8 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80034e0:	2200      	movs	r2, #0
 80034e2:	4611      	mov	r1, r2
 80034e4:	f06f 0003 	mvn.w	r0, #3
 80034e8:	f7fd fc6e 	bl	8000dc8 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80034ec:	2200      	movs	r2, #0
 80034ee:	4611      	mov	r1, r2
 80034f0:	f06f 0001 	mvn.w	r0, #1
 80034f4:	f7fd fc68 	bl	8000dc8 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80034f8:	2200      	movs	r2, #0
 80034fa:	4611      	mov	r1, r2
 80034fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003500:	f7fd fc62 	bl	8000dc8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003504:	b003      	add	sp, #12
 8003506:	f85d fb04 	ldr.w	pc, [sp], #4
 800350a:	bf00      	nop
 800350c:	40023800 	.word	0x40023800

08003510 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM4)
 8003510:	6802      	ldr	r2, [r0, #0]
 8003512:	4b0b      	ldr	r3, [pc, #44]	; (8003540 <HAL_TIM_MspPostInit+0x30>)
 8003514:	429a      	cmp	r2, r3
 8003516:	d000      	beq.n	800351a <HAL_TIM_MspPostInit+0xa>
 8003518:	4770      	bx	lr
{
 800351a:	b500      	push	{lr}
 800351c:	b087      	sub	sp, #28
  /* USER CODE END TIM4_MspPostInit 0 */

    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800351e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003522:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003524:	2302      	movs	r3, #2
 8003526:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003528:	2200      	movs	r2, #0
 800352a:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800352c:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800352e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003530:	a901      	add	r1, sp, #4
 8003532:	4804      	ldr	r0, [pc, #16]	; (8003544 <HAL_TIM_MspPostInit+0x34>)
 8003534:	f7fd fece 	bl	80012d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003538:	b007      	add	sp, #28
 800353a:	f85d fb04 	ldr.w	pc, [sp], #4
 800353e:	bf00      	nop
 8003540:	40000800 	.word	0x40000800
 8003544:	40020c00 	.word	0x40020c00

08003548 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==UART4)
 8003548:	6802      	ldr	r2, [r0, #0]
 800354a:	4b2c      	ldr	r3, [pc, #176]	; (80035fc <HAL_UART_MspInit+0xb4>)
 800354c:	429a      	cmp	r2, r3
 800354e:	d000      	beq.n	8003552 <HAL_UART_MspInit+0xa>
 8003550:	4770      	bx	lr
{
 8003552:	b530      	push	{r4, r5, lr}
 8003554:	b087      	sub	sp, #28
 8003556:	4604      	mov	r4, r0
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003558:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 800355c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800355e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003562:	641a      	str	r2, [r3, #64]	; 0x40
 8003564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003566:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800356a:	9300      	str	r3, [sp, #0]
 800356c:	9b00      	ldr	r3, [sp, #0]
  
    /**UART4 GPIO Configuration    
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800356e:	2303      	movs	r3, #3
 8003570:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003572:	2202      	movs	r2, #2
 8003574:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003576:	2500      	movs	r5, #0
 8003578:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800357a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800357c:	2308      	movs	r3, #8
 800357e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003580:	a901      	add	r1, sp, #4
 8003582:	481f      	ldr	r0, [pc, #124]	; (8003600 <HAL_UART_MspInit+0xb8>)
 8003584:	f7fd fea6 	bl	80012d4 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8003588:	481e      	ldr	r0, [pc, #120]	; (8003604 <HAL_UART_MspInit+0xbc>)
 800358a:	4b1f      	ldr	r3, [pc, #124]	; (8003608 <HAL_UART_MspInit+0xc0>)
 800358c:	6003      	str	r3, [r0, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 800358e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003592:	6043      	str	r3, [r0, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003594:	2340      	movs	r3, #64	; 0x40
 8003596:	6083      	str	r3, [r0, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003598:	60c5      	str	r5, [r0, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800359a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800359e:	6103      	str	r3, [r0, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035a0:	6145      	str	r5, [r0, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035a2:	6185      	str	r5, [r0, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 80035a4:	61c5      	str	r5, [r0, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80035a6:	6205      	str	r5, [r0, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80035a8:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80035aa:	f7fd fcef 	bl	8000f8c <HAL_DMA_Init>
 80035ae:	b9d8      	cbnz	r0, 80035e8 <HAL_UART_MspInit+0xa0>
    {
      _Error_Handler(__FILE__, __LINE__);
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 80035b0:	4b14      	ldr	r3, [pc, #80]	; (8003604 <HAL_UART_MspInit+0xbc>)
 80035b2:	6623      	str	r3, [r4, #96]	; 0x60
 80035b4:	639c      	str	r4, [r3, #56]	; 0x38

    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80035b6:	4815      	ldr	r0, [pc, #84]	; (800360c <HAL_UART_MspInit+0xc4>)
 80035b8:	4b15      	ldr	r3, [pc, #84]	; (8003610 <HAL_UART_MspInit+0xc8>)
 80035ba:	6003      	str	r3, [r0, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80035bc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80035c0:	6043      	str	r3, [r0, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035c2:	2300      	movs	r3, #0
 80035c4:	6083      	str	r3, [r0, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035c6:	60c3      	str	r3, [r0, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80035c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035cc:	6102      	str	r2, [r0, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035ce:	6143      	str	r3, [r0, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035d0:	6183      	str	r3, [r0, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80035d2:	61c3      	str	r3, [r0, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80035d4:	6203      	str	r3, [r0, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80035d6:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80035d8:	f7fd fcd8 	bl	8000f8c <HAL_DMA_Init>
 80035dc:	b948      	cbnz	r0, 80035f2 <HAL_UART_MspInit+0xaa>
    {
      _Error_Handler(__FILE__, __LINE__);
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80035de:	4b0b      	ldr	r3, [pc, #44]	; (800360c <HAL_UART_MspInit+0xc4>)
 80035e0:	6663      	str	r3, [r4, #100]	; 0x64
 80035e2:	639c      	str	r4, [r3, #56]	; 0x38
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80035e4:	b007      	add	sp, #28
 80035e6:	bd30      	pop	{r4, r5, pc}
      _Error_Handler(__FILE__, __LINE__);
 80035e8:	21e7      	movs	r1, #231	; 0xe7
 80035ea:	480a      	ldr	r0, [pc, #40]	; (8003614 <HAL_UART_MspInit+0xcc>)
 80035ec:	f7ff fd90 	bl	8003110 <_Error_Handler>
 80035f0:	e7de      	b.n	80035b0 <HAL_UART_MspInit+0x68>
      _Error_Handler(__FILE__, __LINE__);
 80035f2:	21f9      	movs	r1, #249	; 0xf9
 80035f4:	4807      	ldr	r0, [pc, #28]	; (8003614 <HAL_UART_MspInit+0xcc>)
 80035f6:	f7ff fd8b 	bl	8003110 <_Error_Handler>
 80035fa:	e7f0      	b.n	80035de <HAL_UART_MspInit+0x96>
 80035fc:	40004c00 	.word	0x40004c00
 8003600:	40020000 	.word	0x40020000
 8003604:	200001a0 	.word	0x200001a0
 8003608:	40026070 	.word	0x40026070
 800360c:	20000048 	.word	0x20000048
 8003610:	40026040 	.word	0x40026040
 8003614:	080039ac 	.word	0x080039ac

08003618 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8003618:	4770      	bx	lr

0800361a <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800361a:	e7fe      	b.n	800361a <HardFault_Handler>

0800361c <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 800361c:	e7fe      	b.n	800361c <MemManage_Handler>

0800361e <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800361e:	e7fe      	b.n	800361e <BusFault_Handler>

08003620 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8003620:	e7fe      	b.n	8003620 <UsageFault_Handler>

08003622 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8003622:	4770      	bx	lr

08003624 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8003624:	4770      	bx	lr

08003626 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8003626:	4770      	bx	lr

08003628 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003628:	b508      	push	{r3, lr}

  HAL_IncTick();
 800362a:	f7fc ffb3 	bl	8000594 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 800362e:	f7fd fc2e 	bl	8000e8e <HAL_SYSTICK_IRQHandler>
 8003632:	bd08      	pop	{r3, pc}

08003634 <DMA1_Stream2_IRQHandler>:

/**
* @brief This function handles DMA1 stream2 global interrupt.
*/
void DMA1_Stream2_IRQHandler(void)
{
 8003634:	b508      	push	{r3, lr}

  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8003636:	4802      	ldr	r0, [pc, #8]	; (8003640 <DMA1_Stream2_IRQHandler+0xc>)
 8003638:	f7fd fd5e 	bl	80010f8 <HAL_DMA_IRQHandler>
 800363c:	bd08      	pop	{r3, pc}
 800363e:	bf00      	nop
 8003640:	20000048 	.word	0x20000048

08003644 <UART4_IRQHandler>:

}

void UART4_IRQHandler(void)
{
 8003644:	b508      	push	{r3, lr}
	HAL_UART_IRQHandler(&huart4);
 8003646:	4802      	ldr	r0, [pc, #8]	; (8003650 <UART4_IRQHandler+0xc>)
 8003648:	f7ff f9b2 	bl	80029b0 <HAL_UART_IRQHandler>
 800364c:	bd08      	pop	{r3, pc}
 800364e:	bf00      	nop
 8003650:	20000130 	.word	0x20000130

08003654 <DMA1_Stream4_IRQHandler>:
}
/**
* @brief This function handles DMA1 stream4 global interrupt.
*/
void DMA1_Stream4_IRQHandler(void)
{
 8003654:	b508      	push	{r3, lr}

  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8003656:	4802      	ldr	r0, [pc, #8]	; (8003660 <DMA1_Stream4_IRQHandler+0xc>)
 8003658:	f7fd fd4e 	bl	80010f8 <HAL_DMA_IRQHandler>
 800365c:	bd08      	pop	{r3, pc}
 800365e:	bf00      	nop
 8003660:	200001a0 	.word	0x200001a0

08003664 <ADC_IRQHandler>:


// the ADC IRQ handler that could be used for interrupt style adc polling
// Tim added this because MX cube doesn't assume you we want to do interrupt style ADC conversions
void ADC_IRQHandler(void)
{
 8003664:	b508      	push	{r3, lr}
	HAL_ADC_IRQHandler(&hadc1);
 8003666:	4802      	ldr	r0, [pc, #8]	; (8003670 <ADC_IRQHandler+0xc>)
 8003668:	f7fd fa23 	bl	8000ab2 <HAL_ADC_IRQHandler>
 800366c:	bd08      	pop	{r3, pc}
 800366e:	bf00      	nop
 8003670:	200000e8 	.word	0x200000e8

08003674 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003674:	b410      	push	{r4}
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003676:	4a0f      	ldr	r2, [pc, #60]	; (80036b4 <SystemInit+0x40>)
 8003678:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800367c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003680:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003684:	4b0c      	ldr	r3, [pc, #48]	; (80036b8 <SystemInit+0x44>)
 8003686:	6819      	ldr	r1, [r3, #0]
 8003688:	f041 0101 	orr.w	r1, r1, #1
 800368c:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800368e:	2000      	movs	r0, #0
 8003690:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003692:	681c      	ldr	r4, [r3, #0]
 8003694:	4909      	ldr	r1, [pc, #36]	; (80036bc <SystemInit+0x48>)
 8003696:	4021      	ands	r1, r4
 8003698:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800369a:	4909      	ldr	r1, [pc, #36]	; (80036c0 <SystemInit+0x4c>)
 800369c:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800369e:	6819      	ldr	r1, [r3, #0]
 80036a0:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80036a4:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80036a6:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80036a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80036ac:	6093      	str	r3, [r2, #8]
#endif
}
 80036ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80036b2:	4770      	bx	lr
 80036b4:	e000ed00 	.word	0xe000ed00
 80036b8:	40023800 	.word	0x40023800
 80036bc:	fef6ffff 	.word	0xfef6ffff
 80036c0:	24003010 	.word	0x24003010

080036c4 <uart_debug_transmit>:
    uart_debug_add_to_buffer(&in, 1);
}

/* internal helper function to handle the actual HAL call*/
void uart_debug_transmit(void) {
	if(debugUART != NULL)
 80036c4:	4b0d      	ldr	r3, [pc, #52]	; (80036fc <uart_debug_transmit+0x38>)
 80036c6:	6818      	ldr	r0, [r3, #0]
 80036c8:	b1b8      	cbz	r0, 80036fa <uart_debug_transmit+0x36>
void uart_debug_transmit(void) {
 80036ca:	b510      	push	{r4, lr}
	{
		uint32_t head = uart_debug_buffer_head;
 80036cc:	4b0c      	ldr	r3, [pc, #48]	; (8003700 <uart_debug_transmit+0x3c>)
 80036ce:	681c      	ldr	r4, [r3, #0]
		if(head < uart_debug_buffer_tail) {
 80036d0:	4b0c      	ldr	r3, [pc, #48]	; (8003704 <uart_debug_transmit+0x40>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	429c      	cmp	r4, r3
 80036d6:	d201      	bcs.n	80036dc <uart_debug_transmit+0x18>
			/* we've wrapped around
			 * head is at the end and we'll have to do another HAL call later
			 */
			head = DEBUG_UART_TRANSMIT_BUFFER_LEN;
 80036d8:	f44f 5400 	mov.w	r4, #8192	; 0x2000
		}
		uint32_t len = head - uart_debug_buffer_tail;
 80036dc:	4b09      	ldr	r3, [pc, #36]	; (8003704 <uart_debug_transmit+0x40>)
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	1aa2      	subs	r2, r4, r2
            alignedAddr = (uint32_t)(uart_debug_buffer + uart_debug_buffer_tail) & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, len);
#endif


		HAL_UART_Transmit_DMA(debugUART, uart_debug_buffer + uart_debug_buffer_tail, len);
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	b292      	uxth	r2, r2
 80036e6:	4908      	ldr	r1, [pc, #32]	; (8003708 <uart_debug_transmit+0x44>)
 80036e8:	4419      	add	r1, r3
 80036ea:	f7ff f84d 	bl	8002788 <HAL_UART_Transmit_DMA>
		//HAL_UART_Transmit(debugUART, uart_debug_buffer + uart_debug_buffer_tail, len, 1000); //try blocking IO for now
		//HAL_UART_Transmit_IT(debugUART, uart_debug_buffer + uart_debug_buffer_tail, len);
		uart_debug_busy_flag = 1;
 80036ee:	2201      	movs	r2, #1
 80036f0:	4b06      	ldr	r3, [pc, #24]	; (800370c <uart_debug_transmit+0x48>)
 80036f2:	701a      	strb	r2, [r3, #0]
		/*update the transmit head*/
		uart_debug_buffer_transmit_head = head;
 80036f4:	4b06      	ldr	r3, [pc, #24]	; (8003710 <uart_debug_transmit+0x4c>)
 80036f6:	601c      	str	r4, [r3, #0]
 80036f8:	bd10      	pop	{r4, pc}
 80036fa:	4770      	bx	lr
 80036fc:	20000034 	.word	0x20000034
 8003700:	20000038 	.word	0x20000038
 8003704:	2000003c 	.word	0x2000003c
 8003708:	20000234 	.word	0x20000234
 800370c:	20000010 	.word	0x20000010
 8003710:	20000040 	.word	0x20000040

08003714 <uart_debug_init>:
    if(NULL == uart) {
 8003714:	b128      	cbz	r0, 8003722 <uart_debug_init+0xe>
    debugUART = uart;
 8003716:	4a04      	ldr	r2, [pc, #16]	; (8003728 <uart_debug_init+0x14>)
 8003718:	6010      	str	r0, [r2, #0]
    uart_debug_busy_flag = 0;
 800371a:	2000      	movs	r0, #0
 800371c:	4b03      	ldr	r3, [pc, #12]	; (800372c <uart_debug_init+0x18>)
 800371e:	7018      	strb	r0, [r3, #0]
    return 0;
 8003720:	4770      	bx	lr
        return -1;
 8003722:	f04f 30ff 	mov.w	r0, #4294967295
}
 8003726:	4770      	bx	lr
 8003728:	20000034 	.word	0x20000034
 800372c:	20000010 	.word	0x20000010

08003730 <uart_debug_add_to_buffer>:
uint32_t uart_debug_add_to_buffer(uint8_t* in, uint32_t len) {
 8003730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003734:	4606      	mov	r6, r0
 8003736:	460c      	mov	r4, r1
    if(len > uart_debug_buffer_remaining) {
 8003738:	4b1d      	ldr	r3, [pc, #116]	; (80037b0 <uart_debug_add_to_buffer+0x80>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	428b      	cmp	r3, r1
 800373e:	d201      	bcs.n	8003744 <uart_debug_add_to_buffer+0x14>
        len = uart_debug_buffer_remaining; /*toss bit that won't fit*/
 8003740:	4b1b      	ldr	r3, [pc, #108]	; (80037b0 <uart_debug_add_to_buffer+0x80>)
 8003742:	681c      	ldr	r4, [r3, #0]
    uint32_t remainingLen = (len + uart_debug_buffer_head);
 8003744:	4b1b      	ldr	r3, [pc, #108]	; (80037b4 <uart_debug_add_to_buffer+0x84>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4423      	add	r3, r4
    if(DEBUG_UART_TRANSMIT_BUFFER_LEN > remainingLen) {
 800374a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800374e:	d215      	bcs.n	800377c <uart_debug_add_to_buffer+0x4c>
        memcpy(uart_debug_buffer + uart_debug_buffer_head, in, len);
 8003750:	4d18      	ldr	r5, [pc, #96]	; (80037b4 <uart_debug_add_to_buffer+0x84>)
 8003752:	682b      	ldr	r3, [r5, #0]
 8003754:	4622      	mov	r2, r4
 8003756:	4631      	mov	r1, r6
 8003758:	4817      	ldr	r0, [pc, #92]	; (80037b8 <uart_debug_add_to_buffer+0x88>)
 800375a:	4418      	add	r0, r3
 800375c:	f000 f8ee 	bl	800393c <memcpy>
        uart_debug_buffer_head += len;
 8003760:	682b      	ldr	r3, [r5, #0]
 8003762:	4423      	add	r3, r4
 8003764:	602b      	str	r3, [r5, #0]
    uart_debug_buffer_remaining -= len; /* update this*/
 8003766:	4a12      	ldr	r2, [pc, #72]	; (80037b0 <uart_debug_add_to_buffer+0x80>)
 8003768:	6813      	ldr	r3, [r2, #0]
 800376a:	1b1b      	subs	r3, r3, r4
 800376c:	6013      	str	r3, [r2, #0]
    if(!uart_debug_busy_flag) {
 800376e:	4b13      	ldr	r3, [pc, #76]	; (80037bc <uart_debug_add_to_buffer+0x8c>)
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	b25b      	sxtb	r3, r3
 8003774:	b1c3      	cbz	r3, 80037a8 <uart_debug_add_to_buffer+0x78>
}
 8003776:	4620      	mov	r0, r4
 8003778:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        uint32_t endLen = DEBUG_UART_TRANSMIT_BUFFER_LEN - uart_debug_buffer_head;
 800377c:	4f0d      	ldr	r7, [pc, #52]	; (80037b4 <uart_debug_add_to_buffer+0x84>)
 800377e:	683d      	ldr	r5, [r7, #0]
 8003780:	f5c5 5500 	rsb	r5, r5, #8192	; 0x2000
        memcpy(uart_debug_buffer + uart_debug_buffer_head, in, endLen);
 8003784:	6838      	ldr	r0, [r7, #0]
 8003786:	f8df 9030 	ldr.w	r9, [pc, #48]	; 80037b8 <uart_debug_add_to_buffer+0x88>
 800378a:	462a      	mov	r2, r5
 800378c:	4631      	mov	r1, r6
 800378e:	4448      	add	r0, r9
 8003790:	f000 f8d4 	bl	800393c <memcpy>
        uint32_t startLen = len - endLen; /*what goes at the start of the buffer*/
 8003794:	eba4 0805 	sub.w	r8, r4, r5
        memcpy(uart_debug_buffer, in + endLen, startLen);
 8003798:	4642      	mov	r2, r8
 800379a:	1971      	adds	r1, r6, r5
 800379c:	4648      	mov	r0, r9
 800379e:	f000 f8cd 	bl	800393c <memcpy>
        uart_debug_buffer_head = startLen;
 80037a2:	f8c7 8000 	str.w	r8, [r7]
 80037a6:	e7de      	b.n	8003766 <uart_debug_add_to_buffer+0x36>
        uart_debug_transmit(); /* start things*/
 80037a8:	f7ff ff8c 	bl	80036c4 <uart_debug_transmit>
 80037ac:	e7e3      	b.n	8003776 <uart_debug_add_to_buffer+0x46>
 80037ae:	bf00      	nop
 80037b0:	2000000c 	.word	0x2000000c
 80037b4:	20000038 	.word	0x20000038
 80037b8:	20000234 	.word	0x20000234
 80037bc:	20000010 	.word	0x20000010

080037c0 <uart_debug_print_uint32>:
void uart_debug_print_uint32(uint32_t val) {
 80037c0:	b510      	push	{r4, lr}
    uint32_t pos = DEBUG_UART_TEMP_BUFFER_LEN;
 80037c2:	2231      	movs	r2, #49	; 0x31
        uart_debug_buffer_temp[--pos] = (val % 10) + '0';
 80037c4:	3a01      	subs	r2, #1
 80037c6:	4b0b      	ldr	r3, [pc, #44]	; (80037f4 <uart_debug_print_uint32+0x34>)
 80037c8:	fba3 1300 	umull	r1, r3, r3, r0
 80037cc:	08db      	lsrs	r3, r3, #3
 80037ce:	4619      	mov	r1, r3
 80037d0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80037d4:	005c      	lsls	r4, r3, #1
 80037d6:	1b03      	subs	r3, r0, r4
 80037d8:	3330      	adds	r3, #48	; 0x30
 80037da:	4807      	ldr	r0, [pc, #28]	; (80037f8 <uart_debug_print_uint32+0x38>)
 80037dc:	5483      	strb	r3, [r0, r2]
        val /= 10;
 80037de:	4608      	mov	r0, r1
    } while(val);
 80037e0:	2900      	cmp	r1, #0
 80037e2:	d1ef      	bne.n	80037c4 <uart_debug_print_uint32+0x4>
    uart_debug_add_to_buffer(uart_debug_buffer_temp + pos, DEBUG_UART_TEMP_BUFFER_LEN - pos);
 80037e4:	f1c2 0131 	rsb	r1, r2, #49	; 0x31
 80037e8:	4803      	ldr	r0, [pc, #12]	; (80037f8 <uart_debug_print_uint32+0x38>)
 80037ea:	4410      	add	r0, r2
 80037ec:	f7ff ffa0 	bl	8003730 <uart_debug_add_to_buffer>
 80037f0:	bd10      	pop	{r4, pc}
 80037f2:	bf00      	nop
 80037f4:	cccccccd 	.word	0xcccccccd
 80037f8:	20000200 	.word	0x20000200

080037fc <uart_debug_newline>:
void uart_debug_newline(void) {
 80037fc:	b500      	push	{lr}
 80037fe:	b083      	sub	sp, #12
    uint8_t newlineChar = '\n';
 8003800:	a802      	add	r0, sp, #8
 8003802:	230a      	movs	r3, #10
 8003804:	f800 3d01 	strb.w	r3, [r0, #-1]!
    uart_debug_add_to_buffer(&newlineChar, 1);
 8003808:	2101      	movs	r1, #1
 800380a:	f7ff ff91 	bl	8003730 <uart_debug_add_to_buffer>
}
 800380e:	b003      	add	sp, #12
 8003810:	f85d fb04 	ldr.w	pc, [sp], #4

08003814 <uart_debug_send_line>:
void uart_debug_send_line(char* str) {
 8003814:	b508      	push	{r3, lr}
    uint32_t len = 0;
 8003816:	2100      	movs	r1, #0
    for(; len < DEBUG_UART_TRANSMIT_BUFFER_LEN; ++len) {
 8003818:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800381c:	d204      	bcs.n	8003828 <uart_debug_send_line+0x14>
        if(str[len] == '\n') {
 800381e:	5c43      	ldrb	r3, [r0, r1]
 8003820:	2b0a      	cmp	r3, #10
 8003822:	d001      	beq.n	8003828 <uart_debug_send_line+0x14>
    for(; len < DEBUG_UART_TRANSMIT_BUFFER_LEN; ++len) {
 8003824:	3101      	adds	r1, #1
 8003826:	e7f7      	b.n	8003818 <uart_debug_send_line+0x4>
    uart_debug_add_to_buffer((uint8_t*) str, len + 1); /* to account for the newline char*/
 8003828:	3101      	adds	r1, #1
 800382a:	f7ff ff81 	bl	8003730 <uart_debug_add_to_buffer>
 800382e:	bd08      	pop	{r3, pc}

08003830 <uart_debug_send_string>:
void uart_debug_send_string(char* str) {
 8003830:	b508      	push	{r3, lr}
    uint32_t len = 0;
 8003832:	2100      	movs	r1, #0
    for(; len < DEBUG_UART_TRANSMIT_BUFFER_LEN; ++len) {
 8003834:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8003838:	d203      	bcs.n	8003842 <uart_debug_send_string+0x12>
        if(str[len] == '\0') {
 800383a:	5c43      	ldrb	r3, [r0, r1]
 800383c:	b10b      	cbz	r3, 8003842 <uart_debug_send_string+0x12>
    for(; len < DEBUG_UART_TRANSMIT_BUFFER_LEN; ++len) {
 800383e:	3101      	adds	r1, #1
 8003840:	e7f8      	b.n	8003834 <uart_debug_send_string+0x4>
    uart_debug_add_to_buffer((uint8_t*) str, len);
 8003842:	f7ff ff75 	bl	8003730 <uart_debug_add_to_buffer>
 8003846:	bd08      	pop	{r3, pc}

08003848 <uart_debug_callback>:


/*void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart) {
 * moved the callback to main, that callback then calls this function
 * */
void uart_debug_callback(void) {
 8003848:	b508      	push	{r3, lr}
    uart_debug_buffer_remaining += (uart_debug_buffer_transmit_head - uart_debug_buffer_tail);
 800384a:	4a10      	ldr	r2, [pc, #64]	; (800388c <uart_debug_callback+0x44>)
 800384c:	6813      	ldr	r3, [r2, #0]
 800384e:	4910      	ldr	r1, [pc, #64]	; (8003890 <uart_debug_callback+0x48>)
 8003850:	6809      	ldr	r1, [r1, #0]
 8003852:	1a5b      	subs	r3, r3, r1
 8003854:	490f      	ldr	r1, [pc, #60]	; (8003894 <uart_debug_callback+0x4c>)
 8003856:	6808      	ldr	r0, [r1, #0]
 8003858:	4403      	add	r3, r0
 800385a:	600b      	str	r3, [r1, #0]
    if(DEBUG_UART_TRANSMIT_BUFFER_LEN <= uart_debug_buffer_transmit_head) {
 800385c:	6813      	ldr	r3, [r2, #0]
 800385e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003862:	d302      	bcc.n	800386a <uart_debug_callback+0x22>
        uart_debug_buffer_transmit_head = 0; //wrap this
 8003864:	2200      	movs	r2, #0
 8003866:	4b09      	ldr	r3, [pc, #36]	; (800388c <uart_debug_callback+0x44>)
 8003868:	601a      	str	r2, [r3, #0]
    }
    uart_debug_buffer_tail = uart_debug_buffer_transmit_head; /*update tail*/
 800386a:	4b08      	ldr	r3, [pc, #32]	; (800388c <uart_debug_callback+0x44>)
 800386c:	6819      	ldr	r1, [r3, #0]
 800386e:	4a08      	ldr	r2, [pc, #32]	; (8003890 <uart_debug_callback+0x48>)
 8003870:	6011      	str	r1, [r2, #0]
    if(uart_debug_buffer_head == uart_debug_buffer_transmit_head) {
 8003872:	4a09      	ldr	r2, [pc, #36]	; (8003898 <uart_debug_callback+0x50>)
 8003874:	6812      	ldr	r2, [r2, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	429a      	cmp	r2, r3
 800387a:	d002      	beq.n	8003882 <uart_debug_callback+0x3a>
        /*nothing new has been added, so nothing to do!*/
        uart_debug_busy_flag = 0;
    } else {
        uart_debug_transmit();
 800387c:	f7ff ff22 	bl	80036c4 <uart_debug_transmit>
 8003880:	bd08      	pop	{r3, pc}
        uart_debug_busy_flag = 0;
 8003882:	2200      	movs	r2, #0
 8003884:	4b05      	ldr	r3, [pc, #20]	; (800389c <uart_debug_callback+0x54>)
 8003886:	701a      	strb	r2, [r3, #0]
 8003888:	bd08      	pop	{r3, pc}
 800388a:	bf00      	nop
 800388c:	20000040 	.word	0x20000040
 8003890:	2000003c 	.word	0x2000003c
 8003894:	2000000c 	.word	0x2000000c
 8003898:	20000038 	.word	0x20000038
 800389c:	20000010 	.word	0x20000010

080038a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80038a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80038d8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80038a4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80038a6:	e003      	b.n	80038b0 <LoopCopyDataInit>

080038a8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80038a8:	4b0c      	ldr	r3, [pc, #48]	; (80038dc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80038aa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80038ac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80038ae:	3104      	adds	r1, #4

080038b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80038b0:	480b      	ldr	r0, [pc, #44]	; (80038e0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80038b2:	4b0c      	ldr	r3, [pc, #48]	; (80038e4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80038b4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80038b6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80038b8:	d3f6      	bcc.n	80038a8 <CopyDataInit>
  ldr  r2, =_sbss
 80038ba:	4a0b      	ldr	r2, [pc, #44]	; (80038e8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80038bc:	e002      	b.n	80038c4 <LoopFillZerobss>

080038be <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80038be:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80038c0:	f842 3b04 	str.w	r3, [r2], #4

080038c4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80038c4:	4b09      	ldr	r3, [pc, #36]	; (80038ec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80038c6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80038c8:	d3f9      	bcc.n	80038be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80038ca:	f7ff fed3 	bl	8003674 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80038ce:	f000 f811 	bl	80038f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80038d2:	f7ff fd59 	bl	8003388 <main>
  bx  lr    
 80038d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80038d8:	20040000 	.word	0x20040000
  ldr  r3, =_sidata
 80038dc:	080039f0 	.word	0x080039f0
  ldr  r0, =_sdata
 80038e0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80038e4:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 80038e8:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 80038ec:	20002234 	.word	0x20002234

080038f0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80038f0:	e7fe      	b.n	80038f0 <CAN1_RX0_IRQHandler>
	...

080038f4 <__libc_init_array>:
 80038f4:	b570      	push	{r4, r5, r6, lr}
 80038f6:	4e0d      	ldr	r6, [pc, #52]	; (800392c <__libc_init_array+0x38>)
 80038f8:	4c0d      	ldr	r4, [pc, #52]	; (8003930 <__libc_init_array+0x3c>)
 80038fa:	1ba4      	subs	r4, r4, r6
 80038fc:	10a4      	asrs	r4, r4, #2
 80038fe:	2500      	movs	r5, #0
 8003900:	42a5      	cmp	r5, r4
 8003902:	d109      	bne.n	8003918 <__libc_init_array+0x24>
 8003904:	4e0b      	ldr	r6, [pc, #44]	; (8003934 <__libc_init_array+0x40>)
 8003906:	4c0c      	ldr	r4, [pc, #48]	; (8003938 <__libc_init_array+0x44>)
 8003908:	f000 f824 	bl	8003954 <_init>
 800390c:	1ba4      	subs	r4, r4, r6
 800390e:	10a4      	asrs	r4, r4, #2
 8003910:	2500      	movs	r5, #0
 8003912:	42a5      	cmp	r5, r4
 8003914:	d105      	bne.n	8003922 <__libc_init_array+0x2e>
 8003916:	bd70      	pop	{r4, r5, r6, pc}
 8003918:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800391c:	4798      	blx	r3
 800391e:	3501      	adds	r5, #1
 8003920:	e7ee      	b.n	8003900 <__libc_init_array+0xc>
 8003922:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003926:	4798      	blx	r3
 8003928:	3501      	adds	r5, #1
 800392a:	e7f2      	b.n	8003912 <__libc_init_array+0x1e>
 800392c:	080039e8 	.word	0x080039e8
 8003930:	080039e8 	.word	0x080039e8
 8003934:	080039e8 	.word	0x080039e8
 8003938:	080039ec 	.word	0x080039ec

0800393c <memcpy>:
 800393c:	b510      	push	{r4, lr}
 800393e:	1e43      	subs	r3, r0, #1
 8003940:	440a      	add	r2, r1
 8003942:	4291      	cmp	r1, r2
 8003944:	d100      	bne.n	8003948 <memcpy+0xc>
 8003946:	bd10      	pop	{r4, pc}
 8003948:	f811 4b01 	ldrb.w	r4, [r1], #1
 800394c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003950:	e7f7      	b.n	8003942 <memcpy+0x6>
	...

08003954 <_init>:
 8003954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003956:	bf00      	nop
 8003958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800395a:	bc08      	pop	{r3}
 800395c:	469e      	mov	lr, r3
 800395e:	4770      	bx	lr

08003960 <_fini>:
 8003960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003962:	bf00      	nop
 8003964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003966:	bc08      	pop	{r3}
 8003968:	469e      	mov	lr, r3
 800396a:	4770      	bx	lr
